{"version":3,"sources":["serviceWorker.js","ResultTable.jsx","Predict.jsx","ModelStatus.jsx","PredictionResults.jsx","vegaEmbedGraph.js","pokemonModel.js","Header.jsx","Tree.jsx","About.jsx","Table.jsx","App.jsx","index.js","pokemon.jpg"],"names":["Boolean","window","location","hostname","match","ResultTable","_ref","data","columns","id","Header","accessor","d","Name","Cell","row","react_default","a","createElement","className","src","concat","original","toLowerCase","width","height","alt","type","pokemon","same","pred","top5","types","includes","arr","map","prediction","i","key","style","color","transition","es","defaultPageSize","defaultProps","props","Predict","predict","handleChange","params","loadRandomPokemon","_ref$modelLoaded","modelLoaded","inputs_","predictTestData","property","htmlFor","name","value","onChange","Type","split","readOnly","onSubmit","e","preventDefault","onClick","disabled","setTimeout","ModelStatus","model","training","statusus","modelStatus","status","PredictionResults","_ref$predictions","predictions","pokemonType","length","UI","Object","classCallCheck","this","createClass","accuracyValues","epoch","newTrainAccuracy","newValidationAccuracy","push","accuracy","set","embed","$schema","values","mark","encoding","x","field","y","lossValues","newTrainLoss","newValidationLoss","loss","tf","require","POKEMON_DATA","p","Total","HP","Attack","Defense","Speed","Sp_Atk","Sp_Def","POKEMON_TYPES","_","uniq","item","getName","_row","found","find","PokemonData","testSplit","arguments","undefined","_this$getPokemon","getPokemon","_this$getPokemon2","slicedToArray","xTrain","yTrain","xTest","yTest","tidy","dataByClass","targetsByClass","_loop","example","target","slice","idx","findIndex","xTrains","yTrains","xTests","yTests","_PokemonData$convertT","convertToTensors","_PokemonData$convertT2","targets","numExamples","Error","indices","util","shuffle","shuffledData","shuffledTargets","numTestExamples","Math","round","numTrainExamples","xDims","xs","tensor2d","ys","oneHot","tensor1d","toInt","MODEL_SAVE_PATH","PokemonTypeModel","_SavablePokemonModel","possibleConstructorReturn","getPrototypeOf","apply","inherits","xData","yTrue","yPred","logits","rows","chunk","exampleLogits","_data","topk","dataSync","Array","from","span","join","_this2","_this$data3","argMax","predictOut","renderEvaluateTable","foundP","_d","assign","_arr","tensor","SavablePokemonModel","epochs","learningRate","generateData","Model","dispose","_this$data","sequential","units","activation","inputShape","shape","forEach","layer","add","layers","dense","save","io","removeModel","createModel","optimizer","train","adam","returnCost","cost","minimize","_this","losses","softmaxCrossEntropy","asType","mean","trainLoss","plotLosses","nextFrame","listModels","models","console","log","loadModel","loadedModel","d3","children","margin","Tree","heirarchalData","tree","size","svg","append","attr","nodes","selectAll","descendants","enter","classed","text","links","source","React","Component","About","src_Tree_0","Table","App","call","run","bind","assertThisInitialized","load","samplePokemon","sample","state","resultData","predictedTypes","page","objectSpread","setState","alert","_context2","t0","asyncToGenerator","regenerator_default","_callee3","wrap","_context3","prev","next","evaluateModelOnTestData","stop","generateNewData","_context6","_ref2$target","_ref2","defineProperty","randPoke","activePage","_this3","_this$state","correctPredictions","filter","top5Pred","_ref3","correctPredictionsPercent","floor","top5PredictionsPercent","home","src_Header","src_ModelStatus","min","step","max","isNaN","src_ResultTable","src_Predict","src_PredictionResults","src_About","goTo","pokemonImg","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/main.b234b209.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactTable from \"react-table\";\n\nfunction ResultTable({data}) {\n\n\n    const columns = [\n\n        {\n            id: \"Name\",\n            Header: 'Name',\n            accessor: d => d.Name,\n            Cell: row => {\n\n                return (\n                    <span>\n                        <img\n                            className={'pr-2'}\n                            src={`https://img.pokemondb.net/artwork/${row.original.Name.toLowerCase()}.jpg`}\n                            width=\"36\"\n                            height=\"36\"\n                            alt={row.original.Name}/>\n                        {row.original.Name}\n                    </span>\n                )\n            }\n        },\n        {\n            id: \"Type\",\n            Header: 'Type',\n            accessor: d => d.type,\n        },\n        // {\n        //     id: \"Total\",\n        //     Header: 'Total',\n        //     accessor: d => d.Total,\n        // },\n        // {\n        //     id: \"HP\",\n        //     Header: 'HP',\n        //     accessor: d => d.HP\n        //\n        // },\n        // {\n        //     id: 'Attack',\n        //     Header: 'Attack',\n        //     accessor: d => d.Attack\n        // },\n        // {\n        //     id: 'Defense',\n        //     Header: 'Defense',\n        //     accessor: d => d.Defense,\n        // },\n        // {\n        //     id: \"Speed\",\n        //     Header: 'Speed',\n        //     accessor: d => d.Speed,\n        // },\n        // {\n        //     id: 'Sp_Atk',\n        //     Header: 'Sp_Atk',\n        //     accessor: d => d.Sp_Atk,\n        // },\n        // {\n        //     id: 'Sp_Def',\n        //     Header: 'Sp_Def',\n        //     accessor: d => d.Sp_Def\n        // },\n        {\n            id: \"Prediction\",\n            Header: \"Top 5 Predictions\",\n            Cell: row => {\n\n                const pokemon = row.original;\n\n                const same = pokemon.pred === pokemon.type;\n                const top5 = pokemon.types.includes(pokemon.type);\n\n                const arr = pokemon.types.map((prediction, i) => {\n\n                    if (prediction === pokemon.type) {\n\n                        return <b className={'p-1'} key={prediction + i}>{prediction}</b>\n                    }\n                    return <span className={'p-1'} key={prediction + i}>{prediction}</span>\n                });\n\n                return (\n                    <span>\n            <span style={{\n                color: same ? '#57d500'\n                    : top5 ? '#ffbf00'\n                        : '#ff2e00',\n                transition: 'all .3s ease'\n            }}>\n              &#x25cf;\n            </span> {arr}\n          </span>\n                );\n            }\n        }\n    ];\n\n\n\n    return (\n\n\n\n            <ReactTable\n                defaultPageSize={10}\n                className={'striped'}\n                columns={columns}\n                data={data}\n            />\n    );\n}\n\nResultTable.propTypes = {};\nResultTable.defaultProps = {};\n\nexport default ResultTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst props = ['Total', 'HP', 'Attack', 'Defense', 'Speed', 'Sp_Atk', 'Sp_Def'];\n\n\nfunction Predict({predict, handleChange, params, loadRandomPokemon, modelLoaded = false, predictTestData}) {\n\n    const inputs_ = props.map(property => {\n\n        return (\n            <div key={property}>\n                <label htmlFor={property}>{property}</label>\n                <input\n                    name={property}\n                    type={'number'}\n                    width={100}\n                    className={'form-control-sm mono'}\n                    id={property}\n                    value={params[property]}\n                    onChange={handleChange}\n                />\n            </div>\n\n        )\n    });\n\n    const {Name, Type: _Type} = params;\n\n    const Type = _Type.split('\\n')[0];\n\n    let readOnly = [];\n    if (Name && Type) {\n\n        readOnly = ['Name', 'Type'].map((property, i) => {\n\n            const value = property === 'Type' ? Type : params[property];\n\n            return (\n                <div key={property}>\n                    <label htmlFor={property}>\n                        {property}\n                    </label>\n                    <input type={'text'}\n                           className={'form-control-sm'}\n                           id={property}\n                           value={value}\n                           readOnly\n                           width={100}\n                    />\n                </div>\n            )\n\n        })\n    }\n\n    return (\n\n        <form onSubmit={e => {\n\n            e.preventDefault();\n            predict();\n\n        }}\n\n        >\n\n\n            {inputs_}\n\n\n            {readOnly}\n\n\n            <div className={'row my-3 mx-1 btn-group'}>\n                <button type={'button'} className={'btn btn-secondary'}\n                        onClick={loadRandomPokemon}\n                        disabled={!modelLoaded}\n                >\n                    random\n                </button>\n                <button\n                    disabled={!modelLoaded}\n\n                    onClick={predict}\n                    className={'btn btn-secondary'}>\n                    {!modelLoaded ? \"load model\" : \"predict\"}\n                </button>\n\n\n            </div>\n            <div className={'btn-group'}>\n\n                <button type={'button'} className={'btn btn-primary'}\n                        onClick={() => {\n                            loadRandomPokemon();\n\n                            setTimeout(predict, 100);\n                        }}\n                        disabled={!modelLoaded}\n                >\n                    random & predict\n                </button>\n\n            </div>\n        </form>\n    );\n}\n\nPredict.propTypes = {\n    predict: PropTypes.func.isRequired,\n    predictTestData: PropTypes.func.isRequired,\n    loadRandomPokemon: PropTypes.func.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    params: PropTypes.object.isRequired,\n    modelLoaded: PropTypes.bool.isRequired,\n};\nPredict.defaultProps = {};\n\nexport default Predict;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nfunction ModelStatus({model, training, modelStatus}) {\n\n    const statusus = modelStatus.split('_');\n\n\n    return (\n        <div className={'col'}>\n            <h4>\n                Model:\n                {/*<span style={{*/}\n                {/*color: model.model ? '#57d500' : '#ff2e00',*/}\n                {/*transition: 'all .3s ease'*/}\n                {/*}}*/}\n                {/*className={'pl-2'}*/}\n                {/*>*/}\n                {/*&#x25cf;*/}\n                {/*</span>*/}\n\n                <small>\n                    {statusus.map(status => <em key={status} className={'m-2'}>{status}</em>)}\n                </small>\n\n            </h4>\n\n\n        </div>\n    );\n}\n\nModelStatus.propTypes = {\n    modelStatus: PropTypes.string.isRequired,\n    training: PropTypes.bool.isRequired,\n};\nModelStatus.defaultProps = {};\n\nexport default ModelStatus;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction PredictionResults({predictions = [], pokemonType}) {\n\n    if (!predictions.length) {\n\n        return null;\n    }\n    return (\n        <div className={'my-2'}\n        >\n            <h4>Predicted Types</h4>\n            <ol className={'list-group'}>\n                {predictions.map((prediction, i) => {\n\n                    const type = pokemonType.split('\\n')[0];\n\n                    const same = type === prediction;\n\n                    return (\n                        <li key={prediction}\n                            className={same ? 'list-group-item active' : 'list-group-item'}\n                        >\n                            {prediction}\n                        </li>\n                    )\n                })}\n            </ol>\n        </div>\n    );\n}\n\nPredictionResults.propTypes = {\n    predictions: PropTypes.array.isRequired,\n    pokemonType: PropTypes.string.isRequired,\n};\nPredictionResults.defaultProps = {};\n\nexport default PredictionResults;\n","import embed from \"vega-embed\";\n\nexport class UI {\n\n    /**\n     * Plot new accuracy values.\n     *\n     * @param lossValues An `Array` of data to append to.\n     * @param epoch Training epoch number.\n     * @param newTrainLoss The new training accuracy, as a single `Number`.\n     * @param newValidationLoss The new validation accuracy, as a single `Number`.\n     */\n    static plotAccuracies(\n        accuracyValues, epoch, newTrainAccuracy, newValidationAccuracy) {\n        accuracyValues.push(\n            {epoch, 'accuracy': newTrainAccuracy, 'set': 'train'});\n        accuracyValues.push(\n            {epoch, 'accuracy': newValidationAccuracy, 'set': 'validation'});\n        embed(\n            '#accuracyCanvas', {\n                '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n                'data': {'values': accuracyValues},\n                'mark': 'line',\n                'encoding': {\n                    'x': {'field': 'epoch', 'type': 'ordinal'},\n                    'y': {'field': 'accuracy', 'type': 'quantitative'},\n                    'color': {'field': 'set', 'type': 'nominal'}\n                },\n                'width': 500\n            },\n            {});\n    }\n\n    static plotLosses(lossValues, epoch, newTrainLoss, newValidationLoss) {\n        lossValues.push({epoch, 'loss': newTrainLoss, 'set': 'train'});\n        lossValues.push(\n            {epoch, 'loss': newValidationLoss, 'set': 'validation'});\n        embed(\n            '#lossCanvas', {\n                '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n                'data': {'values': lossValues},\n                'mark': 'line',\n                'encoding': {\n                    'x': {'field': 'epoch', 'type': 'ordinal'},\n                    'y': {'field': 'loss', 'type': 'quantitative'},\n                    'color': {'field': 'set', 'type': 'nominal'}\n                },\n                'width': 500\n            },\n            {});\n    }\n\n\n}\n","/* eslint-disable arrow-parens */\nimport _ from \"lodash\";\nimport {UI} from \"./vegaEmbedGraph\";\n\nconst tf = require('@tensorflow/tfjs');\nconst pokemon = require('./pokemon');\n\nconst POKEMON_DATA = pokemon.map(mapJsonToArray);\n\nconst POKEMON_TYPES = _.uniq(POKEMON_DATA.map(item => item[8]));\n\nfunction mapJsonToArray(p) {\n\n\n    const {Name, Type, Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def} = p;\n\n    const type = Type.split('\\n')[0];\n\n    return [\n        Name,\n        Total,\n        HP,\n        Attack,\n        Defense,\n        Sp_Def,\n        Sp_Atk,\n        Speed,\n        type,\n    ]\n\n\n}\n\nfunction getName(_row) {\n\n    const found = POKEMON_DATA.find(pokemon => {\n\n        return pokemon[1] == _row[0] && pokemon[2] == _row[1]\n    });\n\n    if (found) {\n        return found[0]\n    }\n    return 'n/a';\n}\n\n\nclass PokemonData {\n\n\n    constructor(testSplit = 0.1) {\n\n        this.pokemon = pokemon;\n        this.POKEMON_DATA = POKEMON_DATA;\n        this.POKEMON_TYPES = POKEMON_TYPES;\n\n        const [xTrain, yTrain, xTest, yTest] = this.getPokemon(testSplit);\n\n        this.xTrain = xTrain;\n        this.yTrain = yTrain;\n        this.xTest = xTest;\n        this.yTest = yTest;\n    }\n\n    getPokemon(testSplit) {\n\n\n        return tf.tidy(() => {\n            const dataByClass = [];\n            const targetsByClass = [];\n            for (let i = 0; i < POKEMON_TYPES.length; ++i) {\n                dataByClass.push([]);\n                targetsByClass.push([]);\n            }\n\n            // const {dataset} = utils.normalizeDataset(POKEMON_DATA.map(i => i.slice(1, -1)), true, [], []);\n\n\n            for (let i = 0; i < POKEMON_DATA.length; i++) {\n                const example = POKEMON_DATA[i];\n                const target = example[example.length - 1];\n                const data = POKEMON_DATA.map(i => i.slice(1, -1));\n                const idx = POKEMON_TYPES.findIndex(type => type === target);\n                dataByClass[idx].push(data[i]);\n                targetsByClass[idx].push(idx);\n            }\n\n            const xTrains = [];\n            const yTrains = [];\n            const xTests = [];\n            const yTests = [];\n\n\n            for (let i = 0; i < POKEMON_TYPES.length; ++i) {\n                const [xTrain, yTrain, xTest, yTest] =\n                    PokemonData.convertToTensors(dataByClass[i], targetsByClass[i], testSplit);\n                xTrains.push(xTrain);\n                yTrains.push(yTrain);\n                xTests.push(xTest);\n                yTests.push(yTest);\n            }\n\n            const concatAxis = 0;\n            return [\n                tf.concat(xTrains, concatAxis), tf.concat(yTrains, concatAxis),\n                tf.concat(xTests, concatAxis), tf.concat(yTests, concatAxis)\n            ];\n        });\n    }\n\n\n    /**\n     * Convert Iris data arrays to `tf.Tensor`s.\n     *\n     * @param data The Iris input feature data, an `Array` of `Array`s, each element\n     *   of which is assumed to be a length-4 `Array` (for petal length, petal\n     *   width, sepal length, sepal width).\n     * @param targets An `Array` of numbers, with values from the set {0, 1, 2}:\n     *   representing the true category of the Iris flower. Assumed to have the same\n     *   array length as `data`.\n     * @param testSplit Fraction of the data at the end to split as test data: a\n     *   number between 0 and 1.\n     * @return A length-4 `Array`, with\n     *   - training data as `tf.Tensor` of shape [numTrainExapmles, 4].\n     *   - training one-hot labels as a `tf.Tensor` of shape [numTrainExamples, 3]\n     *   - test data as `tf.Tensor` of shape [numTestExamples, 4].\n     *   - test one-hot labels as a `tf.Tensor` of shape [numTestExamples, 3]\n     */\n    static convertToTensors(data, targets, testSplit) {\n        const numExamples = data.length;\n        if (numExamples !== targets.length) {\n            throw new Error('data and split have different numbers of examples');\n        }\n\n        // Randomly shuffle `data` and `targets`.\n        const indices = [];\n        for (let i = 0; i < numExamples; ++i) {\n            indices.push(i);\n        }\n        tf.util.shuffle(indices);\n\n        const shuffledData = [];\n        const shuffledTargets = [];\n        for (let i = 0; i < numExamples; ++i) {\n            shuffledData.push(data[indices[i]]);\n            shuffledTargets.push(targets[indices[i]]);\n        }\n\n        // Split the data into a training set and a tet set, based on `testSplit`.\n        const numTestExamples = Math.round(numExamples * testSplit);\n        const numTrainExamples = numExamples - numTestExamples;\n\n        const xDims = shuffledData[0].length;\n\n        // Create a 2D `tf.Tensor` to hold the feature data.\n        const xs = tf.tensor2d(shuffledData, [numExamples, xDims]);\n\n        // Create a 1D `tf.Tensor` to hold the labels, and convert the number label\n        // from the set {0, 1, 2} into one-hot encoding (.e.g., 0 --> [1, 0, 0]).\n        const ys = tf.oneHot(tf.tensor1d(shuffledTargets).toInt(), POKEMON_TYPES.length);\n\n        // Split the data into training and test sets, using `slice`.\n        const xTrain = xs.slice([0, 0], [numTrainExamples, xDims]);\n        const xTest = xs.slice([numTrainExamples, 0], [numTestExamples, xDims]);\n        const yTrain = ys.slice([0, 0], [numTrainExamples, POKEMON_TYPES.length]);\n        const yTest = ys.slice([0, 0], [numTestExamples, POKEMON_TYPES.length]);\n        return [xTrain, yTrain, xTest, yTest];\n    }\n\n\n}\n\nconst MODEL_SAVE_PATH = 'indexeddb://pokemon-classify';\n\nclass SavablePokemonModel {\n\n    params = {\n        epochs: 50,\n        learningRate: 0.0005,\n    };\n    model;\n\n\n    constructor(model = null) {\n\n        this.generateData();\n\n        if (model instanceof tf.Model) {\n\n            this.model = model;\n        }\n\n    }\n\n    generateData() {\n\n        this.data = new PokemonData();\n    }\n\n    generateNewData() {\n\n        this.data.xTest.dispose();\n        this.data.yTest.dispose();\n        this.data.xTrain.dispose();\n        this.data.yTrain.dispose();\n        this.generateData();\n    }\n\n\n    createModel() {\n\n        const {xTrain, POKEMON_TYPES} = this.data;\n\n        let model;\n        model = tf.sequential();\n\n        const layers = [\n            {units: 256, activation: 'relu', inputShape: [xTrain.shape[1]]},\n            {units: 256, activation: 'relu'}\n\n        ];\n        layers.forEach(layer => model.add(tf.layers.dense(layer)));\n\n\n        model.add(tf.layers.dense({units: POKEMON_TYPES.length}));\n\n        this.model = model;\n\n    }\n\n    static async load() {\n\n\n        const models = await tf.io.listModels();\n        if (MODEL_SAVE_PATH in models) {\n\n            console.log('Loading existing model...')\n            const loadedModel = await tf.loadModel(MODEL_SAVE_PATH);\n\n            console.log(`Loaded model from ${MODEL_SAVE_PATH}`);\n            return new PokemonTypeModel(loadedModel);\n        } else {\n\n            throw new Error('Unable to locate model');\n        }\n\n    }\n\n    async save() {\n\n        return await this.model.save(MODEL_SAVE_PATH);\n\n    }\n\n    /**\n     * Remove the locally saved model from IndexedDB.\n     */\n    async removeModel() {\n        await tf.io.removeModel(MODEL_SAVE_PATH);\n        return new PokemonTypeModel();\n    }\n\n    async train(params) {\n\n        if (!this.model) {\n\n            this.createModel();\n        }\n\n        const {xTrain, yTrain, xTest, yTest} = this.data;\n        const optimizer = tf.train.adam(params.learningRate);\n        const lossValues = [];\n\n        const returnCost = true;\n        for (let i = 0; i < params.epochs; i++) {\n            const cost = optimizer.minimize(() => {\n                const predictions = this.model.predict(xTrain);\n                return tf.losses.softmaxCrossEntropy(\n                    yTrain.asType('float32'),\n                    predictions.asType('float32')\n                ).mean();\n            }, returnCost);\n\n            const trainLoss = tf.losses.softmaxCrossEntropy(\n                yTest.asType('float32'),\n                this.model.predict(xTest).asType('float32')\n            ).mean();\n\n            UI.plotLosses(lossValues, i, cost.dataSync(), trainLoss.dataSync());\n\n            await tf.nextFrame();\n        }\n\n        return this;\n\n\n    };\n\n\n}\n\n\nexport class PokemonTypeModel extends SavablePokemonModel {\n\n\n    renderEvaluateTable(xData, yTrue, yPred, logits) {\n\n        const rows = _.chunk(xData, 7);\n\n        const data = [];\n\n        for (let i = 0; i < rows.length; i++) {\n\n            const row = rows[i];\n\n            const name = getName(row);\n\n            const type = POKEMON_TYPES[yTrue[i]];\n\n            const pred = POKEMON_TYPES[yPred[i]];\n            const exampleLogits = logits.slice(i * POKEMON_TYPES.length, (i + 1) * POKEMON_TYPES.length);\n\n            const top5 = tf.topk(exampleLogits, 5);\n            const _data = top5.indices.dataSync();\n\n            const types = Array.from(_data).map(item => POKEMON_TYPES[item]);\n\n            const strings = types.join(', ');\n\n            const span = strings;\n\n            data.push({\n                name,\n                type,\n                pred,\n                span,\n                types,\n                _data,\n            })\n\n        }\n        return {\n            data,\n        }\n\n    }\n\n    evaluateModelOnTestData() {\n\n        const {xTest, yTest} = this.data;\n\n        return tf.tidy(() => {\n            const xData = xTest.dataSync();\n            const yTrue = yTest.argMax(-1).dataSync();\n            const predictOut = this.model.predict(xTest);\n            const yPred = predictOut.argMax(-1);\n\n            const logits = predictOut.dataSync();\n\n\n            const result = this.renderEvaluateTable(\n                xData, yTrue, yPred.dataSync(), logits);\n\n\n            const resultData = result.data.map(d => {\n\n                const foundP = this.data.pokemon.find(_d => _d.Name === d.name);\n\n                if (foundP) {\n\n                    return Object.assign({}, foundP, d);\n\n                }\n\n                return d;\n            });\n\n            return resultData;\n\n            // calculateAndDrawConfusionMatrix(model, xTest, yTest);\n        });\n\n\n    }\n\n    predict({Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def}) {\n\n        const _arr = [Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def];\n\n        const tensor = tf.tensor2d(_arr, [1, 7], 'float32');\n        const prediction = this.model.predict(tensor);\n        const top5 = tf.topk(prediction, 5);\n        const _data = top5.indices.dataSync();\n        const predictedTypes = Array.from(_data).map(item => POKEMON_TYPES[item]);\n        return predictedTypes;\n    }\n\n\n}\n\n\n\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Header(props) {\n    return (\n        <div>\n            <h1>Tensorflow.js Classification</h1>\n            <p>\n                Train a model to predict pokemon types from their stats.\n            </p>\n\n            <h3 className={'section-title'}>\n                Description\n            </h3>\n\n            <p>\n                This example showcases how to use Tensorflow.js to perform\n                simple classification.\n\n            </p>\n\n            <p>\n                Through training on test data, the model will learn to predict\n                pokemon types from their stats\n            </p>\n\n            <h3 className={'section-title'}>\n                Instructions\n            </h3>\n\n            <ul>\n                <li>\n                    Train new model by clicking train model (or load local model if saved)\n                </li>\n                <li>\n                    Once the model has finished training, it will predict the test data.\n                    You can click \"Test\" to generate new test data and predict\n\n                </li>\n            </ul>\n        </div>\n    );\n}\n\nHeader.propTypes = {};\nHeader.defaultProps = {};\n\nexport default Header;\n","import React from 'react';\n\nimport * as d3 from \"d3\";\nimport _ from 'lodash';\nimport './Tree.css';\n\n\nwindow.d3 = d3;\n\n\nconst data = {\n    name: \"dense_1\",\n    units: 256,\n    activation: \"relu\",\n    inputShape: 18,\n    children: [\n        {\n            name: 'dense_2',\n            units: 256,\n            activation: 'relu',\n            children: [{\n                name: 'dense_3',\n                units: 18,\n                activation: 'none',\n            }\n            ]\n        }\n    ],\n};\n\n\nvar margin = {top: 20, right: 20, bottom: 20, left: 20},\n    width = 400 - margin.right - margin.left,\n    height = 500 - margin.top - margin.bottom;\n\nclass Tree extends React.Component {\n\n\n    componentDidMount() {\n\n        const heirarchalData = d3.hierarchy(data);\n\n        const Tree = d3.tree()\n            .size([width, height]);\n\n        const tree = Tree(heirarchalData);\n\n        window.tree = tree;\n        const svg = d3.select('svg').append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n\n\n\n        const nodes = svg\n            .selectAll('g.node')\n            .data(tree.descendants())\n            .enter()\n            .append('g')\n            .classed('node', true)\n\n\n        // var tooltip = svg\n        //     .append(\"rect\")\n        //     .attr('width', 100)\n        //     .attr('height', 100)\n        //     .style('background', 'rgba(0, 0, 0, 0.8)')\n        //     .style('color', '#fff')\n        //     .style(\"position\", \"relative\")\n        //     .style(\"z-index\", \"10\")\n        //     .style(\"visibility\", \"hidden\")\n        //     .text(\"a simple tooltip\");\n\n\n        nodes\n            .append('circle')\n            .attr('cx', d => d.x)\n            .attr('cy', d => d.y)\n            .style('fill', '#696969')\n            .attr('z-index', 10)\n            .attr('r', 10)\n            // .on(\"mousemove\", function (event) {\n            //\n            //     console.log('e', event);\n            //     return tooltip.style(\"top\", (event.y - 10) + \"px\").style(\"left\", (event.x + 10) + \"px\");\n            // })\n            // .on(\"mouseout\", function () {\n            //     return tooltip.style(\"visibility\", \"hidden\");\n            // })\n            // .on(\"mouseover\", function () {\n            //     return tooltip.style(\"visibility\", \"visible\");\n            // })\n\n\n        nodes.append('text')\n            .attr('class', 'label')\n            .attr('dx', d => d.x + 50)\n            .attr('dy', d => d.y)\n            .text((d, i) => {\n\n                return `layer: ${i + 1} \\t units: ${d.data.units}`;\n            });\n\n        //The line SVG Path we draw\n        var lineGraph = svg.selectAll('.links')\n\n            .data(tree.links())\n            .enter()\n            .append('line')\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y + 10)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y - 10)\n            .attr(\"stroke\", \"blue\")\n            .attr(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\")\n            .style('stroke', '#5f5f5f')\n\n\n    }\n\n\n    render() {\n\n        return (\n            <svg width={width + margin.left + margin.right} height={height + margin.top + margin.bottom}>\n            </svg>\n        );\n    }\n}\n\nTree.propTypes = {};\nTree.defaultProps = {};\n\nexport default Tree;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tree from \"./Tree\";\n\n\nfunction About(props) {\n    return (\n        <div className={'container'}>\n            <h2>About</h2>\n\n            <div className={'row'}>\n                <div className={'row'}>\n                    <div>\n                        <div>\n                            Sequential model with 3 fully connected layers\n                            <ol>\n                                <li>\n                                    <b>\n                                        First Layer\n\n                                    </b>\n\n                                    <ul>\n                                        <li>\n                                            Input data: 18 units\n                                        </li>\n                                        <li>\n                                            Units: 256\n\n                                        </li>\n                                        <li>\n                                            Activation: Relu\n                                        </li>\n                                    </ul>\n\n                                </li>\n                                <li>\n\n                                    <b>\n                                        Second Layer\n                                    </b>\n                                    <ul>\n                                        <li>\n                                            Units: 256\n\n                                        </li>\n                                        <li>\n                                            Activation: Relu\n                                        </li>\n                                    </ul>\n\n                                </li>\n                                <li>\n\n                                    <b>\n                                        Third layer\n                                    </b>\n                                    <ul>\n                                        <li>\n                                            Units: 18\n                                            <small>\n                                                {' reduced to 18 pokemon types'}\n                                            </small>\n\n                                        </li>\n                                        <li>\n                                            Activation: none\n                                        </li>\n                                    </ul>\n                                </li>\n                            </ol>\n                        </div>\n                    </div>\n\n                    <Tree/>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nAbout.propTypes = {};\nAbout.defaultProps = {};\n\nexport default About;\n","import React from 'react';\n\nimport ReactTable from 'react-table'\nexport function Table({data}) {\n\n    const ex = {\n        id: 'friendName', // Required because our accessor is not a string\n        // Header: 'Friend Name',\n        // Cell: props => <span className='number'>{props.value}</span>, // Custom cell components!\n        // accessor: d => d.friend.name // Custom value accessors!\n    };\n\n    const columns = [\n\n        {\n            id: \"Name\",\n            Header: 'Name',\n            accessor: d => d.Name,\n            Cell: row => {\n\n                return (\n                    <span>\n                        <img\n                            className={'pr-2'}\n                            src={`https://img.pokemondb.net/artwork/${row.original.Name.toLowerCase()}.jpg`}\n                             width=\"36\" height=\"36\"\n                             alt=\"\"/>\n                        {row.original.Name}\n                    </span>\n                )\n            }\n        },\n        {\n            id: \"Type\",\n            Header: 'Type',\n            accessor: d => d.Type,\n        },\n        {\n            id: \"Total\",\n            Header: 'Total',\n            accessor: d => d.Total,\n        },\n        {\n            id: \"HP\",\n            Header: 'HP',\n            accessor: d => d.HP\n\n        },\n        {\n            id: 'Attack',\n            Header: 'Attack',\n            accessor: d => d.Attack\n        },\n        {\n            id: 'Defense',\n            Header: 'Defense',\n            accessor: d => d.Defense,\n        },\n        {\n            id: \"Speed\",\n            Header: 'Speed',\n            accessor: d => d.Speed,\n        },\n        {\n            id: 'Sp_Atk',\n            Header: 'Sp Atk',\n            accessor: d => d.Sp_Atk,\n        },\n        {\n            id: 'Sp_Def',\n            Header: 'Sp Def',\n            accessor: d => d.Sp_Def\n        }\n\n\n    ];\n\n    return <ReactTable\n        data={data}\n        defaultPageSize={10}\n        columns={columns}\n        className=\"-striped -highlight\"\n    />;\n}\n","import React, {Component} from 'react';\nimport './App.css';\nimport {sample} from \"lodash\";\nimport ResultTable from \"./ResultTable\";\nimport Predict from \"./Predict\";\nimport ModelStatus from \"./ModelStatus\";\nimport PredictionResults from \"./PredictionResults\";\n\n\nimport {PokemonTypeModel} from \"./pokemonModel\";\nimport Header from \"./Header\";\nimport {Link} from \"react-router-dom\";\nimport pokemonImg from \"./pokemon.jpg\";\nimport About from \"./About\";\nimport {Table} from \"./Table\";\nimport pokemon from \"./pokemon\";\n\nlet model;\n\nclass App extends Component {\n\n    constructor(props) {\n\n        super();\n        this.run = this.run.bind(this);\n        this.save = this.save.bind(this);\n        this.predictTestData = this.predictTestData.bind(this);\n        this.loadRandomPokemon = this.loadRandomPokemon.bind(this);\n        this.load = this.load.bind(this);\n        this.predict = this.predict.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n\n\n        model = new PokemonTypeModel();\n        const samplePokemon = sample(model.data.pokemon);\n        this.state = {\n            resultData: [],\n            training: false,\n            predictedTypes: [],\n            modelStatus: \"new\",\n            page: \"home\",\n            params: {\n                ...model.params,\n                ...samplePokemon\n            }\n\n        };\n\n    }\n\n\n    async removeModel() {\n\n        model = await model.removeModel();\n\n        this.setState({\n            ...this.state,\n            modelStatus: 'new_deleted'\n        });\n\n    }\n\n    async load() {\n\n        try {\n            model = await PokemonTypeModel.load();\n\n            this.setState({\n                ...this.state,\n                modelStatus: \"loaded\"\n            });\n\n        } catch (e) {\n\n            alert(e);\n        }\n    }\n\n\n    /**\n     * Run inference on manually-input Iris flower data.\n     *\n     * @param this.state.model The instance of `tf.Model` to run the inference with.\n     */\n\n    async run() {\n        model.createModel();\n        this.setState({\n            ...this.state,\n            training: true,\n            modelStatus: 'training',\n            resultData: []\n        }, async () => {\n            await model.train(this.state.params);\n            const resultData = model.evaluateModelOnTestData();\n            await model.save();\n            this.setState({\n                modelStatus: 'trained_saved',\n                ...this.state,\n                training: false,\n                resultData,\n            });\n        })\n    }\n\n\n    async predictTestData() {\n\n        model.generateNewData();\n        const resultData = model.evaluateModelOnTestData();\n\n        this.setState({\n            ...this.state,\n            resultData\n        })\n    }\n\n\n    async save() {\n\n        try {\n\n            await model.save();\n\n            this.setState({\n                ...this.state,\n                modelStatus: \"saved_loaded\"\n            });\n\n        } catch (e) {\n\n            window.alert(e);\n        }\n    }\n\n    handleChange({target: {value, name}}) {\n\n        this.setState({\n            ...this.state,\n            params: {\n                ...this.state.params,\n                [name]: value\n            }\n        });\n    }\n\n    loadRandomPokemon() {\n\n\n        const randPoke = sample(model.data.pokemon);\n\n        this.setState({\n            ...this.state,\n            predictedTypes: [],\n            params: {\n                ...this.state.params,\n                ...randPoke\n            }\n        })\n    }\n\n    predict() {\n\n        // fixme\n        if (this.state.modelStatus === \"newdkdkd\") {\n\n            window.alert('Load Model first');\n\n            return false;\n        }\n        const predictedTypes = model.predict(this.state.params);\n\n        this.setState({\n            ...this.state,\n            predictedTypes,\n        })\n\n    }\n\n    goTo(page = 'home') {\n\n        this.setState({\n\n            ...this.state,\n            page,\n        });\n    }\n\n\n    render() {\n\n        const {params, training, resultData, predictedTypes, modelStatus, page} = this.state;\n\n        const correctPredictions = resultData.filter(d => d.pred === d.type).length;\n        const top5Pred = resultData.filter(({types, type}) => types.includes(type)).length;\n        const predictions = resultData.length;\n\n        const correctPredictionsPercent = Math.floor((correctPredictions / predictions) * 100);\n        const top5PredictionsPercent = Math.floor((top5Pred / predictions) * 100);\n\n        const home = <div className={'container'}>\n            <Header/>\n\n            <div className={'row my-4'}>\n                <ModelStatus model={model} training={training} modelStatus={modelStatus}/>\n\n                <div className={'col float-right'}>\n                    <div className={'btn-group-sm'}>\n                        <button\n                            disabled={modelStatus === 'new' || training}\n                            type={'button'}\n                            onClick={() => this.removeModel()}\n                            className=\"btn btn-outline-danger\"\n                            id=\"delete-model\">\n                            delete model\n                        </button>\n                        <button\n                            disabled={modelStatus === 'new' || training}\n                            type={'button'}\n                            onClick={() => this.save()}\n                            className=\"btn btn-secondary\"\n                            id=\"save-model\">save model\n                        </button>\n                        <button\n                            disabled={training}\n                            type={'button'}\n                            onClick={() => this.load()}\n                            className=\"btn btn-secondary\"\n                            id=\"load-btn\">load model\n                        </button>\n                    </div>\n                </div>\n            </div>\n            <div className={'row'}>\n\n                <div className={'col-xs-6'}>\n                    <div className={'row'}>\n                        <form\n                            className={'col-xs-6 my-3 py-3'}\n                            onSubmit={(e) => {\n                                e.preventDefault();\n                                this.run();\n                            }}\n                        >\n                            <h3 className={'section-title'}>\n                                Training Parameters\n\n                            </h3>\n\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"train-epochs\">Train Epochs:</label>\n                                <input\n\n                                    onChange={e => this.setState({\n                                        ...this.state,\n                                        params: {...params, epochs: e.target.value}\n                                    })}\n                                    min={0}\n                                    step={1}\n                                    className=\"form-control-sm form-number\"\n                                    id=\"train-epochs\"\n                                    type=\"number\" value={params.epochs}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"learning-rate\">Learning Rate:</label>\n                                <input\n                                    onChange={e => this.setState({\n                                        ...this.state,\n                                        params: {...params, learningRate: e.target.value}\n                                    })}\n\n                                    width={200}\n                                    className=\"form-control-sm form-number\"\n                                    id=\"learning-rate\"\n                                    type=\"number\"\n                                    value={params.learningRate}\n                                    step={0.00001}\n                                    min={0}\n                                    max={1}\n                                />\n                            </div>\n\n                            <div className={'row my-3'}>\n                                <button type={'button'} className={'btn btn-outline-primary mr-2'}\n                                        onClick={() => {\n\n                                            this.predictTestData();\n                                        }}\n                                        disabled={training || modelStatus === 'new'}\n                                >\n                                    Test\n                                </button>\n                                <button\n                                    type={'submit'}\n                                    disabled={training}\n                                    className=\"btn btn-primary btn-lg\"\n                                    id=\"train-from-scratch\"\n                                >\n                                    Train\n                                </button>\n                            </div>\n\n\n                        </form>\n\n\n                    </div>\n\n                </div>\n                <div className={'col-xs-6'}>\n                    <div className=\"canvases\" id=\"lossCanvas\"></div>\n                    <div className=\"canvases\" id=\"accuracyCanvas\"></div>\n                </div>\n\n            </div>\n\n            <h3 className={'section-title'}>\n                Results\n\n            </h3>\n            {!isNaN(correctPredictions) && !isNaN(top5PredictionsPercent) && <div className={'row m-2'}>\n                <h5 className={'float-right'}>\n                    Correct\n                    <span className={'badge badge-secondary m-1 mono'}>\n                                {correctPredictionsPercent + '%'}\n                            </span>\n                    Top 5\n                    <span className={'badge badge-secondary m-1 mono'}>\n                                 {top5PredictionsPercent + '%'}\n                            </span>\n                </h5>\n            </div>\n            }\n            {0 < resultData.length && !training && <ResultTable\n                data={resultData}\n            />}\n\n            {!training && model.model && (\n                <div>\n                    <h3 className={'section-title'}>Predict Pokemon Type</h3>\n                    <div className={'row'}>\n                        <div className={'col m-1'}>\n                            <Predict\n                                predictTestData={this.predictTestData}\n                                modelLoaded={Boolean(model.model)}\n                                loadRandomPokemon={this.loadRandomPokemon}\n                                handleChange={this.handleChange} params={params}\n                                predict={this.predict}/>\n\n                        </div>\n                        <div className={'col m-1'}>\n                            <PredictionResults\n                                pokemonType={params.Type || \"none\"}\n                                predictions={predictedTypes}/>\n                        </div>\n                    </div>\n                </div>\n            )\n            }\n\n\n        </div>;\n\n        let activePage;\n\n        if (page === 'home') {\n            activePage = home;\n        } else if (page === 'about') {\n\n            activePage = <About/>;\n        } else if (page === 'data') {\n\n            activePage = <div className={'container-fluid'}>\n                <Table data={pokemon}/>\n            </div>;\n        }\n        return (\n            <div>\n                <nav className={'navbar'}>\n                    <a onClick={() => this.goTo('home')}>\n                        <h2 className={'navbar-brand'}>\n                            <img src={pokemonImg} alt={''} width={'50'} height={'auto'} className={'mr-2'}/>\n                            Pokemon Classification\n                        </h2>\n                    </a>\n                    <ul className={'navbar-nav'}>\n                        <a className=\"pointer\" onClick={() => this.goTo('home')}>\n                            <li>\n                                Home\n                            </li>\n                        </a>\n                        <a className=\"pointer\" onClick={() => this.goTo('about')}>\n                            <li>\n                                About\n                            </li>\n                        </a>\n                        <a className=\"pointer\" onClick={() => this.goTo('data')}>\n                            <li>\n                                Data\n                            </li>\n                        </a>\n                    </ul>\n                </nav>\n                {activePage}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'jquery/dist/jquery.min'\nimport 'popper.js/dist/popper.min'\nimport 'bootstrap/dist/js/bootstrap.min'\nimport AppRouter from \"./Router\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport App from \"./App\";\nwindow.tf = tf;\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","module.exports = __webpack_public_path__ + \"static/media/pokemon.a4f594f6.jpg\";"],"sourceRoot":""}