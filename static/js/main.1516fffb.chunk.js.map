{"version":3,"sources":["pokemon.jpg","serviceWorker.js","ResultTable.jsx","Predict.jsx","ModelStatus.jsx","PredictionResults.jsx","App.jsx","Table.jsx","Tree.jsx","About.jsx","Router.jsx","pokemonModel.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","ResultTable","_ref","data","columns","id","Header","accessor","d","Name","Cell","row","react_default","a","createElement","className","src","concat","original","toLowerCase","width","height","alt","type","pokemon","same","pred","top5","types","includes","arr","map","prediction","i","key","style","color","transition","correctPredictions","filter","length","top5Pred","_ref2","predictions","Math","floor","es","defaultPageSize","defaultProps","props","Predict","predict","handleChange","params","loadRandomPokemon","_ref$modelLoaded","modelLoaded","inputs_","property","htmlFor","value","onChange","Type","split","readOnly","onSubmit","e","preventDefault","console","log","onClick","disabled","ModelStatus","model","PredictionResults","_ref$predictions","pokemonType","samplePokemon","_","sample","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","resultData","training","objectSpread","predictedTypes","run","bind","assertThisInitialized","save","load","_model","setState","alert","_context","t0","createModel","asyncToGenerator","regenerator_default","mark","_callee2","wrap","_context2","prev","next","train","_this2","evaluateModelOnTestData","stop","_context4","_ref2$target","target","name","defineProperty","randPoke","_this3","_this$state","src_ModelStatus","epochs","min","step","learningRate","max","rows","toJSON","src_ResultTable","src_Predict","src_PredictionResults","Component","Table","Total","HP","Attack","Defense","Speed","Sp_Atk","Sp_Def","d3","units","activation","inputShape","children","margin","Tree","heirarchalData","tree","size","svg","append","attr","nodes","selectAll","descendants","enter","classed","x","y","text","links","source","React","About","src_Tree_0","Data","AppRouter","BrowserRouter","Link","to","pokemonImg","Switch","Route","path","component","tf","require","_uniq","pokemond","POKEMON_DATA","POKEMON_TYPES","item","getName","_row","found","find","PokemonData","testSplit","arguments","undefined","_this$getPokemon","getPokemon","_this$getPokemon2","slicedToArray","xTrain","yTrain","xTest","yTest","tidy","dataByClass","targetsByClass","push","_loop","example","slice","idx","findIndex","xTrains","yTrains","xTests","yTests","_this$convertToTensor","convertToTensors","_this$convertToTensor2","targets","numExamples","Error","indices","util","shuffle","shuffledData","shuffledTargets","numTestExamples","round","numTrainExamples","xDims","xs","tensor2d","ys","oneHot","tensor1d","toInt","UI","accuracyValues","epoch","newTrainAccuracy","newValidationAccuracy","accuracy","set","embed","$schema","values","encoding","field","lossValues","newTrainLoss","newValidationLoss","loss","PokemonTypeModel","_PokemonModel","inherits","createClass","xData","yTrue","yPred","logits","chunk","exampleLogits","_data","topk","dataSync","Array","from","span","join","_this4","_this$data3","argMax","predictOut","renderEvaluateTable","foundP","_d","assign","_arr","tensor","PokemonModel","_this$data","sequential","add","layers","dense","shape","loadModel","loadedModel","saveResults","optimizer","adam","returnCost","cost","minimize","losses","softmaxCrossEntropy","asType","mean","trainLoss","plotLosses","nextFrame","__webpack_exports__","src_model","ReactDOM","render","Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1516fffb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokemon.a4f594f6.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactTable from \"react-table\";\n\nfunction ResultTable({data}) {\n\n\n    const columns = [\n\n        {\n            id: \"Name\",\n            Header: 'Name',\n            accessor: d => d.Name,\n            Cell: row => {\n\n                return (\n                    <span>\n                        <img\n                            className={'pr-2'}\n                            src={`https://img.pokemondb.net/artwork/${row.original.Name.toLowerCase()}.jpg`}\n                            width=\"36\"\n                            height=\"36\"\n                            alt={row.original.Name}/>\n                        {row.original.Name}\n                    </span>\n                )\n            }\n        },\n        {\n            id: \"Type\",\n            Header: 'Type',\n            accessor: d => d.type,\n        },\n        // {\n        //     id: \"Total\",\n        //     Header: 'Total',\n        //     accessor: d => d.Total,\n        // },\n        // {\n        //     id: \"HP\",\n        //     Header: 'HP',\n        //     accessor: d => d.HP\n        //\n        // },\n        // {\n        //     id: 'Attack',\n        //     Header: 'Attack',\n        //     accessor: d => d.Attack\n        // },\n        // {\n        //     id: 'Defense',\n        //     Header: 'Defense',\n        //     accessor: d => d.Defense,\n        // },\n        // {\n        //     id: \"Speed\",\n        //     Header: 'Speed',\n        //     accessor: d => d.Speed,\n        // },\n        // {\n        //     id: 'Sp_Atk',\n        //     Header: 'Sp_Atk',\n        //     accessor: d => d.Sp_Atk,\n        // },\n        // {\n        //     id: 'Sp_Def',\n        //     Header: 'Sp_Def',\n        //     accessor: d => d.Sp_Def\n        // },\n        {\n            id: \"Prediction\",\n            Header: \"Top 5 Predictions\",\n            Cell: row => {\n\n                const pokemon = row.original;\n\n                const same = pokemon.pred === pokemon.type;\n                const top5 = pokemon.types.includes(pokemon.type);\n\n                const arr = pokemon.types.map((prediction, i) => {\n\n                    if (prediction === pokemon.type) {\n\n                        return <b className={'p-1'} key={prediction + i}>{prediction}</b>\n                    }\n                    return <span className={'p-1'} key={prediction + i}>{prediction}</span>\n                });\n\n                return (\n                    <span>\n            <span style={{\n                color: same ? '#57d500'\n                    : top5 ? '#ffbf00'\n                        : '#ff2e00',\n                transition: 'all .3s ease'\n            }}>\n              &#x25cf;\n            </span> {arr}\n          </span>\n                );\n            }\n        }\n    ];\n\n\n    const correctPredictions = data.filter(d => d.pred === d.type).length;\n    const top5Pred = data.filter(({types, type}) => types.includes(type)).length;\n    const predictions = data.length;\n    return (\n        <div>\n\n\n            <table className={'table table-condensed'}>\n                <thead>\n                <tr>\n                    <th className={'text-right'}>\n                        Correct\n                    </th>\n                    <th className={'text-right'}>\n                        top 5\n                    </th>\n                </tr>\n                </thead>\n                <tr>\n                    <td className={'mono text-right'}>\n                        {Math.floor((correctPredictions / predictions) * 100) + '%'}\n                    </td>\n                    <td className={'mono text-right'}>\n                        {Math.floor((top5Pred / predictions) * 100) + '%'}\n                    </td>\n                </tr>\n            </table>\n\n\n            <ReactTable\n                defaultPageSize={10}\n                className={'striped'}\n                columns={columns}\n                data={data}\n            />\n        </div>\n    );\n}\n\nResultTable.propTypes = {};\nResultTable.defaultProps = {};\n\nexport default ResultTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst props = ['Total', 'HP', 'Attack', 'Defense', 'Speed', 'Sp_Atk', 'Sp_Def'];\n\n\nfunction Predict({predict, handleChange, params, loadRandomPokemon, modelLoaded = false}) {\n\n    const inputs_ = props.map(property => {\n\n        return (\n            <div key={property}>\n                <label htmlFor={property}>{property}</label>\n                <input type={'number'} className={'form-control mono'} id={property}\n                       value={params[property]}\n                       onChange={handleChange}\n                />\n            </div>\n\n        )\n    });\n\n    const {Name, Type: _Type} = params;\n\n    const Type = _Type.split('\\n')[0];\n\n    let readOnly = [];\n    if (Name && Type) {\n\n        readOnly = ['Name', 'Type'].map((property, i) => {\n\n            const value = property === 'Type' ? Type : params[property];\n\n            return (\n                <div key={property}>\n                    <label htmlFor={property}>\n                        {property}\n                    </label>\n                    <input type={'text'}\n                           className={'form-control'}\n                           id={property}\n                           value={value}\n                           readOnly\n                    />\n                </div>\n            )\n\n        })\n    }\n\n    return (\n        <div>\n            <form onSubmit={e => {\n\n                e.preventDefault();\n                console.log('redi')\n                predict();\n            }}\n                  className={'form-inline'}\n\n            >\n                <h3>Predict Pokemon Type</h3>\n\n                {inputs_} <br/>\n                {readOnly}\n                <div className={'form-group'}>\n\n                    <button type={'button'} className={'btn btn-secondary'}\n                            onClick={loadRandomPokemon}\n                            disabled={!modelLoaded}\n                    >\n                        load random pokemon\n                    </button>\n                    <button\n                        disabled={!modelLoaded}\n                        type={'submit'} className={'btn btn-primary'}>\n                        {!modelLoaded ? \"load model\" : \"predict\"}\n                    </button>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nPredict.propTypes = {\n    predict: PropTypes.func.isRequired,\n    loadRandomPokemon: PropTypes.func.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    params: PropTypes.object.isRequired,\n    modelLoaded: PropTypes.bool.isRequired,\n};\nPredict.defaultProps = {};\n\nexport default Predict;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ModelStatus({model}) {\n    return (\n        <div>\n            <h4>\n                Model:\n                <span style={{\n                    color: model ? '#57d500' : '#ff2e00',\n                    transition: 'all .3s ease'\n                }}>\n                    &#x25cf;\n                </span>\n            </h4>\n\n\n        </div>\n    );\n}\n\nModelStatus.propTypes = {};\nModelStatus.defaultProps = {};\n\nexport default ModelStatus;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction PredictionResults({predictions = [], pokemonType}) {\n\n    if (!predictions.length) {\n\n        return null;\n    }\n    return (\n        <div\n        >\n            <h4>Predicted Types</h4>\n            <ol className={'list-group'}>\n                {predictions.map((prediction, i) => {\n\n                    return (\n                        <li key={prediction}\n                            className={pokemonType == prediction ? 'list-group-item active' : 'list-group-item'}\n                        >\n                            {prediction}\n                        </li>\n                    )\n                })}\n            </ol>\n        </div>\n    );\n}\n\nPredictionResults.propTypes = {\n    predictions: PropTypes.array.isRequired,\n    pokemonType: PropTypes.string.isRequired,\n};\nPredictionResults.defaultProps = {};\n\nexport default PredictionResults;\n","import React, {Component} from 'react';\nimport './App.css';\nimport _ from \"lodash\";\nimport ResultTable from \"./ResultTable\";\nimport Predict from \"./Predict\";\nimport ModelStatus from \"./ModelStatus\";\nimport PredictionResults from \"./PredictionResults\";\n\n\nimport {model} from './index';\n\nconst samplePokemon = _.sample(model.data.pokemon);\n\nclass App extends Component {\n\n    state = {\n        model: model,\n        resultData: [],\n        training: false,\n        params: {\n            ...model.params,\n            ...samplePokemon\n        },\n        data: model.data.pokemon,\n        predictedTypes: [],\n\n    };\n\n    constructor(props) {\n\n        super();\n        this.run = this.run.bind(this);\n        this.save = this.save.bind(this);\n        this.loadRandomPokemon = this.loadRandomPokemon.bind(this);\n        this.load = this.load.bind(this);\n        this.predict = this.predict.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    async load() {\n\n        try {\n            const _model = await model.load();\n            this.setState({\n                ...this.state,\n                model: {\n                    ...this.state.model,\n                    ...model,\n                    model: _model.model,\n                },\n            }, () => console.log('loaded'))\n        } catch (e) {\n\n            alert(e);\n        }\n    }\n\n\n    /**\n     * Run inference on manually-input Iris flower data.\n     *\n     * @param this.state.model The instance of `tf.Model` to run the inference with.\n     */\n\n    async run() {\n        model.createModel();\n        this.setState({\n            ...this.state,\n            model: {\n                ...this.state.model,\n                ...model,\n                model: model.model,\n            },\n            training: true,\n            resultData: []\n        }, async () => {\n            await model.train(this.state.params);\n            const resultData = model.evaluateModelOnTestData();\n            this.setState({\n                ...this.state,\n                training: false,\n                resultData,\n            });\n        })\n    }\n\n\n    async save() {\n\n        try {\n\n            return await model.save();\n        } catch (e) {\n\n            window.alert(e);\n        }\n    }\n\n    handleChange({target: {value, name}}) {\n\n        this.setState({\n            ...this.state,\n            params: {\n                ...this.state.params,\n                [name]: value\n            }\n        });\n    }\n\n    loadRandomPokemon() {\n\n\n        const randPoke = _.sample(model.data.pokemon);\n\n        this.setState({\n            ...this.state,\n            predictedTypes: [],\n            params: {\n                ...this.state.params,\n                ...randPoke\n            }\n        })\n    }\n\n    predict() {\n\n        if (!model.model) {\n\n            window.alert('Load Model first');\n\n            return false;\n        }\n        const predictedTypes = model.predict(this.state.params);\n\n        this.setState({\n            ...this.state,\n            predictedTypes,\n        })\n\n    }\n\n\n    render() {\n\n        const {params, training, resultData, model: {model}, predictedTypes} = this.state;\n\n        return (\n            <div>\n\n                <div className={'container-fluid'}>\n\n\n                    <div className={'row'}>\n\n                        <div className={'col-md-3'}>\n\n                            <div className={'row'}>\n                                <ModelStatus model={model}/>\n                            </div>\n\n                            <form\n                                className={'my-3 py-3'}\n                                onSubmit={(e) => {\n                                    e.preventDefault();\n                                    this.run();\n                                }}\n                            >\n                                <h5>\n                                    Model Parameters\n\n                                </h5>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"train-epochs\">Train Epochs:</label>\n                                    <input\n\n                                        onChange={e => this.setState({\n                                            ...this.state,\n                                            params: {...params, epochs: e.target.value}\n                                        })}\n                                        min={0}\n                                        step={1}\n                                        className=\"form-control\"\n                                        id=\"train-epochs\"\n                                        type=\"number\" value={params.epochs}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"learning-rate\">Learning Rate:</label>\n                                    <input\n                                        onChange={e => this.setState({\n                                            ...this.state,\n                                            params: {...params, learningRate: e.target.value}\n                                        })}\n\n                                        className=\"form-control\"\n                                        id=\"learning-rate\"\n                                        type=\"number\"\n                                        value={params.learningRate}\n                                        step={0.00001}\n                                        min={0}\n                                        max={1}\n                                    />\n                                </div>\n\n                                <div className={'form-group'}>\n                                    <button\n                                        type={'submit'}\n                                        disabled={training}\n                                        className=\"btn btn-primary\"\n                                        id=\"train-from-scratch\"\n                                    >\n                                        Train model\n                                    </button>\n                                </div>\n\n                                <div className={'form-group'}>\n                                    <div className={'btn-group-sm'}>\n                                        <button\n                                            disabled={!model || training}\n                                            type={'button'}\n                                            onClick={() => this.save()}\n                                            className=\"btn btn-secondary\"\n                                            id=\"save-model\">save model\n                                        </button>\n                                        <button\n                                            disabled={training}\n                                            type={'button'}\n                                            onClick={() => this.load()}\n                                            className=\"btn btn-secondary\"\n                                            id=\"load-btn\">load model\n                                        </button>\n                                    </div>\n                                </div>\n\n                            </form>\n\n                            {model && 'toJSON' in model && (\n                                <form>\n                                    <label>Model Info</label>\n                                    <textarea\n                                        readOnly={true}\n                                        rows={5} className={'form-control'}\n                                        value={model.toJSON()}\n                                    >\n\n            </textarea>\n                                </form>\n                            )}\n\n                        </div>\n\n                        <div className={'col-md-9'}>\n\n                            <div className={'row'}>\n\n                                <div className={'row p-3 m-3'}>\n                                    <div className=\"canvases\" id=\"lossCanvas\"></div>\n                                    <div className=\"canvases\" id=\"accuracyCanvas\"></div>\n                                </div>\n                                {0 < resultData.length && !training && <ResultTable\n                                    data={resultData}\n                                />}\n\n                                {!training && model && (\n                                    <div className={'row'}>\n                                        <div className={'col-sm-6'}>\n                                            <Predict\n                                                modelLoaded={Boolean(model)}\n                                                loadRandomPokemon={this.loadRandomPokemon}\n                                                handleChange={this.handleChange} params={params}\n                                                predict={this.predict}/>\n                                        </div>\n                                        <div className={'col-sm-6'}>\n                                            <PredictionResults\n                                                pokemonType={params.Type || \"none\"}\n                                                predictions={predictedTypes}/>\n                                        </div>\n                                    </div>\n                                )\n                                }\n\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\n\nimport ReactTable from 'react-table'\n\n\nexport function Table({data}) {\n\n    const ex = {\n        id: 'friendName', // Required because our accessor is not a string\n        // Header: 'Friend Name',\n        // Cell: props => <span className='number'>{props.value}</span>, // Custom cell components!\n        // accessor: d => d.friend.name // Custom value accessors!\n    };\n\n    const columns = [\n\n        {\n            id: \"Name\",\n            Header: 'Name',\n            accessor: d => d.Name,\n            Cell: row => {\n\n                return (\n                    <span>\n                        <img\n                            className={'pr-2'}\n                            src={`https://img.pokemondb.net/artwork/${row.original.Name.toLowerCase()}.jpg`}\n                             width=\"36\" height=\"36\"\n                             alt=\"\"/>\n                        {row.original.Name}\n                    </span>\n                )\n            }\n        },\n        {\n            id: \"Type\",\n            Header: 'Type',\n            accessor: d => d.Type,\n        },\n        {\n            id: \"Total\",\n            Header: 'Total',\n            accessor: d => d.Total,\n        },\n        {\n            id: \"HP\",\n            Header: 'HP',\n            accessor: d => d.HP\n\n        },\n        {\n            id: 'Attack',\n            Header: 'Attack',\n            accessor: d => d.Attack\n        },\n        {\n            id: 'Defense',\n            Header: 'Defense',\n            accessor: d => d.Defense,\n        },\n        {\n            id: \"Speed\",\n            Header: 'Speed',\n            accessor: d => d.Speed,\n        },\n        {\n            id: 'Sp_Atk',\n            Header: 'Sp Atk',\n            accessor: d => d.Sp_Atk,\n        },\n        {\n            id: 'Sp_Def',\n            Header: 'Sp Def',\n            accessor: d => d.Sp_Def\n        }\n\n\n    ];\n\n    return <ReactTable\n        data={data}\n        defaultPageSize={10}\n        columns={columns}\n        className=\"-striped -highlight\"\n    />;\n}\n","import React from 'react';\n\nimport * as d3 from \"d3\";\nimport _ from 'lodash';\nimport './Tree.css';\n\n\nwindow.d3 = d3;\n\n\nconst data = {\n    name: \"dense_1\",\n    units: 256,\n    activation: \"relu\",\n    inputShape: 18,\n    children: [\n        {\n            name: 'dense_2',\n            units: 256,\n            activation: 'relu',\n            children: [{\n                name: 'dense_3',\n                units: 18,\n                activation: 'none',\n            }\n            ]\n        }\n    ],\n};\n\n\nvar margin = {top: 20, right: 20, bottom: 20, left: 20},\n    width = 400 - margin.right - margin.left,\n    height = 500 - margin.top - margin.bottom;\n\nclass Tree extends React.Component {\n\n\n    componentDidMount() {\n\n        const heirarchalData = d3.hierarchy(data);\n\n        const Tree = d3.tree()\n            .size([width, height]);\n\n        const tree = Tree(heirarchalData);\n\n        window.tree = tree;\n        const svg = d3.select('svg').append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n\n\n\n        const nodes = svg\n            .selectAll('g.node')\n            .data(tree.descendants())\n            .enter()\n            .append('g')\n            .classed('node', true)\n\n\n        // var tooltip = svg\n        //     .append(\"rect\")\n        //     .attr('width', 100)\n        //     .attr('height', 100)\n        //     .style('background', 'rgba(0, 0, 0, 0.8)')\n        //     .style('color', '#fff')\n        //     .style(\"position\", \"relative\")\n        //     .style(\"z-index\", \"10\")\n        //     .style(\"visibility\", \"hidden\")\n        //     .text(\"a simple tooltip\");\n\n\n        nodes\n            .append('circle')\n            .attr('cx', d => d.x)\n            .attr('cy', d => d.y)\n            .style('fill', '#696969')\n            .attr('z-index', 10)\n            .attr('r', 10)\n            // .on(\"mousemove\", function (event) {\n            //\n            //     console.log('e', event);\n            //     return tooltip.style(\"top\", (event.y - 10) + \"px\").style(\"left\", (event.x + 10) + \"px\");\n            // })\n            // .on(\"mouseout\", function () {\n            //     return tooltip.style(\"visibility\", \"hidden\");\n            // })\n            // .on(\"mouseover\", function () {\n            //     return tooltip.style(\"visibility\", \"visible\");\n            // })\n\n\n        nodes.append('text')\n            .attr('class', 'label')\n            .attr('dx', d => d.x + 50)\n            .attr('dy', d => d.y)\n            .text((d, i) => {\n\n                return `layer: ${i + 1} \\t units: ${d.data.units}`;\n            });\n\n        //The line SVG Path we draw\n        var lineGraph = svg.selectAll('.links')\n\n            .data(tree.links())\n            .enter()\n            .append('line')\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y + 10)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y - 10)\n            .attr(\"stroke\", \"blue\")\n            .attr(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\")\n            .style('stroke', '#5f5f5f')\n\n\n    }\n\n\n    render() {\n\n        return (\n            <svg width={width + margin.left + margin.right} height={height + margin.top + margin.bottom}>\n            </svg>\n        );\n    }\n}\n\nTree.propTypes = {};\nTree.defaultProps = {};\n\nexport default Tree;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tree from \"./Tree\";\n\n\nfunction About(props) {\n    return (\n        <div className={'container'}>\n            <h2>About</h2>\n\n            <div className={'row'}>\n                <div className={'row'}>\n                    <div>\n                        <div>\n                            Sequential model with 3 fully connected layers\n                            <ol>\n                                <li>\n                                    <b>\n                                        First Layer\n\n                                    </b>\n\n                                    <ul>\n                                        <li>\n                                            Input data: 18 units\n                                        </li>\n                                        <li>\n                                            Units: 256\n\n                                        </li>\n                                        <li>\n                                            Activation: Relu\n                                        </li>\n                                    </ul>\n\n                                </li>\n                                <li>\n\n                                    <b>\n                                        Second Layer\n                                    </b>\n                                    <ul>\n                                        <li>\n                                            Units: 256\n\n                                        </li>\n                                        <li>\n                                            Activation: Relu\n                                        </li>\n                                    </ul>\n\n                                </li>\n                                <li>\n\n                                    <b>\n                                        Third layer\n                                    </b>\n                                    <ul>\n                                        <li>\n                                            Units: 18\n                                            <small>\n                                                {' reduced to 18 pokemon types'}\n                                            </small>\n\n                                        </li>\n                                        <li>\n                                            Activation: none\n                                        </li>\n                                    </ul>\n                                </li>\n                            </ol>\n                        </div>\n                    </div>\n\n                    <Tree/>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nAbout.propTypes = {};\nAbout.defaultProps = {};\n\nexport default About;\n","import React from \"react\";\nimport {BrowserRouter as Router, Route, Link, Switch} from \"react-router-dom\";\nimport App from \"./App\";\nimport pokemonImg from \"./pokemon.jpg\";\nimport pokemon from './pokemon'\nimport {Table} from \"./Table\";\nimport About from \"./About\";\n\n\nconst Data = () => {\n\n    return (\n        <div className={'container-fluid'}>\n            <Table data={pokemon}/>\n        </div>\n    )\n};\n\nconst AppRouter = () => (\n    <Router>\n        <div>\n            <nav className={'navbar'}>\n                <Link to={'/classify'}>\n                    <h2 className={'navbar-brand'}>\n                        <img src={pokemonImg} alt={''} width={'50'} height={'auto'} className={'mr-2'}/>\n                        Pokemon Classification\n                    </h2>\n                </Link>\n                <ul className={'navbar-nav'}>\n                    <li>\n                        <Link to={'/classify'}>\n                            Home\n                        </Link>\n                    </li>\n                    <li>\n                        <Link to=\"/about\">About</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/data\">Data</Link>\n                    </li>\n                </ul>\n            </nav>\n            <Switch>\n                <Route path=\"/about\" component={About}/>\n                <Route path=\"/data\" component={Data}/>\n                <Route path={'/classify'} component={App}/>\n                <Route component={App}/>\n            </Switch>\n        </div>\n    </Router>\n);\n\nexport default AppRouter;\n","/* eslint-disable arrow-parens */\nimport embed from \"vega-embed\";\nimport _ from \"lodash\";\n\nconst tf = require('@tensorflow/tfjs');\nconst _uniq = require('lodash.uniq');\nconst pokemond = require('./pokemon');\n\nconst POKEMON_DATA = pokemond.map(mapJsonToArray);\n\nconst POKEMON_TYPES = _uniq(POKEMON_DATA.map(item => item[8]));\n\nfunction mapJsonToArray(p) {\n\n\n    const {Name, Type, Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def} = p;\n\n    const type = Type.split('\\n')[0];\n\n    return [\n        Name,\n        Total,\n        HP,\n        Attack,\n        Defense,\n        Sp_Def,\n        Sp_Atk,\n        Speed,\n        type,\n    ]\n\n\n}\n\nfunction getName(_row) {\n\n    const found = POKEMON_DATA.find(pokemon => {\n\n        return pokemon[1] == _row[0] && pokemon[2] == _row[1]\n    });\n\n    if (found) {\n        return found[0]\n    }\n    return 'n/a';\n}\n\n\nclass PokemonData {\n\n\n    constructor(testSplit = 0.1) {\n\n        this.pokemon = pokemond;\n        this.POKEMON_DATA = POKEMON_DATA;\n        this.POKEMON_TYPES = POKEMON_TYPES;\n\n        const [xTrain, yTrain, xTest, yTest] = this.getPokemon(testSplit);\n\n        this.xTrain = xTrain;\n        this.yTrain = yTrain;\n        this.xTest = xTest;\n        this.yTest = yTest;\n    }\n\n    getPokemon(testSplit) {\n\n\n        return tf.tidy(() => {\n            const dataByClass = [];\n            const targetsByClass = [];\n            for (let i = 0; i < POKEMON_TYPES.length; ++i) {\n                dataByClass.push([]);\n                targetsByClass.push([]);\n            }\n\n            // const {dataset} = utils.normalizeDataset(POKEMON_DATA.map(i => i.slice(1, -1)), true, [], []);\n\n\n            for (let i = 0; i < POKEMON_DATA.length; i++) {\n                const example = POKEMON_DATA[i];\n                const target = example[example.length - 1];\n                const data = POKEMON_DATA.map(i => i.slice(1, -1));\n                const idx = POKEMON_TYPES.findIndex(type => type === target);\n                dataByClass[idx].push(data[i]);\n                targetsByClass[idx].push(idx);\n            }\n\n            const xTrains = [];\n            const yTrains = [];\n            const xTests = [];\n            const yTests = [];\n\n\n            for (let i = 0; i < POKEMON_TYPES.length; ++i) {\n                const [xTrain, yTrain, xTest, yTest] =\n                    this.convertToTensors(dataByClass[i], targetsByClass[i], testSplit);\n                xTrains.push(xTrain);\n                yTrains.push(yTrain);\n                xTests.push(xTest);\n                yTests.push(yTest);\n            }\n\n            const concatAxis = 0;\n            return [\n                tf.concat(xTrains, concatAxis), tf.concat(yTrains, concatAxis),\n                tf.concat(xTests, concatAxis), tf.concat(yTests, concatAxis)\n            ];\n        });\n    }\n\n\n    /**\n     * Convert Iris data arrays to `tf.Tensor`s.\n     *\n     * @param data The Iris input feature data, an `Array` of `Array`s, each element\n     *   of which is assumed to be a length-4 `Array` (for petal length, petal\n     *   width, sepal length, sepal width).\n     * @param targets An `Array` of numbers, with values from the set {0, 1, 2}:\n     *   representing the true category of the Iris flower. Assumed to have the same\n     *   array length as `data`.\n     * @param testSplit Fraction of the data at the end to split as test data: a\n     *   number between 0 and 1.\n     * @return A length-4 `Array`, with\n     *   - training data as `tf.Tensor` of shape [numTrainExapmles, 4].\n     *   - training one-hot labels as a `tf.Tensor` of shape [numTrainExamples, 3]\n     *   - test data as `tf.Tensor` of shape [numTestExamples, 4].\n     *   - test one-hot labels as a `tf.Tensor` of shape [numTestExamples, 3]\n     */\n    convertToTensors(data, targets, testSplit) {\n        const numExamples = data.length;\n        if (numExamples !== targets.length) {\n            throw new Error('data and split have different numbers of examples');\n        }\n\n        // Randomly shuffle `data` and `targets`.\n        const indices = [];\n        for (let i = 0; i < numExamples; ++i) {\n            indices.push(i);\n        }\n        tf.util.shuffle(indices);\n\n        const shuffledData = [];\n        const shuffledTargets = [];\n        for (let i = 0; i < numExamples; ++i) {\n            shuffledData.push(data[indices[i]]);\n            shuffledTargets.push(targets[indices[i]]);\n        }\n\n        // Split the data into a training set and a tet set, based on `testSplit`.\n        const numTestExamples = Math.round(numExamples * testSplit);\n        const numTrainExamples = numExamples - numTestExamples;\n\n        const xDims = shuffledData[0].length;\n\n        // Create a 2D `tf.Tensor` to hold the feature data.\n        const xs = tf.tensor2d(shuffledData, [numExamples, xDims]);\n\n        // Create a 1D `tf.Tensor` to hold the labels, and convert the number label\n        // from the set {0, 1, 2} into one-hot encoding (.e.g., 0 --> [1, 0, 0]).\n        const ys = tf.oneHot(tf.tensor1d(shuffledTargets).toInt(), POKEMON_TYPES.length);\n\n        // Split the data into training and test sets, using `slice`.\n        const xTrain = xs.slice([0, 0], [numTrainExamples, xDims]);\n        const xTest = xs.slice([numTrainExamples, 0], [numTestExamples, xDims]);\n        const yTrain = ys.slice([0, 0], [numTrainExamples, POKEMON_TYPES.length]);\n        const yTest = ys.slice([0, 0], [numTestExamples, POKEMON_TYPES.length]);\n        return [xTrain, yTrain, xTest, yTest];\n    }\n\n\n}\n\nclass UI {\n\n    /**\n     * Plot new accuracy values.\n     *\n     * @param lossValues An `Array` of data to append to.\n     * @param epoch Training epoch number.\n     * @param newTrainLoss The new training accuracy, as a single `Number`.\n     * @param newValidationLoss The new validation accuracy, as a single `Number`.\n     */\n    static plotAccuracies(\n        accuracyValues, epoch, newTrainAccuracy, newValidationAccuracy) {\n        accuracyValues.push(\n            {epoch, 'accuracy': newTrainAccuracy, 'set': 'train'});\n        accuracyValues.push(\n            {epoch, 'accuracy': newValidationAccuracy, 'set': 'validation'});\n        embed(\n            '#accuracyCanvas', {\n                '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n                'data': {'values': accuracyValues},\n                'mark': 'line',\n                'encoding': {\n                    'x': {'field': 'epoch', 'type': 'ordinal'},\n                    'y': {'field': 'accuracy', 'type': 'quantitative'},\n                    'color': {'field': 'set', 'type': 'nominal'}\n                },\n                'width': 500\n            },\n            {});\n    }\n\n    static plotLosses(lossValues, epoch, newTrainLoss, newValidationLoss) {\n        lossValues.push({epoch, 'loss': newTrainLoss, 'set': 'train'});\n        lossValues.push(\n            {epoch, 'loss': newValidationLoss, 'set': 'validation'});\n        embed(\n            '#lossCanvas', {\n                '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n                'data': {'values': lossValues},\n                'mark': 'line',\n                'encoding': {\n                    'x': {'field': 'epoch', 'type': 'ordinal'},\n                    'y': {'field': 'loss', 'type': 'quantitative'},\n                    'color': {'field': 'set', 'type': 'nominal'}\n                },\n                'width': 500\n            },\n            {});\n    }\n\n\n}\n\nclass PokemonModel {\n\n    params = {\n        epochs: 50,\n        learningRate: 0.0005,\n    };\n    model;\n\n\n    constructor() {\n\n        this.data = new PokemonData();\n\n    }\n\n\n    createModel() {\n\n        const {xTrain, POKEMON_TYPES} = this.data;\n        let model;\n        model = tf.sequential();\n\n        model.add(tf.layers.dense(\n            {units: 256, activation: 'relu', inputShape: [xTrain.shape[1]]}));\n\n        model.add(\n            tf.layers.dense(\n                {units: 256, activation: 'relu'}\n            )\n        );\n\n        model.add(tf.layers.dense({units: POKEMON_TYPES.length}));\n\n        this.model = model;\n\n    }\n\n    async load() {\n\n\n        const loadedModel = await tf.loadModel('indexeddb://my-model-1');\n        this.model = loadedModel;\n\n        return this;\n\n    }\n\n    async save() {\n\n        if (this.model == null) {\n\n            throw new Error('Invalid Request');\n        }\n        const saveResults = await this.model.save(`indexeddb://my-model-1`);\n\n        return saveResults;\n    }\n\n    async train(params) {\n\n        const {xTrain, yTrain, xTest, yTest} = this.data;\n        const optimizer = tf.train.adam(params.learningRate);\n        const lossValues = [];\n\n        const returnCost = true;\n        for (let i = 0; i < params.epochs; i++) {\n            const cost = optimizer.minimize(() => {\n                const predictions = this.model.predict(xTrain);\n                return tf.losses.softmaxCrossEntropy(\n                    yTrain.asType('float32'),\n                    predictions.asType('float32')\n                ).mean();\n            }, returnCost);\n\n            const trainLoss = tf.losses.softmaxCrossEntropy(\n                yTest.asType('float32'),\n                this.model.predict(xTest).asType('float32')\n            ).mean();\n\n            UI.plotLosses(lossValues, i, cost.dataSync(), trainLoss.dataSync());\n\n            await tf.nextFrame();\n        }\n\n        return this;\n\n\n    };\n\n\n}\n\n\nexport class PokemonTypeModel extends PokemonModel {\n\n\n    constructor() {\n\n        super();\n        this.createModel();\n    }\n\n    renderEvaluateTable(xData, yTrue, yPred, logits) {\n\n        const rows = _.chunk(xData, 7);\n\n        const data = [];\n\n        for (let i = 0; i < rows.length; i++) {\n\n            const row = rows[i];\n\n            const name = getName(row);\n\n            const type = POKEMON_TYPES[yTrue[i]];\n\n            const pred = POKEMON_TYPES[yPred[i]];\n            const exampleLogits = logits.slice(i * POKEMON_TYPES.length, (i + 1) * POKEMON_TYPES.length);\n\n            const top5 = tf.topk(exampleLogits, 5);\n            const _data = top5.indices.dataSync();\n\n            const types = Array.from(_data).map(item => POKEMON_TYPES[item]);\n\n            const strings = types.join(', ');\n\n            const span = strings;\n\n            data.push({\n                name,\n                type,\n                pred,\n                span,\n                types,\n                _data,\n            })\n\n        }\n        return {\n            data,\n        }\n\n    }\n\n    evaluateModelOnTestData() {\n\n        const {xTest, yTest} = this.data;\n\n        return tf.tidy(() => {\n            const xData = xTest.dataSync();\n            const yTrue = yTest.argMax(-1).dataSync();\n            const predictOut = this.model.predict(xTest);\n            const yPred = predictOut.argMax(-1);\n\n            const logits = predictOut.dataSync();\n\n\n            const result = this.renderEvaluateTable(\n                xData, yTrue, yPred.dataSync(), logits);\n\n\n            const resultData = result.data.map(d => {\n\n                const foundP = this.data.pokemon.find(_d => _d.Name === d.name);\n\n                if (foundP) {\n\n                    return Object.assign({}, foundP, d);\n\n                }\n\n                return d;\n            });\n\n            return resultData;\n\n            // calculateAndDrawConfusionMatrix(model, xTest, yTest);\n        });\n\n\n    }\n\n    predict({Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def}) {\n\n        const _arr = [Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def];\n\n        const tensor = tf.tensor2d(_arr, [1, 7], 'float32');\n        const prediction = this.model.predict(tensor);\n        const top5 = tf.topk(prediction, 5);\n        const _data = top5.indices.dataSync();\n        const predictedTypes = Array.from(_data).map(item => POKEMON_TYPES[item]);\n        return predictedTypes;\n    }\n\n\n}\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'jquery/dist/jquery.min'\nimport 'popper.js/dist/popper.min'\nimport 'bootstrap/dist/js/bootstrap.min'\nimport AppRouter from \"./Router\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport {PokemonTypeModel} from \"./pokemonModel\";\n\nwindow.tf = tf;\n\nexport const model = new PokemonTypeModel();\n\nReactDOM.render(<AppRouter/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}