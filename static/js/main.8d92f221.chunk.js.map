{"version":3,"sources":["pokemon.jpg","serviceWorker.js","ResultTable.jsx","Predict.jsx","ModelStatus.jsx","PredictionResults.jsx","vegaEmbedGraph.js","pokemonModel.js","App.jsx","Table.jsx","Tree.jsx","About.jsx","Router.jsx","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","ResultTable","_ref","data","columns","id","Header","accessor","d","Name","Cell","row","react_default","a","createElement","className","src","concat","original","toLowerCase","width","height","alt","type","pokemon","same","pred","top5","types","includes","arr","map","prediction","i","key","style","color","transition","correctPredictions","filter","length","top5Pred","_ref2","predictions","Math","floor","es","defaultPageSize","defaultProps","props","Predict","predict","handleChange","params","loadRandomPokemon","_ref$modelLoaded","modelLoaded","predictTestData","inputs_","property","htmlFor","name","value","onChange","Type","split","readOnly","onSubmit","e","preventDefault","hidden","onClick","disabled","setTimeout","ModelStatus","model","PredictionResults","_ref$predictions","pokemonType","UI","Object","classCallCheck","this","createClass","accuracyValues","epoch","newTrainAccuracy","newValidationAccuracy","push","accuracy","set","embed","$schema","values","mark","encoding","x","field","y","lossValues","newTrainLoss","newValidationLoss","loss","tf","require","POKEMON_DATA","Total","HP","Attack","Defense","Speed","Sp_Atk","Sp_Def","POKEMON_TYPES","_","uniq","item","getName","_row","found","find","PokemonData","testSplit","arguments","undefined","_this$getPokemon","getPokemon","_this$getPokemon2","slicedToArray","xTrain","yTrain","xTest","yTest","tidy","dataByClass","targetsByClass","_loop","example","target","slice","idx","findIndex","xTrains","yTrains","xTests","yTests","_PokemonData$convertT","convertToTensors","_PokemonData$convertT2","targets","numExamples","Error","indices","util","shuffle","shuffledData","shuffledTargets","numTestExamples","round","numTrainExamples","xDims","xs","tensor2d","ys","oneHot","tensor1d","toInt","PokemonTypeModel","_PokemonModel","possibleConstructorReturn","getPrototypeOf","call","inherits","xData","yTrue","yPred","logits","rows","chunk","exampleLogits","_data","topk","dataSync","Array","from","span","join","_this2","_this$data3","argMax","predictOut","renderEvaluateTable","foundP","_d","assign","_arr","tensor","PokemonModel","epochs","learningRate","_this$data","sequential","add","layers","dense","units","activation","inputShape","shape","loadModel","loadedModel","save","saveResults","createModel","optimizer","train","adam","returnCost","cost","minimize","_this","losses","softmaxCrossEntropy","asType","mean","trainLoss","plotLosses","nextFrame","App","run","bind","assertThisInitialized","load","samplePokemon","sample","state","resultData","training","predictedTypes","objectSpread","_model","setState","console","log","alert","_context","t0","asyncToGenerator","regenerator_default","_callee2","wrap","_context2","prev","next","evaluateModelOnTestData","stop","_context5","_ref2$target","defineProperty","randPoke","_this3","_this$state","src_ModelStatus","min","step","max","toJSON","src_ResultTable","src_Predict","src_PredictionResults","Component","Table","d3","children","margin","Tree","heirarchalData","tree","size","svg","append","attr","nodes","selectAll","descendants","enter","classed","text","links","source","React","About","src_Tree_0","Data","AppRouter","BrowserRouter","Link","to","pokemonImg","Switch","Route","path","component","ReactDOM","render","Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d92f221.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokemon.a4f594f6.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactTable from \"react-table\";\n\nfunction ResultTable({data}) {\n\n\n    const columns = [\n\n        {\n            id: \"Name\",\n            Header: 'Name',\n            accessor: d => d.Name,\n            Cell: row => {\n\n                return (\n                    <span>\n                        <img\n                            className={'pr-2'}\n                            src={`https://img.pokemondb.net/artwork/${row.original.Name.toLowerCase()}.jpg`}\n                            width=\"36\"\n                            height=\"36\"\n                            alt={row.original.Name}/>\n                        {row.original.Name}\n                    </span>\n                )\n            }\n        },\n        {\n            id: \"Type\",\n            Header: 'Type',\n            accessor: d => d.type,\n        },\n        // {\n        //     id: \"Total\",\n        //     Header: 'Total',\n        //     accessor: d => d.Total,\n        // },\n        // {\n        //     id: \"HP\",\n        //     Header: 'HP',\n        //     accessor: d => d.HP\n        //\n        // },\n        // {\n        //     id: 'Attack',\n        //     Header: 'Attack',\n        //     accessor: d => d.Attack\n        // },\n        // {\n        //     id: 'Defense',\n        //     Header: 'Defense',\n        //     accessor: d => d.Defense,\n        // },\n        // {\n        //     id: \"Speed\",\n        //     Header: 'Speed',\n        //     accessor: d => d.Speed,\n        // },\n        // {\n        //     id: 'Sp_Atk',\n        //     Header: 'Sp_Atk',\n        //     accessor: d => d.Sp_Atk,\n        // },\n        // {\n        //     id: 'Sp_Def',\n        //     Header: 'Sp_Def',\n        //     accessor: d => d.Sp_Def\n        // },\n        {\n            id: \"Prediction\",\n            Header: \"Top 5 Predictions\",\n            Cell: row => {\n\n                const pokemon = row.original;\n\n                const same = pokemon.pred === pokemon.type;\n                const top5 = pokemon.types.includes(pokemon.type);\n\n                const arr = pokemon.types.map((prediction, i) => {\n\n                    if (prediction === pokemon.type) {\n\n                        return <b className={'p-1'} key={prediction + i}>{prediction}</b>\n                    }\n                    return <span className={'p-1'} key={prediction + i}>{prediction}</span>\n                });\n\n                return (\n                    <span>\n            <span style={{\n                color: same ? '#57d500'\n                    : top5 ? '#ffbf00'\n                        : '#ff2e00',\n                transition: 'all .3s ease'\n            }}>\n              &#x25cf;\n            </span> {arr}\n          </span>\n                );\n            }\n        }\n    ];\n\n\n    const correctPredictions = data.filter(d => d.pred === d.type).length;\n    const top5Pred = data.filter(({types, type}) => types.includes(type)).length;\n    const predictions = data.length;\n    return (\n        <div>\n\n\n            <table className={'table table-condensed'}>\n                <thead>\n                <tr>\n                    <th className={'text-right'}>\n                        Correct\n                    </th>\n                    <th className={'text-right'}>\n                        top 5\n                    </th>\n                </tr>\n                </thead>\n                <tr>\n                    <td className={'mono text-right'}>\n                        {Math.floor((correctPredictions / predictions) * 100) + '%'}\n                    </td>\n                    <td className={'mono text-right'}>\n                        {Math.floor((top5Pred / predictions) * 100) + '%'}\n                    </td>\n                </tr>\n            </table>\n\n\n            <ReactTable\n                defaultPageSize={10}\n                className={'striped'}\n                columns={columns}\n                data={data}\n            />\n        </div>\n    );\n}\n\nResultTable.propTypes = {};\nResultTable.defaultProps = {};\n\nexport default ResultTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst props = ['Total', 'HP', 'Attack', 'Defense', 'Speed', 'Sp_Atk', 'Sp_Def'];\n\n\nfunction Predict({predict, handleChange, params, loadRandomPokemon, modelLoaded = false, predictTestData}) {\n\n    const inputs_ = props.map(property => {\n\n        return (\n            <div key={property}>\n                <label htmlFor={property}>{property}</label>\n                <input\n                    name={property}\n                    type={'number'}\n                    width={100}\n                    className={'form-control-sm mono'}\n                    id={property}\n                    value={params[property]}\n                    onChange={handleChange}\n                />\n            </div>\n\n        )\n    });\n\n    const {Name, Type: _Type} = params;\n\n    const Type = _Type.split('\\n')[0];\n\n    let readOnly = [];\n    if (Name && Type) {\n\n        readOnly = ['Name', 'Type'].map((property, i) => {\n\n            const value = property === 'Type' ? Type : params[property];\n\n            return (\n                <div key={property}>\n                    <label htmlFor={property}>\n                        {property}\n                    </label>\n                    <input type={'text'}\n                           className={'form-control-sm'}\n                           id={property}\n                           value={value}\n                           readOnly\n                           width={100}\n                    />\n                </div>\n            )\n\n        })\n    }\n\n    return (\n        <div>\n            <h3>Predict Pokemon Type</h3>\n            <form onSubmit={e => {\n\n                e.preventDefault();\n                predict();\n\n            }}\n                  className={'form-inline'}\n\n            >\n\n\n                {inputs_}\n\n                <input hidden type={'submit'}/>\n\n\n            </form>\n\n            <form onSubmit={e => {\n\n                e.preventDefault();\n                predict();\n\n            }}\n                  className={'form-inline'}\n\n            >\n\n\n                {readOnly}\n\n                <input hidden type={'submit'}/>\n\n\n            </form>\n\n            <div className={'row my-3 mx-1 btn-group'}>\n                <button type={'button'} className={'btn btn-secondary'}\n                        onClick={loadRandomPokemon}\n                        disabled={!modelLoaded}\n                >\n                    random\n                </button>\n                <button\n                    disabled={!modelLoaded}\n\n                    onClick={predict}\n                    className={'btn btn-secondary'}>\n                    {!modelLoaded ? \"load model\" : \"predict\"}\n                </button>\n\n\n            </div>\n            <div className={'btn-group'}>\n                <button type={'button'} className={'btn btn-primary'}\n                        onClick={() => {\n\n                            predictTestData();\n                        }}\n                        disabled={!modelLoaded}\n                >\n                    predict all test data\n                </button>\n                <button type={'button'} className={'btn btn-primary'}\n                        onClick={() => {\n                            loadRandomPokemon();\n\n                            setTimeout(predict, 100);\n                        }}\n                        disabled={!modelLoaded}\n                >\n                    random & predict\n                </button>\n\n            </div>\n        </div>\n    );\n}\n\nPredict.propTypes = {\n    predict: PropTypes.func.isRequired,\n    predictTestData: PropTypes.func.isRequired,\n    loadRandomPokemon: PropTypes.func.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    params: PropTypes.object.isRequired,\n    modelLoaded: PropTypes.bool.isRequired,\n};\nPredict.defaultProps = {};\n\nexport default Predict;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ModelStatus({model: {model}}) {\n    return (\n        <div>\n            <h4>\n                Model:\n                <span style={{\n                    color: model ? '#57d500' : '#ff2e00',\n                    transition: 'all .3s ease'\n                }}\n                className={'pl-2'}\n                >\n                    &#x25cf;\n                </span>\n            </h4>\n\n\n        </div>\n    );\n}\n\nModelStatus.propTypes = {};\nModelStatus.defaultProps = {};\n\nexport default ModelStatus;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction PredictionResults({predictions = [], pokemonType}) {\n\n    if (!predictions.length) {\n\n        return null;\n    }\n    return (\n        <div\n        >\n            <h4>Predicted Types</h4>\n            <ol className={'list-group'}>\n                {predictions.map((prediction, i) => {\n\n                    const type = pokemonType.split('\\n')[0];\n\n                    const same = type === prediction;\n\n                    return (\n                        <li key={prediction}\n                            className={same ? 'list-group-item active' : 'list-group-item'}\n                        >\n                            {prediction}\n                        </li>\n                    )\n                })}\n            </ol>\n        </div>\n    );\n}\n\nPredictionResults.propTypes = {\n    predictions: PropTypes.array.isRequired,\n    pokemonType: PropTypes.string.isRequired,\n};\nPredictionResults.defaultProps = {};\n\nexport default PredictionResults;\n","import embed from \"vega-embed\";\n\nexport class UI {\n\n    /**\n     * Plot new accuracy values.\n     *\n     * @param lossValues An `Array` of data to append to.\n     * @param epoch Training epoch number.\n     * @param newTrainLoss The new training accuracy, as a single `Number`.\n     * @param newValidationLoss The new validation accuracy, as a single `Number`.\n     */\n    static plotAccuracies(\n        accuracyValues, epoch, newTrainAccuracy, newValidationAccuracy) {\n        accuracyValues.push(\n            {epoch, 'accuracy': newTrainAccuracy, 'set': 'train'});\n        accuracyValues.push(\n            {epoch, 'accuracy': newValidationAccuracy, 'set': 'validation'});\n        embed(\n            '#accuracyCanvas', {\n                '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n                'data': {'values': accuracyValues},\n                'mark': 'line',\n                'encoding': {\n                    'x': {'field': 'epoch', 'type': 'ordinal'},\n                    'y': {'field': 'accuracy', 'type': 'quantitative'},\n                    'color': {'field': 'set', 'type': 'nominal'}\n                },\n                'width': 500\n            },\n            {});\n    }\n\n    static plotLosses(lossValues, epoch, newTrainLoss, newValidationLoss) {\n        lossValues.push({epoch, 'loss': newTrainLoss, 'set': 'train'});\n        lossValues.push(\n            {epoch, 'loss': newValidationLoss, 'set': 'validation'});\n        embed(\n            '#lossCanvas', {\n                '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n                'data': {'values': lossValues},\n                'mark': 'line',\n                'encoding': {\n                    'x': {'field': 'epoch', 'type': 'ordinal'},\n                    'y': {'field': 'loss', 'type': 'quantitative'},\n                    'color': {'field': 'set', 'type': 'nominal'}\n                },\n                'width': 500\n            },\n            {});\n    }\n\n\n}\n","/* eslint-disable arrow-parens */\nimport _ from \"lodash\";\nimport {UI} from \"./vegaEmbedGraph\";\n\nconst tf = require('@tensorflow/tfjs');\nconst pokemon = require('./pokemon');\n\nconst POKEMON_DATA = pokemon.map(mapJsonToArray);\n\nconst POKEMON_TYPES = _.uniq(POKEMON_DATA.map(item => item[8]));\n\nfunction mapJsonToArray(p) {\n\n\n    const {Name, Type, Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def} = p;\n\n    const type = Type.split('\\n')[0];\n\n    return [\n        Name,\n        Total,\n        HP,\n        Attack,\n        Defense,\n        Sp_Def,\n        Sp_Atk,\n        Speed,\n        type,\n    ]\n\n\n}\n\nfunction getName(_row) {\n\n    const found = POKEMON_DATA.find(pokemon => {\n\n        return pokemon[1] == _row[0] && pokemon[2] == _row[1]\n    });\n\n    if (found) {\n        return found[0]\n    }\n    return 'n/a';\n}\n\n\nclass PokemonData {\n\n\n    constructor(testSplit = 0.1) {\n\n        this.pokemon = pokemon;\n        this.POKEMON_DATA = POKEMON_DATA;\n        this.POKEMON_TYPES = POKEMON_TYPES;\n\n        const [xTrain, yTrain, xTest, yTest] = this.getPokemon(testSplit);\n\n        this.xTrain = xTrain;\n        this.yTrain = yTrain;\n        this.xTest = xTest;\n        this.yTest = yTest;\n    }\n\n    getPokemon(testSplit) {\n\n\n        return tf.tidy(() => {\n            const dataByClass = [];\n            const targetsByClass = [];\n            for (let i = 0; i < POKEMON_TYPES.length; ++i) {\n                dataByClass.push([]);\n                targetsByClass.push([]);\n            }\n\n            // const {dataset} = utils.normalizeDataset(POKEMON_DATA.map(i => i.slice(1, -1)), true, [], []);\n\n\n            for (let i = 0; i < POKEMON_DATA.length; i++) {\n                const example = POKEMON_DATA[i];\n                const target = example[example.length - 1];\n                const data = POKEMON_DATA.map(i => i.slice(1, -1));\n                const idx = POKEMON_TYPES.findIndex(type => type === target);\n                dataByClass[idx].push(data[i]);\n                targetsByClass[idx].push(idx);\n            }\n\n            const xTrains = [];\n            const yTrains = [];\n            const xTests = [];\n            const yTests = [];\n\n\n            for (let i = 0; i < POKEMON_TYPES.length; ++i) {\n                const [xTrain, yTrain, xTest, yTest] =\n                    PokemonData.convertToTensors(dataByClass[i], targetsByClass[i], testSplit);\n                xTrains.push(xTrain);\n                yTrains.push(yTrain);\n                xTests.push(xTest);\n                yTests.push(yTest);\n            }\n\n            const concatAxis = 0;\n            return [\n                tf.concat(xTrains, concatAxis), tf.concat(yTrains, concatAxis),\n                tf.concat(xTests, concatAxis), tf.concat(yTests, concatAxis)\n            ];\n        });\n    }\n\n\n    /**\n     * Convert Iris data arrays to `tf.Tensor`s.\n     *\n     * @param data The Iris input feature data, an `Array` of `Array`s, each element\n     *   of which is assumed to be a length-4 `Array` (for petal length, petal\n     *   width, sepal length, sepal width).\n     * @param targets An `Array` of numbers, with values from the set {0, 1, 2}:\n     *   representing the true category of the Iris flower. Assumed to have the same\n     *   array length as `data`.\n     * @param testSplit Fraction of the data at the end to split as test data: a\n     *   number between 0 and 1.\n     * @return A length-4 `Array`, with\n     *   - training data as `tf.Tensor` of shape [numTrainExapmles, 4].\n     *   - training one-hot labels as a `tf.Tensor` of shape [numTrainExamples, 3]\n     *   - test data as `tf.Tensor` of shape [numTestExamples, 4].\n     *   - test one-hot labels as a `tf.Tensor` of shape [numTestExamples, 3]\n     */\n    static convertToTensors(data, targets, testSplit) {\n        const numExamples = data.length;\n        if (numExamples !== targets.length) {\n            throw new Error('data and split have different numbers of examples');\n        }\n\n        // Randomly shuffle `data` and `targets`.\n        const indices = [];\n        for (let i = 0; i < numExamples; ++i) {\n            indices.push(i);\n        }\n        tf.util.shuffle(indices);\n\n        const shuffledData = [];\n        const shuffledTargets = [];\n        for (let i = 0; i < numExamples; ++i) {\n            shuffledData.push(data[indices[i]]);\n            shuffledTargets.push(targets[indices[i]]);\n        }\n\n        // Split the data into a training set and a tet set, based on `testSplit`.\n        const numTestExamples = Math.round(numExamples * testSplit);\n        const numTrainExamples = numExamples - numTestExamples;\n\n        const xDims = shuffledData[0].length;\n\n        // Create a 2D `tf.Tensor` to hold the feature data.\n        const xs = tf.tensor2d(shuffledData, [numExamples, xDims]);\n\n        // Create a 1D `tf.Tensor` to hold the labels, and convert the number label\n        // from the set {0, 1, 2} into one-hot encoding (.e.g., 0 --> [1, 0, 0]).\n        const ys = tf.oneHot(tf.tensor1d(shuffledTargets).toInt(), POKEMON_TYPES.length);\n\n        // Split the data into training and test sets, using `slice`.\n        const xTrain = xs.slice([0, 0], [numTrainExamples, xDims]);\n        const xTest = xs.slice([numTrainExamples, 0], [numTestExamples, xDims]);\n        const yTrain = ys.slice([0, 0], [numTrainExamples, POKEMON_TYPES.length]);\n        const yTest = ys.slice([0, 0], [numTestExamples, POKEMON_TYPES.length]);\n        return [xTrain, yTrain, xTest, yTest];\n    }\n\n\n}\n\nclass PokemonModel {\n\n    params = {\n        epochs: 50,\n        learningRate: 0.0005,\n    };\n    model;\n\n\n    constructor() {\n\n        this.data = new PokemonData();\n\n    }\n\n\n    createModel() {\n\n        const {xTrain, POKEMON_TYPES} = this.data;\n        let model;\n        model = tf.sequential();\n\n        model.add(tf.layers.dense(\n            {units: 256, activation: 'relu', inputShape: [xTrain.shape[1]]}));\n\n        model.add(\n            tf.layers.dense(\n                {units: 256, activation: 'relu'}\n            )\n        );\n\n        model.add(tf.layers.dense({units: POKEMON_TYPES.length}));\n\n        this.model = model;\n\n    }\n\n    async load() {\n\n\n        const loadedModel = await tf.loadModel('indexeddb://my-model-1');\n        this.model = loadedModel;\n\n        return this;\n\n    }\n\n    async save() {\n\n        if (this.model == null) {\n\n            throw new Error('Invalid Request');\n        }\n        const saveResults = await this.model.save(`indexeddb://my-model-1`);\n\n        return saveResults;\n    }\n\n    async train(params) {\n\n        if (!this.model) {\n\n            this.createModel();\n        }\n\n        const {xTrain, yTrain, xTest, yTest} = this.data;\n        const optimizer = tf.train.adam(params.learningRate);\n        const lossValues = [];\n\n        const returnCost = true;\n        for (let i = 0; i < params.epochs; i++) {\n            const cost = optimizer.minimize(() => {\n                const predictions = this.model.predict(xTrain);\n                return tf.losses.softmaxCrossEntropy(\n                    yTrain.asType('float32'),\n                    predictions.asType('float32')\n                ).mean();\n            }, returnCost);\n\n            const trainLoss = tf.losses.softmaxCrossEntropy(\n                yTest.asType('float32'),\n                this.model.predict(xTest).asType('float32')\n            ).mean();\n\n            UI.plotLosses(lossValues, i, cost.dataSync(), trainLoss.dataSync());\n\n            await tf.nextFrame();\n        }\n\n        return this;\n\n\n    };\n\n\n}\n\n\nexport class PokemonTypeModel extends PokemonModel {\n\n\n    constructor() {\n\n        super();\n    }\n\n    renderEvaluateTable(xData, yTrue, yPred, logits) {\n\n        const rows = _.chunk(xData, 7);\n\n        const data = [];\n\n        for (let i = 0; i < rows.length; i++) {\n\n            const row = rows[i];\n\n            const name = getName(row);\n\n            const type = POKEMON_TYPES[yTrue[i]];\n\n            const pred = POKEMON_TYPES[yPred[i]];\n            const exampleLogits = logits.slice(i * POKEMON_TYPES.length, (i + 1) * POKEMON_TYPES.length);\n\n            const top5 = tf.topk(exampleLogits, 5);\n            const _data = top5.indices.dataSync();\n\n            const types = Array.from(_data).map(item => POKEMON_TYPES[item]);\n\n            const strings = types.join(', ');\n\n            const span = strings;\n\n            data.push({\n                name,\n                type,\n                pred,\n                span,\n                types,\n                _data,\n            })\n\n        }\n        return {\n            data,\n        }\n\n    }\n\n    evaluateModelOnTestData() {\n\n        const {xTest, yTest} = this.data;\n\n        return tf.tidy(() => {\n            const xData = xTest.dataSync();\n            const yTrue = yTest.argMax(-1).dataSync();\n            const predictOut = this.model.predict(xTest);\n            const yPred = predictOut.argMax(-1);\n\n            const logits = predictOut.dataSync();\n\n\n            const result = this.renderEvaluateTable(\n                xData, yTrue, yPred.dataSync(), logits);\n\n\n            const resultData = result.data.map(d => {\n\n                const foundP = this.data.pokemon.find(_d => _d.Name === d.name);\n\n                if (foundP) {\n\n                    return Object.assign({}, foundP, d);\n\n                }\n\n                return d;\n            });\n\n            return resultData;\n\n            // calculateAndDrawConfusionMatrix(model, xTest, yTest);\n        });\n\n\n    }\n\n    predict({Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def}) {\n\n        const _arr = [Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def];\n\n        const tensor = tf.tensor2d(_arr, [1, 7], 'float32');\n        const prediction = this.model.predict(tensor);\n        const top5 = tf.topk(prediction, 5);\n        const _data = top5.indices.dataSync();\n        const predictedTypes = Array.from(_data).map(item => POKEMON_TYPES[item]);\n        return predictedTypes;\n    }\n\n\n}\n\n\n\n\n\n","import React, {Component} from 'react';\nimport './App.css';\nimport {sample} from \"lodash\";\nimport ResultTable from \"./ResultTable\";\nimport Predict from \"./Predict\";\nimport ModelStatus from \"./ModelStatus\";\nimport PredictionResults from \"./PredictionResults\";\n\n\nimport {PokemonTypeModel} from \"./pokemonModel\";\n\nlet model;\n\nclass App extends Component {\n\n    constructor(props) {\n\n        super();\n        this.run = this.run.bind(this);\n        this.save = this.save.bind(this);\n        this.predictTestData = this.predictTestData.bind(this);\n        this.loadRandomPokemon = this.loadRandomPokemon.bind(this);\n        this.load = this.load.bind(this);\n        this.predict = this.predict.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n\n\n        model = new PokemonTypeModel();\n\n        window.model = model;\n\n        const samplePokemon = sample(model.data.pokemon);\n        this.state = {\n\n            resultData: [],\n            training: false,\n            predictedTypes: [],\n            params: {\n                ...model.params,\n                ...samplePokemon\n            }\n\n        };\n\n    }\n\n    async load() {\n\n        try {\n            const _model = await model.load();\n            this.setState({\n                ...this.state,\n                model: {\n                    ...this.state.model,\n                    ...model,\n                    model: _model.model,\n                },\n            }, () => console.log('loaded'))\n        } catch (e) {\n\n            alert(e);\n        }\n    }\n\n\n    /**\n     * Run inference on manually-input Iris flower data.\n     *\n     * @param this.state.model The instance of `tf.Model` to run the inference with.\n     */\n\n    async run() {\n        model.createModel();\n        this.setState({\n            ...this.state,\n            training: true,\n            resultData: []\n        }, async () => {\n            await model.train(this.state.params);\n            const resultData = model.evaluateModelOnTestData();\n            this.setState({\n                ...this.state,\n                training: false,\n                resultData,\n            });\n        })\n    }\n\n\n    async predictTestData() {\n\n        const resultData = model.evaluateModelOnTestData();\n\n        this.setState({\n            ...this.state,\n            resultData\n        })\n    }\n\n\n    async save() {\n\n        try {\n\n            return await model.save();\n        } catch (e) {\n\n            window.alert(e);\n        }\n    }\n\n    handleChange({target: {value, name}}) {\n\n        this.setState({\n            ...this.state,\n            params: {\n                ...this.state.params,\n                [name]: value\n            }\n        });\n    }\n\n    loadRandomPokemon() {\n\n\n        const randPoke = sample(model.data.pokemon);\n\n        this.setState({\n            ...this.state,\n            predictedTypes: [],\n            params: {\n                ...this.state.params,\n                ...randPoke\n            }\n        })\n    }\n\n    predict() {\n\n        if (!model.model) {\n\n            window.alert('Load Model first');\n\n            return false;\n        }\n        const predictedTypes = model.predict(this.state.params);\n\n        this.setState({\n            ...this.state,\n            predictedTypes,\n        })\n\n    }\n\n\n    render() {\n\n        const {params, training, resultData, predictedTypes} = this.state;\n\n        return (\n            <div>\n\n                <div className={'container'}>\n                    <div className={'row'}>\n                        <div className={'col-md-3'}>\n                            <div className={'row'}>\n                                <ModelStatus model={model}/>\n                            </div>\n                            <form\n                                className={'my-3 py-3'}\n                                onSubmit={(e) => {\n                                    e.preventDefault();\n                                    this.run();\n                                }}\n                            >\n                                <h5>\n                                    Model Parameters\n\n                                </h5>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"train-epochs\">Train Epochs:</label>\n                                    <input\n\n                                        onChange={e => this.setState({\n                                            ...this.state,\n                                            params: {...params, epochs: e.target.value}\n                                        })}\n                                        min={0}\n                                        step={1}\n                                        className=\"form-control\"\n                                        id=\"train-epochs\"\n                                        type=\"number\" value={params.epochs}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"learning-rate\">Learning Rate:</label>\n                                    <input\n                                        onChange={e => this.setState({\n                                            ...this.state,\n                                            params: {...params, learningRate: e.target.value}\n                                        })}\n\n                                        className=\"form-control\"\n                                        id=\"learning-rate\"\n                                        type=\"number\"\n                                        value={params.learningRate}\n                                        step={0.00001}\n                                        min={0}\n                                        max={1}\n                                    />\n                                </div>\n\n                                <div className={'form-group'}>\n                                    <button\n                                        type={'submit'}\n                                        disabled={training}\n                                        className=\"btn btn-primary\"\n                                        id=\"train-from-scratch\"\n                                    >\n                                        Train model\n                                    </button>\n                                </div>\n\n                                <div className={'form-group'}>\n                                    <div className={'btn-group-sm'}>\n                                        <button\n                                            disabled={!model.model || training}\n                                            type={'button'}\n                                            onClick={() => this.save()}\n                                            className=\"btn btn-secondary\"\n                                            id=\"save-model\">save model\n                                        </button>\n                                        <button\n                                            disabled={training}\n                                            type={'button'}\n                                            onClick={() => this.load()}\n                                            className=\"btn btn-secondary\"\n                                            id=\"load-btn\">load model\n                                        </button>\n                                    </div>\n                                </div>\n\n                            </form>\n\n                            {model.model && 'toJSON' in model.model && (\n                                <form>\n                                    <label>Model Info</label>\n                                    <textarea\n                                        readOnly={true}\n                                        rows={5} className={'form-control'}\n                                        value={model.model.toJSON()}\n                                    >\n\n            </textarea>\n                                </form>\n                            )}\n\n                        </div>\n\n                        <div className={'col-md-9'}>\n\n                            <div className={'row'}>\n\n                                <div className={'row p-3 m-3'}>\n                                    <div className=\"canvases\" id=\"lossCanvas\"></div>\n                                    <div className=\"canvases\" id=\"accuracyCanvas\"></div>\n                                </div>\n                                {0 < resultData.length && !training && <ResultTable\n                                    data={resultData}\n                                />}\n\n                                {!training && (\n                                    <div className={'row'}>\n                                        <div className={'col-sm-6'}>\n                                            <Predict\n                                                predictTestData={this.predictTestData}\n                                                modelLoaded={Boolean(model.model)}\n                                                loadRandomPokemon={this.loadRandomPokemon}\n                                                handleChange={this.handleChange} params={params}\n                                                predict={this.predict}/>\n                                        </div>\n                                        <div className={'col-sm-6'}>\n                                            <PredictionResults\n                                                pokemonType={params.Type || \"none\"}\n                                                predictions={predictedTypes}/>\n                                        </div>\n                                    </div>\n                                )\n                                }\n\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\n\nimport ReactTable from 'react-table'\nexport function Table({data}) {\n\n    const ex = {\n        id: 'friendName', // Required because our accessor is not a string\n        // Header: 'Friend Name',\n        // Cell: props => <span className='number'>{props.value}</span>, // Custom cell components!\n        // accessor: d => d.friend.name // Custom value accessors!\n    };\n\n    const columns = [\n\n        {\n            id: \"Name\",\n            Header: 'Name',\n            accessor: d => d.Name,\n            Cell: row => {\n\n                return (\n                    <span>\n                        <img\n                            className={'pr-2'}\n                            src={`https://img.pokemondb.net/artwork/${row.original.Name.toLowerCase()}.jpg`}\n                             width=\"36\" height=\"36\"\n                             alt=\"\"/>\n                        {row.original.Name}\n                    </span>\n                )\n            }\n        },\n        {\n            id: \"Type\",\n            Header: 'Type',\n            accessor: d => d.Type,\n        },\n        {\n            id: \"Total\",\n            Header: 'Total',\n            accessor: d => d.Total,\n        },\n        {\n            id: \"HP\",\n            Header: 'HP',\n            accessor: d => d.HP\n\n        },\n        {\n            id: 'Attack',\n            Header: 'Attack',\n            accessor: d => d.Attack\n        },\n        {\n            id: 'Defense',\n            Header: 'Defense',\n            accessor: d => d.Defense,\n        },\n        {\n            id: \"Speed\",\n            Header: 'Speed',\n            accessor: d => d.Speed,\n        },\n        {\n            id: 'Sp_Atk',\n            Header: 'Sp Atk',\n            accessor: d => d.Sp_Atk,\n        },\n        {\n            id: 'Sp_Def',\n            Header: 'Sp Def',\n            accessor: d => d.Sp_Def\n        }\n\n\n    ];\n\n    return <ReactTable\n        data={data}\n        defaultPageSize={10}\n        columns={columns}\n        className=\"-striped -highlight\"\n    />;\n}\n","import React from 'react';\n\nimport * as d3 from \"d3\";\nimport _ from 'lodash';\nimport './Tree.css';\n\n\nwindow.d3 = d3;\n\n\nconst data = {\n    name: \"dense_1\",\n    units: 256,\n    activation: \"relu\",\n    inputShape: 18,\n    children: [\n        {\n            name: 'dense_2',\n            units: 256,\n            activation: 'relu',\n            children: [{\n                name: 'dense_3',\n                units: 18,\n                activation: 'none',\n            }\n            ]\n        }\n    ],\n};\n\n\nvar margin = {top: 20, right: 20, bottom: 20, left: 20},\n    width = 400 - margin.right - margin.left,\n    height = 500 - margin.top - margin.bottom;\n\nclass Tree extends React.Component {\n\n\n    componentDidMount() {\n\n        const heirarchalData = d3.hierarchy(data);\n\n        const Tree = d3.tree()\n            .size([width, height]);\n\n        const tree = Tree(heirarchalData);\n\n        window.tree = tree;\n        const svg = d3.select('svg').append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n\n\n\n        const nodes = svg\n            .selectAll('g.node')\n            .data(tree.descendants())\n            .enter()\n            .append('g')\n            .classed('node', true)\n\n\n        // var tooltip = svg\n        //     .append(\"rect\")\n        //     .attr('width', 100)\n        //     .attr('height', 100)\n        //     .style('background', 'rgba(0, 0, 0, 0.8)')\n        //     .style('color', '#fff')\n        //     .style(\"position\", \"relative\")\n        //     .style(\"z-index\", \"10\")\n        //     .style(\"visibility\", \"hidden\")\n        //     .text(\"a simple tooltip\");\n\n\n        nodes\n            .append('circle')\n            .attr('cx', d => d.x)\n            .attr('cy', d => d.y)\n            .style('fill', '#696969')\n            .attr('z-index', 10)\n            .attr('r', 10)\n            // .on(\"mousemove\", function (event) {\n            //\n            //     console.log('e', event);\n            //     return tooltip.style(\"top\", (event.y - 10) + \"px\").style(\"left\", (event.x + 10) + \"px\");\n            // })\n            // .on(\"mouseout\", function () {\n            //     return tooltip.style(\"visibility\", \"hidden\");\n            // })\n            // .on(\"mouseover\", function () {\n            //     return tooltip.style(\"visibility\", \"visible\");\n            // })\n\n\n        nodes.append('text')\n            .attr('class', 'label')\n            .attr('dx', d => d.x + 50)\n            .attr('dy', d => d.y)\n            .text((d, i) => {\n\n                return `layer: ${i + 1} \\t units: ${d.data.units}`;\n            });\n\n        //The line SVG Path we draw\n        var lineGraph = svg.selectAll('.links')\n\n            .data(tree.links())\n            .enter()\n            .append('line')\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y + 10)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y - 10)\n            .attr(\"stroke\", \"blue\")\n            .attr(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\")\n            .style('stroke', '#5f5f5f')\n\n\n    }\n\n\n    render() {\n\n        return (\n            <svg width={width + margin.left + margin.right} height={height + margin.top + margin.bottom}>\n            </svg>\n        );\n    }\n}\n\nTree.propTypes = {};\nTree.defaultProps = {};\n\nexport default Tree;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tree from \"./Tree\";\n\n\nfunction About(props) {\n    return (\n        <div className={'container'}>\n            <h2>About</h2>\n\n            <div className={'row'}>\n                <div className={'row'}>\n                    <div>\n                        <div>\n                            Sequential model with 3 fully connected layers\n                            <ol>\n                                <li>\n                                    <b>\n                                        First Layer\n\n                                    </b>\n\n                                    <ul>\n                                        <li>\n                                            Input data: 18 units\n                                        </li>\n                                        <li>\n                                            Units: 256\n\n                                        </li>\n                                        <li>\n                                            Activation: Relu\n                                        </li>\n                                    </ul>\n\n                                </li>\n                                <li>\n\n                                    <b>\n                                        Second Layer\n                                    </b>\n                                    <ul>\n                                        <li>\n                                            Units: 256\n\n                                        </li>\n                                        <li>\n                                            Activation: Relu\n                                        </li>\n                                    </ul>\n\n                                </li>\n                                <li>\n\n                                    <b>\n                                        Third layer\n                                    </b>\n                                    <ul>\n                                        <li>\n                                            Units: 18\n                                            <small>\n                                                {' reduced to 18 pokemon types'}\n                                            </small>\n\n                                        </li>\n                                        <li>\n                                            Activation: none\n                                        </li>\n                                    </ul>\n                                </li>\n                            </ol>\n                        </div>\n                    </div>\n\n                    <Tree/>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nAbout.propTypes = {};\nAbout.defaultProps = {};\n\nexport default About;\n","import React from \"react\";\nimport {BrowserRouter as Router, Route, Link, Switch} from \"react-router-dom\";\nimport App from \"./App\";\nimport pokemonImg from \"./pokemon.jpg\";\nimport pokemon from './pokemon'\nimport {Table} from \"./Table\";\nimport About from \"./About\";\n\n\nconst Data = () => {\n\n    return (\n        <div className={'container-fluid'}>\n            <Table data={pokemon}/>\n        </div>\n    )\n};\n\nconst AppRouter = () => (\n    <Router>\n        <div>\n            <nav className={'navbar'}>\n                <Link to={'/classify'}>\n                    <h2 className={'navbar-brand'}>\n                        <img src={pokemonImg} alt={''} width={'50'} height={'auto'} className={'mr-2'}/>\n                        Pokemon Classification\n                    </h2>\n                </Link>\n                <ul className={'navbar-nav'}>\n                    <li>\n                        <Link to={'/classify'}>\n                            Home\n                        </Link>\n                    </li>\n                    <li>\n                        <Link to=\"/about\">About</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/data\">Data</Link>\n                    </li>\n                </ul>\n            </nav>\n            <Switch>\n                <Route path=\"/about\" component={About}/>\n                <Route path=\"/data\" component={Data}/>\n                <Route path={'/classify'} component={App}/>\n                <Route component={App}/>\n            </Switch>\n        </div>\n    </Router>\n);\n\nexport default AppRouter;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'jquery/dist/jquery.min'\nimport 'popper.js/dist/popper.min'\nimport 'bootstrap/dist/js/bootstrap.min'\nimport AppRouter from \"./Router\";\nimport * as tf from \"@tensorflow/tfjs\";\nwindow.tf = tf;\n\nReactDOM.render(<AppRouter/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}