{"version":3,"sources":["pokemon.jpg","serviceWorker.js","tensorflow.model.js","ResultTable.jsx","App.jsx","Table.jsx","Tree.jsx","About.jsx","Router.jsx","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","tf","require","_uniq","POKEMON_DATA","map","Name","Type","Total","HP","Attack","Defense","Speed","Sp_Atk","Sp_Def","type","split","POKEMON_TYPES","item","createModel","xTrain","model","sequential","add","layers","dense","units","activation","inputShape","shape","length","plotLosses","lossValues","epoch","newTrainLoss","newValidationLoss","push","loss","set","embed","$schema","data","values","mark","encoding","x","field","y","color","width","getPokemon","testSplit","arguments","undefined","tidy","dataByClass","targetsByClass","i","_loop","example","target","slice","idx","findIndex","xTrains","yTrains","xTests","yTests","_convertToTensors","convertToTensors","_convertToTensors2","Object","slicedToArray","yTrain","xTest","yTest","concat","targets","numExamples","Error","indices","util","shuffle","shuffledData","shuffledTargets","numTestExamples","Math","round","numTrainExamples","xDims","xs","tensor2d","ys","oneHot","tensor1d","toInt","ResultTable","_ref","columns","id","Header","accessor","d","Cell","row","react_default","a","createElement","className","src","original","toLowerCase","height","alt","pokemon","same","pred","top5","types","includes","arr","prediction","key","style","transition","correctPredictions","filter","top5Pred","_ref2","predictions","floor","es","defaultPageSize","defaultProps","getName","_row","found","find","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","resultData","training","params","epochs","learningRate","run","bind","assertThisInitialized","save","load","train","trainModel","evaluateModelOnTestData","summary","setState","objectSpread","asyncToGenerator","regenerator_default","_callee2","wrap","_context2","prev","next","_this2","sent","stop","xData","yTrue","yPred","logits","rows","_","chunk","name","exampleLogits","_data","dataSync","Array","from","span","join","_this3","argMax","predictOut","predict","result","renderEvaluateTable","console","log","foundP","_d","assign","alert","error","_context4","t0","optimizer","adam","cost","minimize","softmaxCrossEntropy","asType","mean","trainLoss","loadedModel","_this4","onSubmit","e","preventDefault","disabled","onClick","htmlFor","onChange","value","min","step","max","src_ResultTable","accuracyValues","newTrainAccuracy","newValidationAccuracy","accuracy","Component","Table","d3","children","margin","Tree","heirarchalData","tree","size","svg","append","attr","nodes","selectAll","descendants","enter","classed","text","links","source","React","About","src_Tree_0","Data","AppRouter","BrowserRouter","Link","to","pokemonImg","Route","path","exact","component","ReactDOM","render","Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95d8303c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokemon.a4f594f6.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable arrow-parens */\nimport embed from \"vega-embed\";\n\nconst tf = require('@tensorflow/tfjs');\nconst _uniq = require('lodash.uniq');\nconst pokemond = require('./pokemon');\n\nexport const POKEMON_DATA = pokemond.map(mapJsonToArray);\n\nexport const POKEMON_TYPES = _uniq(POKEMON_DATA.map(item => item[8]));\n\nfunction mapJsonToArray(p) {\n\n\n    const {Name, Type, Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def} = p;\n\n    const type = Type.split('\\n')[0];\n\n    return [\n        Name,\n        Total,\n        HP,\n        Attack,\n        Defense,\n        Sp_Def,\n        Sp_Atk,\n        Speed,\n        type,\n    ]\n\n\n}\n\n\nexport function createModel(xTrain) {\n\n\n    let model;\n    model = tf.sequential();\n\n    model.add(tf.layers.dense(\n        {units: 256, activation: 'relu', inputShape: [xTrain.shape[1]]}));\n\n    model.add(\n        tf.layers.dense(\n            {units: 256, activation: 'relu'}\n        )\n    );\n\n    model.add(tf.layers.dense({units: POKEMON_TYPES.length}));\n\n    return model;\n\n\n}\n\n\n\nexport function plotLosses(lossValues, epoch, newTrainLoss, newValidationLoss) {\n    lossValues.push({epoch, 'loss': newTrainLoss, 'set': 'train'});\n    lossValues.push(\n        {epoch, 'loss': newValidationLoss, 'set': 'validation'});\n    embed(\n        '#lossCanvas', {\n            '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n            'data': {'values': lossValues},\n            'mark': 'line',\n            'encoding': {\n                'x': {'field': 'epoch', 'type': 'ordinal'},\n                'y': {'field': 'loss', 'type': 'quantitative'},\n                'color': {'field': 'set', 'type': 'nominal'}\n            },\n            'width': 500\n        },\n        {});\n}\n\n\nexport function getPokemon(testSplit = 0.2) {\n\n\n    return tf.tidy(() => {\n        const dataByClass = [];\n        const targetsByClass = [];\n        for (let i = 0; i < POKEMON_TYPES.length; ++i) {\n            dataByClass.push([]);\n            targetsByClass.push([]);\n        }\n\n        // const {dataset} = utils.normalizeDataset(POKEMON_DATA.map(i => i.slice(1, -1)), true, [], []);\n\n\n        for (let i = 0; i < POKEMON_DATA.length; i++) {\n            const example = POKEMON_DATA[i];\n            const target = example[example.length - 1];\n            const data = POKEMON_DATA.map(i => i.slice(1, -1));\n            const idx = POKEMON_TYPES.findIndex(type => type === target);\n            dataByClass[idx].push(data[i]);\n            targetsByClass[idx].push(idx);\n        }\n\n        const xTrains = [];\n        const yTrains = [];\n        const xTests = [];\n        const yTests = [];\n\n\n        for (let i = 0; i < POKEMON_TYPES.length; ++i) {\n            const [xTrain, yTrain, xTest, yTest] =\n                convertToTensors(dataByClass[i], targetsByClass[i], testSplit);\n            xTrains.push(xTrain);\n            yTrains.push(yTrain);\n            xTests.push(xTest);\n            yTests.push(yTest);\n        }\n\n        const concatAxis = 0;\n        return [\n            tf.concat(xTrains, concatAxis), tf.concat(yTrains, concatAxis),\n            tf.concat(xTests, concatAxis), tf.concat(yTests, concatAxis)\n        ];\n    });\n}\n\n/**\n * Convert Iris data arrays to `tf.Tensor`s.\n *\n * @param data The Iris input feature data, an `Array` of `Array`s, each element\n *   of which is assumed to be a length-4 `Array` (for petal length, petal\n *   width, sepal length, sepal width).\n * @param targets An `Array` of numbers, with values from the set {0, 1, 2}:\n *   representing the true category of the Iris flower. Assumed to have the same\n *   array length as `data`.\n * @param testSplit Fraction of the data at the end to split as test data: a\n *   number between 0 and 1.\n * @return A length-4 `Array`, with\n *   - training data as `tf.Tensor` of shape [numTrainExapmles, 4].\n *   - training one-hot labels as a `tf.Tensor` of shape [numTrainExamples, 3]\n *   - test data as `tf.Tensor` of shape [numTestExamples, 4].\n *   - test one-hot labels as a `tf.Tensor` of shape [numTestExamples, 3]\n */\nexport function convertToTensors(data, targets, testSplit) {\n    const numExamples = data.length;\n    if (numExamples !== targets.length) {\n        throw new Error('data and split have different numbers of examples');\n    }\n\n    // Randomly shuffle `data` and `targets`.\n    const indices = [];\n    for (let i = 0; i < numExamples; ++i) {\n        indices.push(i);\n    }\n    tf.util.shuffle(indices);\n\n    const shuffledData = [];\n    const shuffledTargets = [];\n    for (let i = 0; i < numExamples; ++i) {\n        shuffledData.push(data[indices[i]]);\n        shuffledTargets.push(targets[indices[i]]);\n    }\n\n    // Split the data into a training set and a tet set, based on `testSplit`.\n    const numTestExamples = Math.round(numExamples * testSplit);\n    const numTrainExamples = numExamples - numTestExamples;\n\n    const xDims = shuffledData[0].length;\n\n    // Create a 2D `tf.Tensor` to hold the feature data.\n    const xs = tf.tensor2d(shuffledData, [numExamples, xDims]);\n\n    // Create a 1D `tf.Tensor` to hold the labels, and convert the number label\n    // from the set {0, 1, 2} into one-hot encoding (.e.g., 0 --> [1, 0, 0]).\n    const ys = tf.oneHot(tf.tensor1d(shuffledTargets).toInt(), POKEMON_TYPES.length);\n\n    // Split the data into training and test sets, using `slice`.\n    const xTrain = xs.slice([0, 0], [numTrainExamples, xDims]);\n    const xTest = xs.slice([numTrainExamples, 0], [numTestExamples, xDims]);\n    const yTrain = ys.slice([0, 0], [numTrainExamples, POKEMON_TYPES.length]);\n    const yTest = ys.slice([0, 0], [numTestExamples, POKEMON_TYPES.length]);\n    return [xTrain, yTrain, xTest, yTest];\n}\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactTable from \"react-table\";\n\nfunction ResultTable({data}) {\n\n\n    const columns = [\n\n        {\n            id: \"Name\",\n            Header: 'Name',\n            accessor: d => d.Name,\n            Cell: row => {\n\n                return (\n                    <span>\n                        <img\n                            className={'pr-2'}\n                            src={`https://img.pokemondb.net/artwork/${row.original.Name.toLowerCase()}.jpg`}\n                            width=\"36\"\n                            height=\"36\"\n                            alt={row.original.Name}/>\n                        {row.original.Name}\n                    </span>\n                )\n            }\n        },\n        {\n            id: \"Type\",\n            Header: 'Type',\n            accessor: d => d.type,\n        },\n        // {\n        //     id: \"Total\",\n        //     Header: 'Total',\n        //     accessor: d => d.Total,\n        // },\n        // {\n        //     id: \"HP\",\n        //     Header: 'HP',\n        //     accessor: d => d.HP\n        //\n        // },\n        // {\n        //     id: 'Attack',\n        //     Header: 'Attack',\n        //     accessor: d => d.Attack\n        // },\n        // {\n        //     id: 'Defense',\n        //     Header: 'Defense',\n        //     accessor: d => d.Defense,\n        // },\n        // {\n        //     id: \"Speed\",\n        //     Header: 'Speed',\n        //     accessor: d => d.Speed,\n        // },\n        // {\n        //     id: 'Sp_Atk',\n        //     Header: 'Sp_Atk',\n        //     accessor: d => d.Sp_Atk,\n        // },\n        // {\n        //     id: 'Sp_Def',\n        //     Header: 'Sp_Def',\n        //     accessor: d => d.Sp_Def\n        // },\n        {\n            id: \"Prediction\",\n            Header: \"Top 5 Predictions\",\n            Cell: row => {\n\n                const pokemon = row.original;\n\n                const same = pokemon.pred === pokemon.type;\n                const top5 = pokemon.types.includes(pokemon.type);\n\n                const arr = pokemon.types.map((prediction, i) => {\n\n                    if (prediction === pokemon.type) {\n\n                        return <b className={'p-1'} key={prediction + i}>{prediction}</b>\n                    }\n                    return <span className={'p-1'} key={prediction + i}>{prediction}</span>\n                });\n\n                return (\n                    <span>\n            <span style={{\n                color: same ? '#57d500'\n                    : top5 ? '#ffbf00'\n                        : '#ff2e00',\n                transition: 'all .3s ease'\n            }}>\n              &#x25cf;\n            </span> {arr}\n          </span>\n                );\n            }\n        }\n    ];\n\n\n    const correctPredictions = data.filter(d => d.pred === d.type).length;\n    const top5Pred = data.filter(({types, type}) => types.includes(type)).length;\n    const predictions = data.length;\n    return (\n        <div>\n\n\n            <table className={'table table-condensed'}>\n                <thead>\n                <tr>\n                    <th className={'text-right'}>\n                        Correct\n                    </th>\n                    <th className={'text-right'}>\n                        top 5\n                    </th>\n                </tr>\n                </thead>\n                <tr>\n                    <td className={'mono text-right'}>\n                        {Math.floor((correctPredictions / predictions) * 100) + '%'}\n                    </td>\n                    <td className={'mono text-right'}>\n                        {Math.floor((top5Pred / predictions) * 100) + '%'}\n                    </td>\n                </tr>\n            </table>\n\n\n            <ReactTable\n                defaultPageSize={10}\n                className={'striped'}\n                columns={columns}\n                data={data}\n            />\n        </div>\n    );\n}\n\nResultTable.propTypes = {};\nResultTable.defaultProps = {};\n\nexport default ResultTable;\n","import React, {Component} from 'react';\nimport './App.css';\nimport * as tf from '@tensorflow/tfjs';\nimport {createModel, getPokemon, plotLosses, POKEMON_DATA, POKEMON_TYPES} from \"./tensorflow.model\";\nimport embed from \"vega-embed\";\nimport pokemon from './pokemon'\nimport _ from \"lodash\";\nimport ResultTable from \"./ResultTable\";\n\n\nexport function getName(_row) {\n\n    const found = POKEMON_DATA.find(pokemon => {\n\n        return pokemon[1] == _row[0] && pokemon[2] == _row[1]\n    });\n\n    if (found) {\n        return found[0]\n    }\n    return 'n/a';\n}\n\n\nclass App extends Component {\n\n    state = {\n        model: null,\n        resultData: [],\n        training: false,\n        params: {\n            epochs: 50,\n            learningRate: 0.0005,\n        },\n        data: pokemon,\n\n    };\n\n    constructor(props) {\n\n        super();\n        this.run = this.run.bind(this);\n        this.save = this.save.bind(this);\n        this.load = this.load.bind(this);\n        this.train = this.train.bind(this);\n        this.trainModel = this.trainModel.bind(this);\n        this.evaluateModelOnTestData = this.evaluateModelOnTestData.bind(this);\n    }\n\n    componentDidMount() {\n\n    }\n\n    /**\n     * Plot new accuracy values.\n     *\n     * @param lossValues An `Array` of data to append to.\n     * @param epoch Training epoch number.\n     * @param newTrainLoss The new training accuracy, as a single `Number`.\n     * @param newValidationLoss The new validation accuracy, as a single `Number`.\n     */\n    static plotAccuracies(\n        accuracyValues, epoch, newTrainAccuracy, newValidationAccuracy) {\n        accuracyValues.push(\n            {epoch, 'accuracy': newTrainAccuracy, 'set': 'train'});\n        accuracyValues.push(\n            {epoch, 'accuracy': newValidationAccuracy, 'set': 'validation'});\n        embed(\n            '#accuracyCanvas', {\n                '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n                'data': {'values': accuracyValues},\n                'mark': 'line',\n                'encoding': {\n                    'x': {'field': 'epoch', 'type': 'ordinal'},\n                    'y': {'field': 'accuracy', 'type': 'quantitative'},\n                    'color': {'field': 'set', 'type': 'nominal'}\n                },\n                'width': 500\n            },\n            {});\n    }\n\n\n\n\n    /**\n     * Train a `tf.Model` to recognize Iris flower type.\n     *\n     * @param xTrain Training feature data, a `tf.Tensor` of shape\n     *   [numTrainExamples, 4]. The second dimension include the features\n     *   petal length, petalwidth, sepal length and sepal width.\n     * @param yTrain One-hot training labels, a `tf.Tensor` of shape\n     *   [numTrainExamples, 3].\n     * @param xTest Test feature data, a `tf.Tensor` of shape [numTestExamples, 4].\n     * @param yTest One-hot test labels, a `tf.Tensor` of shape\n     *   [numTestExamples, 3].\n     * @returns The trained `tf.Model` instance.\n     */\n    async trainModel(xTrain, yTrain, xTest, yTest) {\n\n\n        let {model} = this.state;\n        if (!model) {\n\n            model = createModel(xTrain);\n\n        }\n        model.summary();\n        return await this.train(model, xTrain, yTrain, xTest, yTest);\n    }\n\n\n\n\n    /**\n     * Run inference on manually-input Iris flower data.\n     *\n     * @param this.state.model The instance of `tf.Model` to run the inference with.\n     */\n\n\n\n\n    async run() {\n\n\n        const [xTrain, yTrain, xTest, yTest] = getPokemon(0.1);\n\n        this.setState({\n            ...this.state,\n            training: true,\n        }, async () => {\n\n            const model = await this.trainModel(xTrain, yTrain, xTest, yTest);\n\n            const resultData = this.evaluateModelOnTestData(model, xTest, yTest);\n\n            this.setState({\n                ...this.state,\n                model,\n                training: false,\n                resultData,\n            });\n        })\n    }\n\n\n    renderEvaluateTable(xData, yTrue, yPred, logits) {\n\n        const rows = _.chunk(xData, 7);\n\n        const data = [];\n\n        for (let i = 0; i < rows.length; i++) {\n\n            const row = rows[i];\n\n            const name = getName(row);\n\n            const type = POKEMON_TYPES[yTrue[i]];\n\n            const pred = POKEMON_TYPES[yPred[i]];\n            const exampleLogits = logits.slice(i * POKEMON_TYPES.length, (i + 1) * POKEMON_TYPES.length);\n\n            const top5 = tf.topk(exampleLogits, 5);\n            const _data = top5.indices.dataSync();\n\n            const types = Array.from(_data).map(item => POKEMON_TYPES[item]);\n\n            const strings = types.join(', ');\n\n            const span = strings;\n\n            data.push({\n                name,\n                type,\n                pred,\n                span,\n                types,\n                _data,\n            })\n\n        }\n        return {\n            data,\n        }\n\n    }\n\n\n    evaluateModelOnTestData(model, xTest, yTest) {\n\n        return tf.tidy(() => {\n            const xData = xTest.dataSync();\n            const yTrue = yTest.argMax(-1).dataSync();\n            const predictOut = model.predict(xTest);\n            const yPred = predictOut.argMax(-1);\n\n            const logits = predictOut.dataSync();\n\n\n            const result = this.renderEvaluateTable(\n                xData, yTrue, yPred.dataSync(), logits);\n\n            console.log('result', result);\n\n            const resultData = result.data.map(d => {\n\n                const foundP = this.state.data.find(_d => _d.Name === d.name);\n\n                if (foundP) {\n\n                    return Object.assign({}, foundP, d);\n\n                }\n\n                return d;\n            });\n\n            return resultData;\n\n            // calculateAndDrawConfusionMatrix(model, xTest, yTest);\n        });\n\n\n        // await predictOnManualInput(model);\n    }\n\n\n    async save() {\n\n\n        try {\n\n            // localstorage\n\n            if (this.state.model == null) {\n\n                throw new Error('Invalid Request');\n            }\n            const saveResults = await this.state.model.save(`indexeddb://my-model-1`);\n\n            window.alert('saved');\n        } catch (e) {\n\n            console.error(e);\n\n            window.alert(\"Error Saving Model\")\n        }\n\n\n    }\n\n    async  train(model, xTrain, yTrain, xTest, yTest) {\n\n        const {params} = this.state;\n\n        const optimizer = tf.train.adam(params.learningRate);\n        const lossValues = [];\n\n\n        for (let i = 0; i < params.epochs; i++) {\n            const cost = optimizer.minimize(() => {\n                const predictions = model.predict(xTrain);\n                const loss = tf.losses.softmaxCrossEntropy(\n                    yTrain.asType('float32'),\n                    predictions.asType('float32')\n                ).mean();\n                return loss;\n            }, true);\n\n            const trainLoss = tf.losses.softmaxCrossEntropy(\n                yTest.asType('float32'),\n                model.predict(xTest).asType('float32')\n            ).mean();\n\n            plotLosses(lossValues, i, cost.dataSync(), trainLoss.dataSync());\n\n            await tf.nextFrame();\n        }\n\n        return model;\n\n\n    };\n\n\n    async load() {\n\n        try {\n\n\n            const loadedModel = await tf.loadModel('indexeddb://my-model-1');\n\n            this.setState({model: loadedModel}, () => {\n\n\n                window.alert('loaded');\n\n                console.log(loadedModel);\n            });\n\n        } catch (e) {\n\n            window.alert('Error loading model')\n        }\n    }\n\n\n    render() {\n        return (\n            <div className={'container-fluid'}>\n\n                <div className={'row'}>\n\n                    <div className={'col-md-3'}>\n\n                        <form\n                            className={'my-3 py-3'}\n                            onSubmit={(e) => {\n                                e.preventDefault();\n                                this.run();\n                            }}\n                        >\n                            <h5>\n                                Model Parameters\n\n                            </h5>\n                            <div className={'form-group'}>\n                                <div className={'btn-group-sm'}>\n                                    <button\n                                        disabled={this.state.training}\n                                        type={'button'} onClick={() => this.save()}\n                                        className=\"btn btn-secondary\"\n                                        id=\"save-model\">save model\n                                    </button>\n                                    <button\n                                        disabled={this.state.training}\n                                        type={'button'} onClick={() => this.load()}\n                                        className=\"btn btn-secondary\"\n                                        id=\"load-btn\">load model\n                                    </button>\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"train-epochs\">Train Epochs:</label>\n                                <input\n\n                                    onChange={e => this.setState({\n                                        ...this.state,\n                                        params: {...this.state.params, epochs: e.target.value}\n                                    })}\n                                    min={0}\n                                    step={1}\n                                    className=\"form-control\"\n                                    id=\"train-epochs\"\n                                    type=\"number\" value={this.state.params.epochs}\n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"learning-rate\">Learning Rate:</label>\n                                <input\n                                    onChange={e => this.setState({\n                                        ...this.state,\n                                        params: {...this.state.params, learningRate: e.target.value}\n                                    })}\n\n                                    className=\"form-control\"\n                                    id=\"learning-rate\"\n                                    type=\"number\"\n                                    value={this.state.params.learningRate}\n                                    step={0.00001}\n                                    min={0}\n                                    max={1}\n                                />\n                            </div>\n                            <button\n                                type={'submit'}\n                                disabled={this.state.training}\n                                className=\"btn btn-primary\"\n                                id=\"train-from-scratch\"\n                            >\n                                Train model\n                            </button>\n\n                        </form>\n\n                    </div>\n\n                    <div className={'col-md-9'}>\n\n                        <div className={'row p-3 m-3'}>\n                            <div className=\"canvases\" id=\"lossCanvas\"></div>\n                            <div className=\"canvases\" id=\"accuracyCanvas\"></div>\n                        </div>\n                        {0 < this.state.resultData.length && !this.state.training && <ResultTable\n                            data={this.state.resultData}\n                        />}\n\n\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\n\nimport ReactTable from 'react-table'\n\n\nexport function Table({data}) {\n\n    const ex = {\n        id: 'friendName', // Required because our accessor is not a string\n        // Header: 'Friend Name',\n        // Cell: props => <span className='number'>{props.value}</span>, // Custom cell components!\n        // accessor: d => d.friend.name // Custom value accessors!\n    };\n\n    const columns = [\n\n        {\n            id: \"Name\",\n            Header: 'Name',\n            accessor: d => d.Name,\n            Cell: row => {\n\n                return (\n                    <span>\n                        <img\n                            className={'pr-2'}\n                            src={`https://img.pokemondb.net/artwork/${row.original.Name.toLowerCase()}.jpg`}\n                             width=\"36\" height=\"36\"\n                             alt=\"\"/>\n                        {row.original.Name}\n                    </span>\n                )\n            }\n        },\n        {\n            id: \"Type\",\n            Header: 'Type',\n            accessor: d => d.Type,\n        },\n        {\n            id: \"Total\",\n            Header: 'Total',\n            accessor: d => d.Total,\n        },\n        {\n            id: \"HP\",\n            Header: 'HP',\n            accessor: d => d.HP\n\n        },\n        {\n            id: 'Attack',\n            Header: 'Attack',\n            accessor: d => d.Attack\n        },\n        {\n            id: 'Defense',\n            Header: 'Defense',\n            accessor: d => d.Defense,\n        },\n        {\n            id: \"Speed\",\n            Header: 'Speed',\n            accessor: d => d.Speed,\n        },\n        {\n            id: 'Sp_Atk',\n            Header: 'Sp Atk',\n            accessor: d => d.Sp_Atk,\n        },\n        {\n            id: 'Sp_Def',\n            Header: 'Sp Def',\n            accessor: d => d.Sp_Def\n        }\n\n\n    ];\n\n    return <ReactTable\n        data={data}\n        defaultPageSize={10}\n        columns={columns}\n        className=\"-striped -highlight\"\n    />;\n}\n","import React from 'react';\n\nimport * as d3 from \"d3\";\nimport _ from 'lodash';\nimport './Tree.css';\n\n\nwindow.d3 = d3;\n\n\nconst data = {\n    name: \"dense_1\",\n    units: 256,\n    activation: \"relu\",\n    inputShape: 18,\n    children: [\n        {\n            name: 'dense_2',\n            units: 256,\n            activation: 'relu',\n            children: [{\n                name: 'dense_3',\n                units: 18,\n                activation: 'none',\n            }\n            ]\n        }\n    ],\n};\n\n\nvar margin = {top: 20, right: 20, bottom: 20, left: 20},\n    width = 400 - margin.right - margin.left,\n    height = 500 - margin.top - margin.bottom;\n\nclass Tree extends React.Component {\n\n\n    componentDidMount() {\n\n        const heirarchalData = d3.hierarchy(data);\n\n        const Tree = d3.cluster()\n            .size([width, height]);\n\n        const tree = Tree(heirarchalData);\n\n        window.tree = tree;\n        const svg = d3.select('svg').append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n        const nodes = svg\n            .selectAll('g.node')\n            .data(tree.descendants())\n            .enter()\n            .append('g')\n            .classed('node', true);\n\n\n        nodes\n            .append('circle')\n            .attr('cx', d => d.x)\n            .attr('cy', d => d.y)\n            .style('fill', '#696969')\n            .attr('r', 10);\n\n\n        nodes.append('text')\n            .attr('class', 'label')\n            .attr('dx', d => d.x + 50)\n            .attr('dy', d => d.y)\n            .text((d, i) => {\n\n                return `layer: ${i + 1} \\t units: ${d.data.units}`;\n            });\n\n        //The line SVG Path we draw\n        var lineGraph = svg.selectAll('.links')\n\n            .data(tree.links())\n            .enter()\n            .append('line')\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y)\n            .attr(\"stroke\", \"blue\")\n            .attr(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\")\n            .style('stroke', '#5f5f5f')\n\n\n    }\n\n\n    render() {\n\n        return (\n            <svg width={width + margin.left + margin.right} height={height + margin.top + margin.bottom}>\n            </svg>\n        );\n    }\n}\n\nTree.propTypes = {};\nTree.defaultProps = {};\n\nexport default Tree;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tree from \"./Tree\";\n\n\nfunction About(props) {\n    return (\n        <div className={'container'}>\n            <h2>About</h2>\n\n            <div className={'row'}>\n                <div className={'row'}>\n                    <div>\n                        <p>\n                            Sequential model with 3 fully connected layers\n                            <ol>\n                                <li>\n                                    <b>\n                                        First Layer\n\n                                    </b>\n\n                                    <ul>\n                                        <li>\n                                            Input data: 18 units\n                                        </li>\n                                        <li>\n                                            Units: 256\n\n                                        </li>\n                                        <li>\n                                            Activation: Relu\n                                        </li>\n                                    </ul>\n\n                                </li>\n                                <li>\n\n                                    <b>\n                                        Second Layer\n                                    </b>\n                                    <ul>\n                                        <li>\n                                            Units: 256\n\n                                        </li>\n                                        <li>\n                                            Activation: Relu\n                                        </li>\n                                    </ul>\n\n                                </li>\n                                <li>\n\n                                    <b>\n                                        Third layer\n                                    </b>\n                                    <ul>\n                                        <li>\n                                            Units: 18\n                                            <small>\n                                                {' reduced to 18 pokemon types'}\n                                            </small>\n\n                                        </li>\n                                        <li>\n                                            Activation: none\n                                        </li>\n                                    </ul>\n                                </li>\n                            </ol>\n                        </p>\n                    </div>\n\n                    <Tree/>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nAbout.propTypes = {};\nAbout.defaultProps = {};\n\nexport default About;\n","import React from \"react\";\nimport {BrowserRouter as Router, Route, Link} from \"react-router-dom\";\nimport App from \"./App\";\nimport pokemonImg from \"./pokemon.jpg\";\nimport pokemon from './pokemon'\nimport {Table} from \"./Table\";\nimport About from \"./About\";\n\n\n\nconst Data = () => {\n\n    return (\n        <div className={'container-fluid'}>\n            <Table data={pokemon}/>\n        </div>\n    )\n};\n\nconst AppRouter = () => (\n    <Router>\n        <div>\n            <nav className={'navbar'}>\n                <ul className={'navbar-nav'}>\n                    <li>\n                        <Link to=\"/\">\n                            <h2>\n                                <img src={pokemonImg} alt={''} width={'50'} height={'auto'}/>\n                                Pokemon Classification</h2>\n                        </Link>\n                    </li>\n                    <li>\n                        <Link to=\"/about/\">About</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/data/\">Data</Link>\n                    </li>\n                </ul>\n            </nav>\n\n            <Route path=\"/\" exact component={App}/>\n            <Route path=\"/about/\" component={About}/>\n            <Route path=\"/data/\" component={Data}/>\n        </div>\n    </Router>\n);\n\nexport default AppRouter;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'jquery/dist/jquery.min'\nimport 'popper.js/dist/popper.min'\nimport 'bootstrap/dist/js/bootstrap.min'\nimport AppRouter from \"./Router\";\n\nReactDOM.render(<AppRouter/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}