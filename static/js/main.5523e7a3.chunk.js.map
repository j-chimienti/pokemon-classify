{"version":3,"sources":["pokemon.jpg","serviceWorker.js","ResultTable.jsx","Predict.jsx","ModelStatus.jsx","PredictionResults.jsx","App.jsx","Table.jsx","Tree.jsx","About.jsx","Router.jsx","vegaEmbedGraph.js","pokemonModel.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","ResultTable","_ref","data","columns","id","Header","accessor","d","Name","Cell","row","react_default","a","createElement","className","src","concat","original","toLowerCase","width","height","alt","type","pokemon","same","pred","top5","types","includes","arr","map","prediction","i","key","style","color","transition","correctPredictions","filter","length","top5Pred","_ref2","predictions","Math","floor","es","defaultPageSize","defaultProps","props","Predict","predict","handleChange","params","loadRandomPokemon","_ref$modelLoaded","modelLoaded","inputs_","property","htmlFor","name","value","onChange","Type","split","readOnly","onSubmit","e","preventDefault","hidden","onClick","disabled","setTimeout","ModelStatus","model","PredictionResults","_ref$predictions","pokemonType","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","run","bind","assertThisInitialized","save","load","samplePokemon","sample","state","resultData","training","objectSpread","predictedTypes","_model","setState","console","log","alert","_context","t0","createModel","asyncToGenerator","regenerator_default","mark","_callee2","wrap","_context2","prev","next","train","_this2","evaluateModelOnTestData","stop","_context4","_ref2$target","target","defineProperty","randPoke","_this3","_this$state","src_ModelStatus","epochs","min","step","learningRate","max","rows","toJSON","src_ResultTable","src_Predict","src_PredictionResults","Component","Table","Total","HP","Attack","Defense","Speed","Sp_Atk","Sp_Def","d3","units","activation","inputShape","children","margin","Tree","heirarchalData","tree","size","svg","append","attr","nodes","selectAll","descendants","enter","classed","x","y","text","links","source","React","About","src_Tree_0","Data","AppRouter","BrowserRouter","Link","to","pokemonImg","Switch","Route","path","component","UI","createClass","accuracyValues","epoch","newTrainAccuracy","newValidationAccuracy","push","accuracy","set","embed","$schema","values","encoding","field","lossValues","newTrainLoss","newValidationLoss","loss","tf","require","POKEMON_DATA","POKEMON_TYPES","_","uniq","item","getName","_row","found","find","PokemonData","testSplit","arguments","undefined","_this$getPokemon","getPokemon","_this$getPokemon2","slicedToArray","xTrain","yTrain","xTest","yTest","tidy","dataByClass","targetsByClass","_loop","example","slice","idx","findIndex","xTrains","yTrains","xTests","yTests","_PokemonData$convertT","convertToTensors","_PokemonData$convertT2","targets","numExamples","Error","indices","util","shuffle","shuffledData","shuffledTargets","numTestExamples","round","numTrainExamples","xDims","xs","tensor2d","ys","oneHot","tensor1d","toInt","PokemonTypeModel","_PokemonModel","get","prototype","inherits","xData","yTrue","yPred","logits","chunk","exampleLogits","_data","topk","dataSync","Array","from","span","join","_this$data3","argMax","predictOut","renderEvaluateTable","foundP","_d","assign","_arr","tensor","PokemonModel","_this$data","sequential","add","layers","dense","shape","loadModel","loadedModel","saveResults","optimizer","adam","returnCost","cost","minimize","losses","softmaxCrossEntropy","asType","mean","trainLoss","plotLosses","nextFrame","__webpack_exports__","src_model","ReactDOM","render","Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5523e7a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokemon.a4f594f6.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactTable from \"react-table\";\n\nfunction ResultTable({data}) {\n\n\n    const columns = [\n\n        {\n            id: \"Name\",\n            Header: 'Name',\n            accessor: d => d.Name,\n            Cell: row => {\n\n                return (\n                    <span>\n                        <img\n                            className={'pr-2'}\n                            src={`https://img.pokemondb.net/artwork/${row.original.Name.toLowerCase()}.jpg`}\n                            width=\"36\"\n                            height=\"36\"\n                            alt={row.original.Name}/>\n                        {row.original.Name}\n                    </span>\n                )\n            }\n        },\n        {\n            id: \"Type\",\n            Header: 'Type',\n            accessor: d => d.type,\n        },\n        // {\n        //     id: \"Total\",\n        //     Header: 'Total',\n        //     accessor: d => d.Total,\n        // },\n        // {\n        //     id: \"HP\",\n        //     Header: 'HP',\n        //     accessor: d => d.HP\n        //\n        // },\n        // {\n        //     id: 'Attack',\n        //     Header: 'Attack',\n        //     accessor: d => d.Attack\n        // },\n        // {\n        //     id: 'Defense',\n        //     Header: 'Defense',\n        //     accessor: d => d.Defense,\n        // },\n        // {\n        //     id: \"Speed\",\n        //     Header: 'Speed',\n        //     accessor: d => d.Speed,\n        // },\n        // {\n        //     id: 'Sp_Atk',\n        //     Header: 'Sp_Atk',\n        //     accessor: d => d.Sp_Atk,\n        // },\n        // {\n        //     id: 'Sp_Def',\n        //     Header: 'Sp_Def',\n        //     accessor: d => d.Sp_Def\n        // },\n        {\n            id: \"Prediction\",\n            Header: \"Top 5 Predictions\",\n            Cell: row => {\n\n                const pokemon = row.original;\n\n                const same = pokemon.pred === pokemon.type;\n                const top5 = pokemon.types.includes(pokemon.type);\n\n                const arr = pokemon.types.map((prediction, i) => {\n\n                    if (prediction === pokemon.type) {\n\n                        return <b className={'p-1'} key={prediction + i}>{prediction}</b>\n                    }\n                    return <span className={'p-1'} key={prediction + i}>{prediction}</span>\n                });\n\n                return (\n                    <span>\n            <span style={{\n                color: same ? '#57d500'\n                    : top5 ? '#ffbf00'\n                        : '#ff2e00',\n                transition: 'all .3s ease'\n            }}>\n              &#x25cf;\n            </span> {arr}\n          </span>\n                );\n            }\n        }\n    ];\n\n\n    const correctPredictions = data.filter(d => d.pred === d.type).length;\n    const top5Pred = data.filter(({types, type}) => types.includes(type)).length;\n    const predictions = data.length;\n    return (\n        <div>\n\n\n            <table className={'table table-condensed'}>\n                <thead>\n                <tr>\n                    <th className={'text-right'}>\n                        Correct\n                    </th>\n                    <th className={'text-right'}>\n                        top 5\n                    </th>\n                </tr>\n                </thead>\n                <tr>\n                    <td className={'mono text-right'}>\n                        {Math.floor((correctPredictions / predictions) * 100) + '%'}\n                    </td>\n                    <td className={'mono text-right'}>\n                        {Math.floor((top5Pred / predictions) * 100) + '%'}\n                    </td>\n                </tr>\n            </table>\n\n\n            <ReactTable\n                defaultPageSize={10}\n                className={'striped'}\n                columns={columns}\n                data={data}\n            />\n        </div>\n    );\n}\n\nResultTable.propTypes = {};\nResultTable.defaultProps = {};\n\nexport default ResultTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst props = ['Total', 'HP', 'Attack', 'Defense', 'Speed', 'Sp_Atk', 'Sp_Def'];\n\n\nfunction Predict({predict, handleChange, params, loadRandomPokemon, modelLoaded = false}) {\n\n    const inputs_ = props.map(property => {\n\n        return (\n            <div key={property}>\n                <label htmlFor={property}>{property}</label>\n                <input\n                    name={property}\n                    type={'number'}\n                    className={'form-control mono'}\n                    id={property}\n                    value={params[property]}\n                    onChange={handleChange}\n                />\n            </div>\n\n        )\n    });\n\n    const {Name, Type: _Type} = params;\n\n    const Type = _Type.split('\\n')[0];\n\n    let readOnly = [];\n    if (Name && Type) {\n\n        readOnly = ['Name', 'Type'].map((property, i) => {\n\n            const value = property === 'Type' ? Type : params[property];\n\n            return (\n                <div key={property}>\n                    <label htmlFor={property}>\n                        {property}\n                    </label>\n                    <input type={'text'}\n                           className={'form-control'}\n                           id={property}\n                           value={value}\n                           readOnly\n                    />\n                </div>\n            )\n\n        })\n    }\n\n    return (\n        <div>\n            <h3>Predict Pokemon Type</h3>\n            <form onSubmit={e => {\n\n                e.preventDefault();\n                predict();\n\n            }}\n                  className={'form-inline'}\n\n            >\n\n\n                {inputs_}\n\n                <input hidden type={'submit'}/>\n\n\n            </form>\n\n            <form onSubmit={e => {\n\n                e.preventDefault();\n                predict();\n\n            }}\n                  className={'form-inline'}\n\n            >\n\n\n                {readOnly}\n\n                <input hidden type={'submit'}/>\n\n\n            </form>\n\n            <div className={'row my-3 mx-1 btn-group'}>\n                <button type={'button'} className={'btn btn-secondary'}\n                        onClick={loadRandomPokemon}\n                        disabled={!modelLoaded}\n                >\n                    random\n                </button>\n                <button\n                    disabled={!modelLoaded}\n\n                    onClick={predict}\n                    className={'btn btn-secondary'}>\n                    {!modelLoaded ? \"load model\" : \"predict\"}\n                </button>\n\n                <button type={'button'} className={'btn btn-primary'}\n                        onClick={() => {\n                            loadRandomPokemon();\n\n                            setTimeout(predict, 100);\n                        }}\n                        disabled={!modelLoaded}\n                >\n                    random & predict\n                </button>\n\n\n            </div>\n        </div>\n    );\n}\n\nPredict.propTypes = {\n    predict: PropTypes.func.isRequired,\n    loadRandomPokemon: PropTypes.func.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    params: PropTypes.object.isRequired,\n    modelLoaded: PropTypes.bool.isRequired,\n};\nPredict.defaultProps = {};\n\nexport default Predict;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ModelStatus({model}) {\n    return (\n        <div>\n            <h4>\n                Model:\n                <span style={{\n                    color: model ? '#57d500' : '#ff2e00',\n                    transition: 'all .3s ease'\n                }}>\n                    &#x25cf;\n                </span>\n            </h4>\n\n\n        </div>\n    );\n}\n\nModelStatus.propTypes = {};\nModelStatus.defaultProps = {};\n\nexport default ModelStatus;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction PredictionResults({predictions = [], pokemonType}) {\n\n    if (!predictions.length) {\n\n        return null;\n    }\n    return (\n        <div\n        >\n            <h4>Predicted Types</h4>\n            <ol className={'list-group'}>\n                {predictions.map((prediction, i) => {\n\n                    const type = pokemonType.split('\\n')[0];\n\n                    const same = type === prediction;\n\n                    return (\n                        <li key={prediction}\n                            className={same ? 'list-group-item active' : 'list-group-item'}\n                        >\n                            {prediction}\n                        </li>\n                    )\n                })}\n            </ol>\n        </div>\n    );\n}\n\nPredictionResults.propTypes = {\n    predictions: PropTypes.array.isRequired,\n    pokemonType: PropTypes.string.isRequired,\n};\nPredictionResults.defaultProps = {};\n\nexport default PredictionResults;\n","import React, {Component} from 'react';\nimport './App.css';\nimport {sample} from \"lodash\";\nimport ResultTable from \"./ResultTable\";\nimport Predict from \"./Predict\";\nimport ModelStatus from \"./ModelStatus\";\nimport PredictionResults from \"./PredictionResults\";\n\n\nimport {model} from './index';\n\n\nclass App extends Component {\n\n    constructor(props) {\n\n        super();\n        this.run = this.run.bind(this);\n        this.save = this.save.bind(this);\n        this.loadRandomPokemon = this.loadRandomPokemon.bind(this);\n        this.load = this.load.bind(this);\n        this.predict = this.predict.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n\n\n        const samplePokemon = sample(model.data.pokemon);\n        this.state = {\n            model,\n            resultData: [],\n            training: false,\n            params: {\n                ...model.params,\n                ...samplePokemon\n            },\n            predictedTypes: [],\n\n        };\n\n    }\n\n\n    async load() {\n\n        try {\n            const _model = await model.load();\n            this.setState({\n                ...this.state,\n                model: {\n                    ...this.state.model,\n                    ...model,\n                    model: _model.model,\n                },\n            }, () => console.log('loaded'))\n        } catch (e) {\n\n            alert(e);\n        }\n    }\n\n\n    /**\n     * Run inference on manually-input Iris flower data.\n     *\n     * @param this.state.model The instance of `tf.Model` to run the inference with.\n     */\n\n    async run() {\n        model.createModel();\n        this.setState({\n            ...this.state,\n            model: {\n                ...this.state.model,\n                ...model,\n                model: model.model,\n            },\n            training: true,\n            resultData: []\n        }, async () => {\n            await model.train(this.state.params);\n            const resultData = model.evaluateModelOnTestData();\n            this.setState({\n                ...this.state,\n                training: false,\n                resultData,\n            });\n        })\n    }\n\n\n    async save() {\n\n        try {\n\n            return await model.save();\n        } catch (e) {\n\n            window.alert(e);\n        }\n    }\n\n    handleChange({target: {value, name}}) {\n\n        this.setState({\n            ...this.state,\n            params: {\n                ...this.state.params,\n                [name]: value\n            }\n        });\n    }\n\n    loadRandomPokemon() {\n\n\n        const randPoke = sample(model.data.pokemon);\n\n        this.setState({\n            ...this.state,\n            predictedTypes: [],\n            params: {\n                ...this.state.params,\n                ...randPoke\n            }\n        })\n    }\n\n    predict() {\n\n        if (!model.model) {\n\n            window.alert('Load Model first');\n\n            return false;\n        }\n        const predictedTypes = model.predict(this.state.params);\n\n        this.setState({\n            ...this.state,\n            predictedTypes,\n        })\n\n    }\n\n\n    render() {\n\n        const {params, training, resultData, model: {model}, predictedTypes} = this.state;\n\n        return (\n            <div>\n\n                <div className={'container-fluid'}>\n\n\n                    <div className={'row'}>\n\n                        <div className={'col-md-3'}>\n\n                            <div className={'row'}>\n                                <ModelStatus model={model}/>\n                            </div>\n\n                            <form\n                                className={'my-3 py-3'}\n                                onSubmit={(e) => {\n                                    e.preventDefault();\n                                    this.run();\n                                }}\n                            >\n                                <h5>\n                                    Model Parameters\n\n                                </h5>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"train-epochs\">Train Epochs:</label>\n                                    <input\n\n                                        onChange={e => this.setState({\n                                            ...this.state,\n                                            params: {...params, epochs: e.target.value}\n                                        })}\n                                        min={0}\n                                        step={1}\n                                        className=\"form-control\"\n                                        id=\"train-epochs\"\n                                        type=\"number\" value={params.epochs}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"learning-rate\">Learning Rate:</label>\n                                    <input\n                                        onChange={e => this.setState({\n                                            ...this.state,\n                                            params: {...params, learningRate: e.target.value}\n                                        })}\n\n                                        className=\"form-control\"\n                                        id=\"learning-rate\"\n                                        type=\"number\"\n                                        value={params.learningRate}\n                                        step={0.00001}\n                                        min={0}\n                                        max={1}\n                                    />\n                                </div>\n\n                                <div className={'form-group'}>\n                                    <button\n                                        type={'submit'}\n                                        disabled={training}\n                                        className=\"btn btn-primary\"\n                                        id=\"train-from-scratch\"\n                                    >\n                                        Train model\n                                    </button>\n                                </div>\n\n                                <div className={'form-group'}>\n                                    <div className={'btn-group-sm'}>\n                                        <button\n                                            disabled={!model || training}\n                                            type={'button'}\n                                            onClick={() => this.save()}\n                                            className=\"btn btn-secondary\"\n                                            id=\"save-model\">save model\n                                        </button>\n                                        <button\n                                            disabled={training}\n                                            type={'button'}\n                                            onClick={() => this.load()}\n                                            className=\"btn btn-secondary\"\n                                            id=\"load-btn\">load model\n                                        </button>\n                                    </div>\n                                </div>\n\n                            </form>\n\n                            {model && 'toJSON' in model && (\n                                <form>\n                                    <label>Model Info</label>\n                                    <textarea\n                                        readOnly={true}\n                                        rows={5} className={'form-control'}\n                                        value={model.toJSON()}\n                                    >\n\n            </textarea>\n                                </form>\n                            )}\n\n                        </div>\n\n                        <div className={'col-md-9'}>\n\n                            <div className={'row'}>\n\n                                <div className={'row p-3 m-3'}>\n                                    <div className=\"canvases\" id=\"lossCanvas\"></div>\n                                    <div className=\"canvases\" id=\"accuracyCanvas\"></div>\n                                </div>\n                                {0 < resultData.length && !training && <ResultTable\n                                    data={resultData}\n                                />}\n\n                                {!training && model && (\n                                    <div className={'row'}>\n                                        <div className={'col-sm-6'}>\n                                            <Predict\n                                                modelLoaded={Boolean(model)}\n                                                loadRandomPokemon={this.loadRandomPokemon}\n                                                handleChange={this.handleChange} params={params}\n                                                predict={this.predict}/>\n                                        </div>\n                                        <div className={'col-sm-6'}>\n                                            <PredictionResults\n                                                pokemonType={params.Type || \"none\"}\n                                                predictions={predictedTypes}/>\n                                        </div>\n                                    </div>\n                                )\n                                }\n\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\n\nimport ReactTable from 'react-table'\n\n\nexport function Table({data}) {\n\n    const ex = {\n        id: 'friendName', // Required because our accessor is not a string\n        // Header: 'Friend Name',\n        // Cell: props => <span className='number'>{props.value}</span>, // Custom cell components!\n        // accessor: d => d.friend.name // Custom value accessors!\n    };\n\n    const columns = [\n\n        {\n            id: \"Name\",\n            Header: 'Name',\n            accessor: d => d.Name,\n            Cell: row => {\n\n                return (\n                    <span>\n                        <img\n                            className={'pr-2'}\n                            src={`https://img.pokemondb.net/artwork/${row.original.Name.toLowerCase()}.jpg`}\n                             width=\"36\" height=\"36\"\n                             alt=\"\"/>\n                        {row.original.Name}\n                    </span>\n                )\n            }\n        },\n        {\n            id: \"Type\",\n            Header: 'Type',\n            accessor: d => d.Type,\n        },\n        {\n            id: \"Total\",\n            Header: 'Total',\n            accessor: d => d.Total,\n        },\n        {\n            id: \"HP\",\n            Header: 'HP',\n            accessor: d => d.HP\n\n        },\n        {\n            id: 'Attack',\n            Header: 'Attack',\n            accessor: d => d.Attack\n        },\n        {\n            id: 'Defense',\n            Header: 'Defense',\n            accessor: d => d.Defense,\n        },\n        {\n            id: \"Speed\",\n            Header: 'Speed',\n            accessor: d => d.Speed,\n        },\n        {\n            id: 'Sp_Atk',\n            Header: 'Sp Atk',\n            accessor: d => d.Sp_Atk,\n        },\n        {\n            id: 'Sp_Def',\n            Header: 'Sp Def',\n            accessor: d => d.Sp_Def\n        }\n\n\n    ];\n\n    return <ReactTable\n        data={data}\n        defaultPageSize={10}\n        columns={columns}\n        className=\"-striped -highlight\"\n    />;\n}\n","import React from 'react';\n\nimport * as d3 from \"d3\";\nimport _ from 'lodash';\nimport './Tree.css';\n\n\nwindow.d3 = d3;\n\n\nconst data = {\n    name: \"dense_1\",\n    units: 256,\n    activation: \"relu\",\n    inputShape: 18,\n    children: [\n        {\n            name: 'dense_2',\n            units: 256,\n            activation: 'relu',\n            children: [{\n                name: 'dense_3',\n                units: 18,\n                activation: 'none',\n            }\n            ]\n        }\n    ],\n};\n\n\nvar margin = {top: 20, right: 20, bottom: 20, left: 20},\n    width = 400 - margin.right - margin.left,\n    height = 500 - margin.top - margin.bottom;\n\nclass Tree extends React.Component {\n\n\n    componentDidMount() {\n\n        const heirarchalData = d3.hierarchy(data);\n\n        const Tree = d3.tree()\n            .size([width, height]);\n\n        const tree = Tree(heirarchalData);\n\n        window.tree = tree;\n        const svg = d3.select('svg').append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n\n\n\n        const nodes = svg\n            .selectAll('g.node')\n            .data(tree.descendants())\n            .enter()\n            .append('g')\n            .classed('node', true)\n\n\n        // var tooltip = svg\n        //     .append(\"rect\")\n        //     .attr('width', 100)\n        //     .attr('height', 100)\n        //     .style('background', 'rgba(0, 0, 0, 0.8)')\n        //     .style('color', '#fff')\n        //     .style(\"position\", \"relative\")\n        //     .style(\"z-index\", \"10\")\n        //     .style(\"visibility\", \"hidden\")\n        //     .text(\"a simple tooltip\");\n\n\n        nodes\n            .append('circle')\n            .attr('cx', d => d.x)\n            .attr('cy', d => d.y)\n            .style('fill', '#696969')\n            .attr('z-index', 10)\n            .attr('r', 10)\n            // .on(\"mousemove\", function (event) {\n            //\n            //     console.log('e', event);\n            //     return tooltip.style(\"top\", (event.y - 10) + \"px\").style(\"left\", (event.x + 10) + \"px\");\n            // })\n            // .on(\"mouseout\", function () {\n            //     return tooltip.style(\"visibility\", \"hidden\");\n            // })\n            // .on(\"mouseover\", function () {\n            //     return tooltip.style(\"visibility\", \"visible\");\n            // })\n\n\n        nodes.append('text')\n            .attr('class', 'label')\n            .attr('dx', d => d.x + 50)\n            .attr('dy', d => d.y)\n            .text((d, i) => {\n\n                return `layer: ${i + 1} \\t units: ${d.data.units}`;\n            });\n\n        //The line SVG Path we draw\n        var lineGraph = svg.selectAll('.links')\n\n            .data(tree.links())\n            .enter()\n            .append('line')\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y + 10)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y - 10)\n            .attr(\"stroke\", \"blue\")\n            .attr(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\")\n            .style('stroke', '#5f5f5f')\n\n\n    }\n\n\n    render() {\n\n        return (\n            <svg width={width + margin.left + margin.right} height={height + margin.top + margin.bottom}>\n            </svg>\n        );\n    }\n}\n\nTree.propTypes = {};\nTree.defaultProps = {};\n\nexport default Tree;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tree from \"./Tree\";\n\n\nfunction About(props) {\n    return (\n        <div className={'container'}>\n            <h2>About</h2>\n\n            <div className={'row'}>\n                <div className={'row'}>\n                    <div>\n                        <div>\n                            Sequential model with 3 fully connected layers\n                            <ol>\n                                <li>\n                                    <b>\n                                        First Layer\n\n                                    </b>\n\n                                    <ul>\n                                        <li>\n                                            Input data: 18 units\n                                        </li>\n                                        <li>\n                                            Units: 256\n\n                                        </li>\n                                        <li>\n                                            Activation: Relu\n                                        </li>\n                                    </ul>\n\n                                </li>\n                                <li>\n\n                                    <b>\n                                        Second Layer\n                                    </b>\n                                    <ul>\n                                        <li>\n                                            Units: 256\n\n                                        </li>\n                                        <li>\n                                            Activation: Relu\n                                        </li>\n                                    </ul>\n\n                                </li>\n                                <li>\n\n                                    <b>\n                                        Third layer\n                                    </b>\n                                    <ul>\n                                        <li>\n                                            Units: 18\n                                            <small>\n                                                {' reduced to 18 pokemon types'}\n                                            </small>\n\n                                        </li>\n                                        <li>\n                                            Activation: none\n                                        </li>\n                                    </ul>\n                                </li>\n                            </ol>\n                        </div>\n                    </div>\n\n                    <Tree/>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nAbout.propTypes = {};\nAbout.defaultProps = {};\n\nexport default About;\n","import React from \"react\";\nimport {BrowserRouter as Router, Route, Link, Switch} from \"react-router-dom\";\nimport App from \"./App\";\nimport pokemonImg from \"./pokemon.jpg\";\nimport pokemon from './pokemon'\nimport {Table} from \"./Table\";\nimport About from \"./About\";\n\n\nconst Data = () => {\n\n    return (\n        <div className={'container-fluid'}>\n            <Table data={pokemon}/>\n        </div>\n    )\n};\n\nconst AppRouter = () => (\n    <Router>\n        <div>\n            <nav className={'navbar'}>\n                <Link to={'/classify'}>\n                    <h2 className={'navbar-brand'}>\n                        <img src={pokemonImg} alt={''} width={'50'} height={'auto'} className={'mr-2'}/>\n                        Pokemon Classification\n                    </h2>\n                </Link>\n                <ul className={'navbar-nav'}>\n                    <li>\n                        <Link to={'/classify'}>\n                            Home\n                        </Link>\n                    </li>\n                    <li>\n                        <Link to=\"/about\">About</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/data\">Data</Link>\n                    </li>\n                </ul>\n            </nav>\n            <Switch>\n                <Route path=\"/about\" component={About}/>\n                <Route path=\"/data\" component={Data}/>\n                <Route path={'/classify'} component={App}/>\n                <Route component={App}/>\n            </Switch>\n        </div>\n    </Router>\n);\n\nexport default AppRouter;\n","import embed from \"vega-embed\";\n\nexport class UI {\n\n    /**\n     * Plot new accuracy values.\n     *\n     * @param lossValues An `Array` of data to append to.\n     * @param epoch Training epoch number.\n     * @param newTrainLoss The new training accuracy, as a single `Number`.\n     * @param newValidationLoss The new validation accuracy, as a single `Number`.\n     */\n    static plotAccuracies(\n        accuracyValues, epoch, newTrainAccuracy, newValidationAccuracy) {\n        accuracyValues.push(\n            {epoch, 'accuracy': newTrainAccuracy, 'set': 'train'});\n        accuracyValues.push(\n            {epoch, 'accuracy': newValidationAccuracy, 'set': 'validation'});\n        embed(\n            '#accuracyCanvas', {\n                '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n                'data': {'values': accuracyValues},\n                'mark': 'line',\n                'encoding': {\n                    'x': {'field': 'epoch', 'type': 'ordinal'},\n                    'y': {'field': 'accuracy', 'type': 'quantitative'},\n                    'color': {'field': 'set', 'type': 'nominal'}\n                },\n                'width': 500\n            },\n            {});\n    }\n\n    static plotLosses(lossValues, epoch, newTrainLoss, newValidationLoss) {\n        lossValues.push({epoch, 'loss': newTrainLoss, 'set': 'train'});\n        lossValues.push(\n            {epoch, 'loss': newValidationLoss, 'set': 'validation'});\n        embed(\n            '#lossCanvas', {\n                '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n                'data': {'values': lossValues},\n                'mark': 'line',\n                'encoding': {\n                    'x': {'field': 'epoch', 'type': 'ordinal'},\n                    'y': {'field': 'loss', 'type': 'quantitative'},\n                    'color': {'field': 'set', 'type': 'nominal'}\n                },\n                'width': 500\n            },\n            {});\n    }\n\n\n}\n","/* eslint-disable arrow-parens */\nimport _ from \"lodash\";\nimport {UI} from \"./vegaEmbedGraph\";\n\nconst tf = require('@tensorflow/tfjs');\nconst pokemon = require('./pokemon');\n\nconst POKEMON_DATA = pokemon.map(mapJsonToArray);\n\nconst POKEMON_TYPES = _.uniq(POKEMON_DATA.map(item => item[8]));\n\nfunction mapJsonToArray(p) {\n\n\n    const {Name, Type, Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def} = p;\n\n    const type = Type.split('\\n')[0];\n\n    return [\n        Name,\n        Total,\n        HP,\n        Attack,\n        Defense,\n        Sp_Def,\n        Sp_Atk,\n        Speed,\n        type,\n    ]\n\n\n}\n\nfunction getName(_row) {\n\n    const found = POKEMON_DATA.find(pokemon => {\n\n        return pokemon[1] == _row[0] && pokemon[2] == _row[1]\n    });\n\n    if (found) {\n        return found[0]\n    }\n    return 'n/a';\n}\n\n\nclass PokemonData {\n\n\n    constructor(testSplit = 0.1) {\n\n        this.pokemon = pokemon;\n        this.POKEMON_DATA = POKEMON_DATA;\n        this.POKEMON_TYPES = POKEMON_TYPES;\n\n        const [xTrain, yTrain, xTest, yTest] = this.getPokemon(testSplit);\n\n        this.xTrain = xTrain;\n        this.yTrain = yTrain;\n        this.xTest = xTest;\n        this.yTest = yTest;\n    }\n\n    getPokemon(testSplit) {\n\n\n        return tf.tidy(() => {\n            const dataByClass = [];\n            const targetsByClass = [];\n            for (let i = 0; i < POKEMON_TYPES.length; ++i) {\n                dataByClass.push([]);\n                targetsByClass.push([]);\n            }\n\n            // const {dataset} = utils.normalizeDataset(POKEMON_DATA.map(i => i.slice(1, -1)), true, [], []);\n\n\n            for (let i = 0; i < POKEMON_DATA.length; i++) {\n                const example = POKEMON_DATA[i];\n                const target = example[example.length - 1];\n                const data = POKEMON_DATA.map(i => i.slice(1, -1));\n                const idx = POKEMON_TYPES.findIndex(type => type === target);\n                dataByClass[idx].push(data[i]);\n                targetsByClass[idx].push(idx);\n            }\n\n            const xTrains = [];\n            const yTrains = [];\n            const xTests = [];\n            const yTests = [];\n\n\n            for (let i = 0; i < POKEMON_TYPES.length; ++i) {\n                const [xTrain, yTrain, xTest, yTest] =\n                    PokemonData.convertToTensors(dataByClass[i], targetsByClass[i], testSplit);\n                xTrains.push(xTrain);\n                yTrains.push(yTrain);\n                xTests.push(xTest);\n                yTests.push(yTest);\n            }\n\n            const concatAxis = 0;\n            return [\n                tf.concat(xTrains, concatAxis), tf.concat(yTrains, concatAxis),\n                tf.concat(xTests, concatAxis), tf.concat(yTests, concatAxis)\n            ];\n        });\n    }\n\n\n    /**\n     * Convert Iris data arrays to `tf.Tensor`s.\n     *\n     * @param data The Iris input feature data, an `Array` of `Array`s, each element\n     *   of which is assumed to be a length-4 `Array` (for petal length, petal\n     *   width, sepal length, sepal width).\n     * @param targets An `Array` of numbers, with values from the set {0, 1, 2}:\n     *   representing the true category of the Iris flower. Assumed to have the same\n     *   array length as `data`.\n     * @param testSplit Fraction of the data at the end to split as test data: a\n     *   number between 0 and 1.\n     * @return A length-4 `Array`, with\n     *   - training data as `tf.Tensor` of shape [numTrainExapmles, 4].\n     *   - training one-hot labels as a `tf.Tensor` of shape [numTrainExamples, 3]\n     *   - test data as `tf.Tensor` of shape [numTestExamples, 4].\n     *   - test one-hot labels as a `tf.Tensor` of shape [numTestExamples, 3]\n     */\n    static convertToTensors(data, targets, testSplit) {\n        const numExamples = data.length;\n        if (numExamples !== targets.length) {\n            throw new Error('data and split have different numbers of examples');\n        }\n\n        // Randomly shuffle `data` and `targets`.\n        const indices = [];\n        for (let i = 0; i < numExamples; ++i) {\n            indices.push(i);\n        }\n        tf.util.shuffle(indices);\n\n        const shuffledData = [];\n        const shuffledTargets = [];\n        for (let i = 0; i < numExamples; ++i) {\n            shuffledData.push(data[indices[i]]);\n            shuffledTargets.push(targets[indices[i]]);\n        }\n\n        // Split the data into a training set and a tet set, based on `testSplit`.\n        const numTestExamples = Math.round(numExamples * testSplit);\n        const numTrainExamples = numExamples - numTestExamples;\n\n        const xDims = shuffledData[0].length;\n\n        // Create a 2D `tf.Tensor` to hold the feature data.\n        const xs = tf.tensor2d(shuffledData, [numExamples, xDims]);\n\n        // Create a 1D `tf.Tensor` to hold the labels, and convert the number label\n        // from the set {0, 1, 2} into one-hot encoding (.e.g., 0 --> [1, 0, 0]).\n        const ys = tf.oneHot(tf.tensor1d(shuffledTargets).toInt(), POKEMON_TYPES.length);\n\n        // Split the data into training and test sets, using `slice`.\n        const xTrain = xs.slice([0, 0], [numTrainExamples, xDims]);\n        const xTest = xs.slice([numTrainExamples, 0], [numTestExamples, xDims]);\n        const yTrain = ys.slice([0, 0], [numTrainExamples, POKEMON_TYPES.length]);\n        const yTest = ys.slice([0, 0], [numTestExamples, POKEMON_TYPES.length]);\n        return [xTrain, yTrain, xTest, yTest];\n    }\n\n\n}\n\nclass PokemonModel {\n\n    params = {\n        epochs: 50,\n        learningRate: 0.0005,\n    };\n    model;\n\n\n    constructor() {\n\n        this.data = new PokemonData();\n\n    }\n\n\n    createModel() {\n\n        const {xTrain, POKEMON_TYPES} = this.data;\n        let model;\n        model = tf.sequential();\n\n        model.add(tf.layers.dense(\n            {units: 256, activation: 'relu', inputShape: [xTrain.shape[1]]}));\n\n        model.add(\n            tf.layers.dense(\n                {units: 256, activation: 'relu'}\n            )\n        );\n\n        model.add(tf.layers.dense({units: POKEMON_TYPES.length}));\n\n        this.model = model;\n\n    }\n\n    async load() {\n\n\n        const loadedModel = await tf.loadModel('indexeddb://my-model-1');\n        this.model = loadedModel;\n\n        return this;\n\n    }\n\n    async save() {\n\n        if (this.model == null) {\n\n            throw new Error('Invalid Request');\n        }\n        const saveResults = await this.model.save(`indexeddb://my-model-1`);\n\n        return saveResults;\n    }\n\n    async train(params) {\n\n        const {xTrain, yTrain, xTest, yTest} = this.data;\n        const optimizer = tf.train.adam(params.learningRate);\n        const lossValues = [];\n\n        const returnCost = true;\n        for (let i = 0; i < params.epochs; i++) {\n            const cost = optimizer.minimize(() => {\n                const predictions = this.model.predict(xTrain);\n                return tf.losses.softmaxCrossEntropy(\n                    yTrain.asType('float32'),\n                    predictions.asType('float32')\n                ).mean();\n            }, returnCost);\n\n            const trainLoss = tf.losses.softmaxCrossEntropy(\n                yTest.asType('float32'),\n                this.model.predict(xTest).asType('float32')\n            ).mean();\n\n            UI.plotLosses(lossValues, i, cost.dataSync(), trainLoss.dataSync());\n\n            await tf.nextFrame();\n        }\n\n        return this;\n\n\n    };\n\n\n}\n\n\nexport class PokemonTypeModel extends PokemonModel {\n\n\n    constructor() {\n\n        super();\n        super.createModel();\n    }\n\n    renderEvaluateTable(xData, yTrue, yPred, logits) {\n\n        const rows = _.chunk(xData, 7);\n\n        const data = [];\n\n        for (let i = 0; i < rows.length; i++) {\n\n            const row = rows[i];\n\n            const name = getName(row);\n\n            const type = POKEMON_TYPES[yTrue[i]];\n\n            const pred = POKEMON_TYPES[yPred[i]];\n            const exampleLogits = logits.slice(i * POKEMON_TYPES.length, (i + 1) * POKEMON_TYPES.length);\n\n            const top5 = tf.topk(exampleLogits, 5);\n            const _data = top5.indices.dataSync();\n\n            const types = Array.from(_data).map(item => POKEMON_TYPES[item]);\n\n            const strings = types.join(', ');\n\n            const span = strings;\n\n            data.push({\n                name,\n                type,\n                pred,\n                span,\n                types,\n                _data,\n            })\n\n        }\n        return {\n            data,\n        }\n\n    }\n\n    evaluateModelOnTestData() {\n\n        const {xTest, yTest} = this.data;\n\n        return tf.tidy(() => {\n            const xData = xTest.dataSync();\n            const yTrue = yTest.argMax(-1).dataSync();\n            const predictOut = this.model.predict(xTest);\n            const yPred = predictOut.argMax(-1);\n\n            const logits = predictOut.dataSync();\n\n\n            const result = this.renderEvaluateTable(\n                xData, yTrue, yPred.dataSync(), logits);\n\n\n            const resultData = result.data.map(d => {\n\n                const foundP = this.data.pokemon.find(_d => _d.Name === d.name);\n\n                if (foundP) {\n\n                    return Object.assign({}, foundP, d);\n\n                }\n\n                return d;\n            });\n\n            return resultData;\n\n            // calculateAndDrawConfusionMatrix(model, xTest, yTest);\n        });\n\n\n    }\n\n    predict({Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def}) {\n\n        const _arr = [Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def];\n\n        const tensor = tf.tensor2d(_arr, [1, 7], 'float32');\n        const prediction = this.model.predict(tensor);\n        const top5 = tf.topk(prediction, 5);\n        const _data = top5.indices.dataSync();\n        const predictedTypes = Array.from(_data).map(item => POKEMON_TYPES[item]);\n        return predictedTypes;\n    }\n\n\n}\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'jquery/dist/jquery.min'\nimport 'popper.js/dist/popper.min'\nimport 'bootstrap/dist/js/bootstrap.min'\nimport AppRouter from \"./Router\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport {PokemonTypeModel} from \"./pokemonModel\";\n\nwindow.tf = tf;\n\n\nexport const model = new PokemonTypeModel();\n\nReactDOM.render(<AppRouter/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}