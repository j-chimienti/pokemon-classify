{"version":3,"sources":["pokemon.jpg","serviceWorker.js","pokemonModel.js","ResultTable.jsx","Predict.jsx","ModelStatus.jsx","PredictionResults.jsx","App.jsx","Table.jsx","Tree.jsx","About.jsx","Router.jsx","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","tf","require","_uniq","pokemond","POKEMON_DATA","map","Name","Type","Total","HP","Attack","Defense","Speed","Sp_Atk","Sp_Def","type","split","POKEMON_TYPES","item","PokemonData","testSplit","arguments","length","undefined","Object","classCallCheck","this","pokemon","_this$getPokemon","getPokemon","_this$getPokemon2","slicedToArray","xTrain","yTrain","xTest","yTest","_this","tidy","dataByClass","targetsByClass","i","push","_loop","example","target","data","slice","idx","findIndex","xTrains","yTrains","xTests","yTests","_this$convertToTensor","convertToTensors","_this$convertToTensor2","concat","targets","numExamples","Error","indices","util","shuffle","shuffledData","shuffledTargets","numTestExamples","Math","round","numTrainExamples","xDims","xs","tensor2d","ys","oneHot","tensor1d","toInt","UI","accuracyValues","epoch","newTrainAccuracy","newValidationAccuracy","accuracy","set","embed","$schema","values","mark","encoding","x","field","y","color","width","lossValues","newTrainLoss","newValidationLoss","loss","getName","_row","found","find","PokemonTypeModel","_PokemonModel","_this3","possibleConstructorReturn","getPrototypeOf","call","createModel","inherits","createClass","key","value","xData","yTrue","yPred","logits","rows","_","chunk","name","pred","exampleLogits","_data","topk","dataSync","types","Array","from","span","join","_this4","_this$data3","argMax","predictOut","model","predict","renderEvaluateTable","d","foundP","_d","assign","_ref","_arr","tensor","prediction","PokemonModel","params","epochs","learningRate","_this$data","sequential","add","layers","dense","units","activation","inputShape","shape","loadModel","loadedModel","save","saveResults","optimizer","train","adam","returnCost","cost","minimize","predictions","_this2","losses","softmaxCrossEntropy","asType","mean","trainLoss","plotLosses","nextFrame","ResultTable","columns","id","Header","accessor","Cell","row","react_default","a","createElement","className","src","original","toLowerCase","height","alt","same","top5","includes","arr","style","transition","correctPredictions","filter","top5Pred","_ref2","floor","es","defaultPageSize","defaultProps","props","Predict","handleChange","loadRandomPokemon","_ref$modelLoaded","modelLoaded","inputs_","property","htmlFor","onChange","readOnly","onSubmit","e","preventDefault","console","log","onClick","disabled","ModelStatus","PredictionResults","_ref$predictions","pokemonType","samplePokemon","sample","App","state","resultData","training","objectSpread","predictedTypes","run","bind","assertThisInitialized","load","_model","setState","alert","_context","t0","asyncToGenerator","regenerator_default","_callee2","wrap","_context2","prev","next","evaluateModelOnTestData","stop","_context4","_ref2$target","defineProperty","randPoke","_this$state","src_ModelStatus","min","step","max","toJSON","src_ResultTable","src_Predict","src_PredictionResults","Component","Table","d3","children","margin","Tree","heirarchalData","tree","size","svg","append","attr","nodes","selectAll","descendants","enter","classed","text","links","source","React","About","src_Tree_0","Data","AppRouter","BrowserRouter","Link","to","pokemonImg","Switch","Route","path","component","ReactDOM","render","Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c94eb65.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokemon.a4f594f6.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable arrow-parens */\nimport embed from \"vega-embed\";\nimport _ from \"lodash\";\n\nconst tf = require('@tensorflow/tfjs');\nconst _uniq = require('lodash.uniq');\nconst pokemond = require('./pokemon');\n\nconst POKEMON_DATA = pokemond.map(mapJsonToArray);\n\nconst POKEMON_TYPES = _uniq(POKEMON_DATA.map(item => item[8]));\n\nfunction mapJsonToArray(p) {\n\n\n    const {Name, Type, Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def} = p;\n\n    const type = Type.split('\\n')[0];\n\n    return [\n        Name,\n        Total,\n        HP,\n        Attack,\n        Defense,\n        Sp_Def,\n        Sp_Atk,\n        Speed,\n        type,\n    ]\n\n\n}\n\nclass PokemonData {\n\n\n    constructor(testSplit = 0.1) {\n\n        this.pokemon = pokemond;\n        this.POKEMON_DATA = POKEMON_DATA;\n        this.POKEMON_TYPES = POKEMON_TYPES;\n\n        const [xTrain, yTrain, xTest, yTest] = this.getPokemon(testSplit);\n\n        this.xTrain = xTrain;\n        this.yTrain = yTrain;\n        this.xTest = xTest;\n        this.yTest = yTest;\n    }\n\n    getPokemon(testSplit = 0.2) {\n\n\n        return tf.tidy(() => {\n            const dataByClass = [];\n            const targetsByClass = [];\n            for (let i = 0; i < POKEMON_TYPES.length; ++i) {\n                dataByClass.push([]);\n                targetsByClass.push([]);\n            }\n\n            // const {dataset} = utils.normalizeDataset(POKEMON_DATA.map(i => i.slice(1, -1)), true, [], []);\n\n\n            for (let i = 0; i < POKEMON_DATA.length; i++) {\n                const example = POKEMON_DATA[i];\n                const target = example[example.length - 1];\n                const data = POKEMON_DATA.map(i => i.slice(1, -1));\n                const idx = POKEMON_TYPES.findIndex(type => type === target);\n                dataByClass[idx].push(data[i]);\n                targetsByClass[idx].push(idx);\n            }\n\n            const xTrains = [];\n            const yTrains = [];\n            const xTests = [];\n            const yTests = [];\n\n\n            for (let i = 0; i < POKEMON_TYPES.length; ++i) {\n                const [xTrain, yTrain, xTest, yTest] =\n                    this.convertToTensors(dataByClass[i], targetsByClass[i], testSplit);\n                xTrains.push(xTrain);\n                yTrains.push(yTrain);\n                xTests.push(xTest);\n                yTests.push(yTest);\n            }\n\n            const concatAxis = 0;\n            return [\n                tf.concat(xTrains, concatAxis), tf.concat(yTrains, concatAxis),\n                tf.concat(xTests, concatAxis), tf.concat(yTests, concatAxis)\n            ];\n        });\n    }\n\n\n    /**\n     * Convert Iris data arrays to `tf.Tensor`s.\n     *\n     * @param data The Iris input feature data, an `Array` of `Array`s, each element\n     *   of which is assumed to be a length-4 `Array` (for petal length, petal\n     *   width, sepal length, sepal width).\n     * @param targets An `Array` of numbers, with values from the set {0, 1, 2}:\n     *   representing the true category of the Iris flower. Assumed to have the same\n     *   array length as `data`.\n     * @param testSplit Fraction of the data at the end to split as test data: a\n     *   number between 0 and 1.\n     * @return A length-4 `Array`, with\n     *   - training data as `tf.Tensor` of shape [numTrainExapmles, 4].\n     *   - training one-hot labels as a `tf.Tensor` of shape [numTrainExamples, 3]\n     *   - test data as `tf.Tensor` of shape [numTestExamples, 4].\n     *   - test one-hot labels as a `tf.Tensor` of shape [numTestExamples, 3]\n     */\n    convertToTensors(data, targets, testSplit) {\n        const numExamples = data.length;\n        if (numExamples !== targets.length) {\n            throw new Error('data and split have different numbers of examples');\n        }\n\n        // Randomly shuffle `data` and `targets`.\n        const indices = [];\n        for (let i = 0; i < numExamples; ++i) {\n            indices.push(i);\n        }\n        tf.util.shuffle(indices);\n\n        const shuffledData = [];\n        const shuffledTargets = [];\n        for (let i = 0; i < numExamples; ++i) {\n            shuffledData.push(data[indices[i]]);\n            shuffledTargets.push(targets[indices[i]]);\n        }\n\n        // Split the data into a training set and a tet set, based on `testSplit`.\n        const numTestExamples = Math.round(numExamples * testSplit);\n        const numTrainExamples = numExamples - numTestExamples;\n\n        const xDims = shuffledData[0].length;\n\n        // Create a 2D `tf.Tensor` to hold the feature data.\n        const xs = tf.tensor2d(shuffledData, [numExamples, xDims]);\n\n        // Create a 1D `tf.Tensor` to hold the labels, and convert the number label\n        // from the set {0, 1, 2} into one-hot encoding (.e.g., 0 --> [1, 0, 0]).\n        const ys = tf.oneHot(tf.tensor1d(shuffledTargets).toInt(), POKEMON_TYPES.length);\n\n        // Split the data into training and test sets, using `slice`.\n        const xTrain = xs.slice([0, 0], [numTrainExamples, xDims]);\n        const xTest = xs.slice([numTrainExamples, 0], [numTestExamples, xDims]);\n        const yTrain = ys.slice([0, 0], [numTrainExamples, POKEMON_TYPES.length]);\n        const yTest = ys.slice([0, 0], [numTestExamples, POKEMON_TYPES.length]);\n        return [xTrain, yTrain, xTest, yTest];\n    }\n\n\n}\n\nclass UI {\n\n    /**\n     * Plot new accuracy values.\n     *\n     * @param lossValues An `Array` of data to append to.\n     * @param epoch Training epoch number.\n     * @param newTrainLoss The new training accuracy, as a single `Number`.\n     * @param newValidationLoss The new validation accuracy, as a single `Number`.\n     */\n    static plotAccuracies(\n        accuracyValues, epoch, newTrainAccuracy, newValidationAccuracy) {\n        accuracyValues.push(\n            {epoch, 'accuracy': newTrainAccuracy, 'set': 'train'});\n        accuracyValues.push(\n            {epoch, 'accuracy': newValidationAccuracy, 'set': 'validation'});\n        embed(\n            '#accuracyCanvas', {\n                '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n                'data': {'values': accuracyValues},\n                'mark': 'line',\n                'encoding': {\n                    'x': {'field': 'epoch', 'type': 'ordinal'},\n                    'y': {'field': 'accuracy', 'type': 'quantitative'},\n                    'color': {'field': 'set', 'type': 'nominal'}\n                },\n                'width': 500\n            },\n            {});\n    }\n\n    static plotLosses(lossValues, epoch, newTrainLoss, newValidationLoss) {\n        lossValues.push({epoch, 'loss': newTrainLoss, 'set': 'train'});\n        lossValues.push(\n            {epoch, 'loss': newValidationLoss, 'set': 'validation'});\n        embed(\n            '#lossCanvas', {\n                '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n                'data': {'values': lossValues},\n                'mark': 'line',\n                'encoding': {\n                    'x': {'field': 'epoch', 'type': 'ordinal'},\n                    'y': {'field': 'loss', 'type': 'quantitative'},\n                    'color': {'field': 'set', 'type': 'nominal'}\n                },\n                'width': 500\n            },\n            {});\n    }\n\n\n}\n\nclass PokemonModel {\n\n    params = {\n        epochs: 50,\n        learningRate: 0.0005,\n    };\n    model;\n\n\n    constructor() {\n\n        this.data = new PokemonData();\n\n    }\n\n\n    createModel() {\n\n        const {xTrain, POKEMON_TYPES} = this.data;\n        let model;\n        model = tf.sequential();\n\n        model.add(tf.layers.dense(\n            {units: 256, activation: 'relu', inputShape: [xTrain.shape[1]]}));\n\n        model.add(\n            tf.layers.dense(\n                {units: 256, activation: 'relu'}\n            )\n        );\n\n        model.add(tf.layers.dense({units: POKEMON_TYPES.length}));\n\n        this.model = model;\n\n    }\n\n    async load() {\n\n\n        const loadedModel = await tf.loadModel('indexeddb://my-model-1');\n        this.model = loadedModel;\n\n        return this;\n\n    }\n\n    async save() {\n\n        if (this.model == null) {\n\n            throw new Error('Invalid Request');\n        }\n        const saveResults = await this.model.save(`indexeddb://my-model-1`);\n\n        return saveResults;\n    }\n\n    async train(params) {\n\n        const {xTrain, yTrain, xTest, yTest} = this.data;\n        const optimizer = tf.train.adam(params.learningRate);\n        const lossValues = [];\n\n        const returnCost = true;\n        for (let i = 0; i < params.epochs; i++) {\n            const cost = optimizer.minimize(() => {\n                const predictions = this.model.predict(xTrain);\n                return tf.losses.softmaxCrossEntropy(\n                    yTrain.asType('float32'),\n                    predictions.asType('float32')\n                ).mean();\n            }, returnCost);\n\n            const trainLoss = tf.losses.softmaxCrossEntropy(\n                yTest.asType('float32'),\n                this.model.predict(xTest).asType('float32')\n            ).mean();\n\n            UI.plotLosses(lossValues, i, cost.dataSync(), trainLoss.dataSync());\n\n            await tf.nextFrame();\n        }\n\n        return this;\n\n\n    };\n\n\n}\n\nfunction getName(_row) {\n\n    const found = POKEMON_DATA.find(pokemon => {\n\n        return pokemon[1] == _row[0] && pokemon[2] == _row[1]\n    });\n\n    if (found) {\n        return found[0]\n    }\n    return 'n/a';\n}\n\nexport class PokemonTypeModel extends PokemonModel {\n\n\n    constructor() {\n\n        super();\n        this.createModel();\n    }\n\n    renderEvaluateTable(xData, yTrue, yPred, logits) {\n\n        const rows = _.chunk(xData, 7);\n\n        const data = [];\n\n        for (let i = 0; i < rows.length; i++) {\n\n            const row = rows[i];\n\n            const name = getName(row);\n\n            const type = POKEMON_TYPES[yTrue[i]];\n\n            const pred = POKEMON_TYPES[yPred[i]];\n            const exampleLogits = logits.slice(i * POKEMON_TYPES.length, (i + 1) * POKEMON_TYPES.length);\n\n            const top5 = tf.topk(exampleLogits, 5);\n            const _data = top5.indices.dataSync();\n\n            const types = Array.from(_data).map(item => POKEMON_TYPES[item]);\n\n            const strings = types.join(', ');\n\n            const span = strings;\n\n            data.push({\n                name,\n                type,\n                pred,\n                span,\n                types,\n                _data,\n            })\n\n        }\n        return {\n            data,\n        }\n\n    }\n\n    evaluateModelOnTestData() {\n\n        const {xTest, yTest} = this.data;\n\n        return tf.tidy(() => {\n            const xData = xTest.dataSync();\n            const yTrue = yTest.argMax(-1).dataSync();\n            const predictOut = this.model.predict(xTest);\n            const yPred = predictOut.argMax(-1);\n\n            const logits = predictOut.dataSync();\n\n\n            const result = this.renderEvaluateTable(\n                xData, yTrue, yPred.dataSync(), logits);\n\n\n            const resultData = result.data.map(d => {\n\n                const foundP = this.data.pokemon.find(_d => _d.Name === d.name);\n\n                if (foundP) {\n\n                    return Object.assign({}, foundP, d);\n\n                }\n\n                return d;\n            });\n\n            return resultData;\n\n            // calculateAndDrawConfusionMatrix(model, xTest, yTest);\n        });\n\n\n    }\n\n    predict({Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def}) {\n\n        const _arr = [Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def];\n\n        const tensor = tf.tensor2d(_arr, [1, 7], 'float32');\n        const prediction = this.model.predict(tensor);\n        const top5 = tf.topk(prediction, 5);\n        const _data = top5.indices.dataSync();\n        const predictedTypes = Array.from(_data).map(item => POKEMON_TYPES[item]);\n        return predictedTypes;\n    }\n\n\n}\n\n\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactTable from \"react-table\";\n\nfunction ResultTable({data}) {\n\n\n    const columns = [\n\n        {\n            id: \"Name\",\n            Header: 'Name',\n            accessor: d => d.Name,\n            Cell: row => {\n\n                return (\n                    <span>\n                        <img\n                            className={'pr-2'}\n                            src={`https://img.pokemondb.net/artwork/${row.original.Name.toLowerCase()}.jpg`}\n                            width=\"36\"\n                            height=\"36\"\n                            alt={row.original.Name}/>\n                        {row.original.Name}\n                    </span>\n                )\n            }\n        },\n        {\n            id: \"Type\",\n            Header: 'Type',\n            accessor: d => d.type,\n        },\n        // {\n        //     id: \"Total\",\n        //     Header: 'Total',\n        //     accessor: d => d.Total,\n        // },\n        // {\n        //     id: \"HP\",\n        //     Header: 'HP',\n        //     accessor: d => d.HP\n        //\n        // },\n        // {\n        //     id: 'Attack',\n        //     Header: 'Attack',\n        //     accessor: d => d.Attack\n        // },\n        // {\n        //     id: 'Defense',\n        //     Header: 'Defense',\n        //     accessor: d => d.Defense,\n        // },\n        // {\n        //     id: \"Speed\",\n        //     Header: 'Speed',\n        //     accessor: d => d.Speed,\n        // },\n        // {\n        //     id: 'Sp_Atk',\n        //     Header: 'Sp_Atk',\n        //     accessor: d => d.Sp_Atk,\n        // },\n        // {\n        //     id: 'Sp_Def',\n        //     Header: 'Sp_Def',\n        //     accessor: d => d.Sp_Def\n        // },\n        {\n            id: \"Prediction\",\n            Header: \"Top 5 Predictions\",\n            Cell: row => {\n\n                const pokemon = row.original;\n\n                const same = pokemon.pred === pokemon.type;\n                const top5 = pokemon.types.includes(pokemon.type);\n\n                const arr = pokemon.types.map((prediction, i) => {\n\n                    if (prediction === pokemon.type) {\n\n                        return <b className={'p-1'} key={prediction + i}>{prediction}</b>\n                    }\n                    return <span className={'p-1'} key={prediction + i}>{prediction}</span>\n                });\n\n                return (\n                    <span>\n            <span style={{\n                color: same ? '#57d500'\n                    : top5 ? '#ffbf00'\n                        : '#ff2e00',\n                transition: 'all .3s ease'\n            }}>\n              &#x25cf;\n            </span> {arr}\n          </span>\n                );\n            }\n        }\n    ];\n\n\n    const correctPredictions = data.filter(d => d.pred === d.type).length;\n    const top5Pred = data.filter(({types, type}) => types.includes(type)).length;\n    const predictions = data.length;\n    return (\n        <div>\n\n\n            <table className={'table table-condensed'}>\n                <thead>\n                <tr>\n                    <th className={'text-right'}>\n                        Correct\n                    </th>\n                    <th className={'text-right'}>\n                        top 5\n                    </th>\n                </tr>\n                </thead>\n                <tr>\n                    <td className={'mono text-right'}>\n                        {Math.floor((correctPredictions / predictions) * 100) + '%'}\n                    </td>\n                    <td className={'mono text-right'}>\n                        {Math.floor((top5Pred / predictions) * 100) + '%'}\n                    </td>\n                </tr>\n            </table>\n\n\n            <ReactTable\n                defaultPageSize={10}\n                className={'striped'}\n                columns={columns}\n                data={data}\n            />\n        </div>\n    );\n}\n\nResultTable.propTypes = {};\nResultTable.defaultProps = {};\n\nexport default ResultTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst props = ['Total', 'HP', 'Attack', 'Defense', 'Speed', 'Sp_Atk', 'Sp_Def'];\n\n\nfunction Predict({predict, handleChange, params, loadRandomPokemon, modelLoaded = false}) {\n\n    const inputs_ = props.map(property => {\n\n        return (\n            <div key={property}>\n                <label htmlFor={property}>{property}</label>\n                <input type={'number'} className={'form-control mono'} id={property}\n                       value={params[property]}\n                       onChange={handleChange}\n                />\n            </div>\n\n        )\n    });\n\n    const {Name, Type: _Type} = params;\n\n    const Type = _Type.split('\\n')[0];\n\n    let readOnly = [];\n    if (Name && Type) {\n\n        readOnly = ['Name', 'Type'].map((property, i) => {\n\n            const value = property === 'Type' ? Type : params[property];\n\n            return (\n                <div key={property}>\n                    <label htmlFor={property}>\n                        {property}\n                    </label>\n                    <input type={'text'}\n                           className={'form-control'}\n                           id={property}\n                           value={value}\n                           readOnly\n                    />\n                </div>\n            )\n\n        })\n    }\n\n    return (\n        <div>\n            <form onSubmit={e => {\n\n                e.preventDefault();\n                console.log('redi')\n                predict();\n            }}\n                  className={'form-inline'}\n\n            >\n                <h3>Predict Pokemon Type</h3>\n\n                {inputs_} <br/>\n                {readOnly}\n                <div className={'form-group'}>\n\n                    <button type={'button'} className={'btn btn-secondary'}\n                            onClick={loadRandomPokemon}\n                            disabled={!modelLoaded}\n                    >\n                        load random pokemon\n                    </button>\n                    <button\n                        disabled={!modelLoaded}\n                        type={'submit'} className={'btn btn-primary'}>\n                        {!modelLoaded ? \"load model\" : \"predict\"}\n                    </button>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nPredict.propTypes = {\n    predict: PropTypes.func.isRequired,\n    loadRandomPokemon: PropTypes.func.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    params: PropTypes.object.isRequired,\n    modelLoaded: PropTypes.bool.isRequired,\n};\nPredict.defaultProps = {};\n\nexport default Predict;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ModelStatus({model}) {\n    return (\n        <div>\n            <h4>\n                Model:\n                <span style={{\n                    color: model ? '#57d500' : '#ff2e00',\n                    transition: 'all .3s ease'\n                }}>\n                    &#x25cf;\n                </span>\n            </h4>\n\n\n        </div>\n    );\n}\n\nModelStatus.propTypes = {};\nModelStatus.defaultProps = {};\n\nexport default ModelStatus;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction PredictionResults({predictions = [], pokemonType}) {\n\n    if (!predictions.length) {\n\n        return null;\n    }\n    return (\n        <div\n        >\n            <h4>Predicted Types</h4>\n            <ol className={'list-group'}>\n                {predictions.map((prediction, i) => {\n\n                    return (\n                        <li key={prediction}\n                            className={pokemonType == prediction ? 'list-group-item active' : 'list-group-item'}\n                        >\n                            {prediction}\n                        </li>\n                    )\n                })}\n            </ol>\n        </div>\n    );\n}\n\nPredictionResults.propTypes = {\n    predictions: PropTypes.array.isRequired,\n    pokemonType: PropTypes.string.isRequired,\n};\nPredictionResults.defaultProps = {};\n\nexport default PredictionResults;\n","import React, {Component} from 'react';\nimport './App.css';\nimport {\n    PokemonTypeModel\n} from \"./pokemonModel\";\nimport _ from \"lodash\";\nimport ResultTable from \"./ResultTable\";\nimport Predict from \"./Predict\";\nimport ModelStatus from \"./ModelStatus\";\nimport PredictionResults from \"./PredictionResults\";\n\n\nconst model = new PokemonTypeModel();\n\nconst samplePokemon = _.sample(model.data.pokemon);\n\nclass App extends Component {\n\n    state = {\n        model: model,\n        resultData: [],\n        training: false,\n        params: {\n            ...model.params,\n            ...samplePokemon\n        },\n        data: model.data.pokemon,\n        predictedTypes: [],\n\n    };\n\n    constructor(props) {\n\n        super();\n        this.run = this.run.bind(this);\n        this.save = this.save.bind(this);\n        this.loadRandomPokemon = this.loadRandomPokemon.bind(this);\n        this.load = this.load.bind(this);\n        this.predict = this.predict.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    async load() {\n\n        try {\n            const _model = await model.load();\n            this.setState({\n                ...this.state,\n                model: {\n                    ...this.state.model,\n                    ...model,\n                    model: _model.model,\n                },\n            }, () => console.log('loaded'))\n        } catch (e) {\n\n            alert(e);\n        }\n    }\n\n\n    /**\n     * Run inference on manually-input Iris flower data.\n     *\n     * @param this.state.model The instance of `tf.Model` to run the inference with.\n     */\n\n    async run() {\n        model.createModel();\n        this.setState({\n            ...this.state,\n            model: {\n                ...this.state.model,\n                ...model,\n                model: model.model,\n            },\n            training: true,\n            resultData: []\n        }, async () => {\n            await model.train(this.state.params);\n            const resultData = model.evaluateModelOnTestData();\n            this.setState({\n                ...this.state,\n                training: false,\n                resultData,\n            });\n        })\n    }\n\n\n    async save() {\n\n        try {\n\n            return await model.save();\n        } catch (e) {\n\n            window.alert(e);\n        }\n    }\n\n    handleChange({target: {value, name}}) {\n\n        this.setState({\n            ...this.state,\n            params: {\n                ...this.state.params,\n                [name]: value\n            }\n        });\n    }\n\n    loadRandomPokemon() {\n\n\n        const randPoke = _.sample(model.data.pokemon);\n\n        this.setState({\n            ...this.state,\n            predictedTypes: [],\n            params: {\n                ...this.state.params,\n                ...randPoke\n            }\n        })\n    }\n\n    predict() {\n\n        if (!model.model) {\n\n            window.alert('Load Model first');\n\n            return false;\n        }\n        const predictedTypes = model.predict(this.state.params);\n\n        this.setState({\n            ...this.state,\n            predictedTypes,\n        })\n\n    }\n\n\n    render() {\n\n        const {params, training, resultData, model: {model}, predictedTypes} = this.state;\n\n        return (\n            <div>\n\n                <div className={'container-fluid'}>\n\n\n                    <div className={'row'}>\n\n                        <div className={'col-md-3'}>\n\n                            <div className={'row'}>\n                                <ModelStatus model={model}/>\n                            </div>\n\n                            <form\n                                className={'my-3 py-3'}\n                                onSubmit={(e) => {\n                                    e.preventDefault();\n                                    this.run();\n                                }}\n                            >\n                                <h5>\n                                    Model Parameters\n\n                                </h5>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"train-epochs\">Train Epochs:</label>\n                                    <input\n\n                                        onChange={e => this.setState({\n                                            ...this.state,\n                                            params: {...params, epochs: e.target.value}\n                                        })}\n                                        min={0}\n                                        step={1}\n                                        className=\"form-control\"\n                                        id=\"train-epochs\"\n                                        type=\"number\" value={params.epochs}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"learning-rate\">Learning Rate:</label>\n                                    <input\n                                        onChange={e => this.setState({\n                                            ...this.state,\n                                            params: {...params, learningRate: e.target.value}\n                                        })}\n\n                                        className=\"form-control\"\n                                        id=\"learning-rate\"\n                                        type=\"number\"\n                                        value={params.learningRate}\n                                        step={0.00001}\n                                        min={0}\n                                        max={1}\n                                    />\n                                </div>\n\n                                <div className={'form-group'}>\n                                    <button\n                                        type={'submit'}\n                                        disabled={training}\n                                        className=\"btn btn-primary\"\n                                        id=\"train-from-scratch\"\n                                    >\n                                        Train model\n                                    </button>\n                                </div>\n\n                                <div className={'form-group'}>\n                                    <div className={'btn-group-sm'}>\n                                        <button\n                                            disabled={!model || training}\n                                            type={'button'}\n                                            onClick={() => this.save()}\n                                            className=\"btn btn-secondary\"\n                                            id=\"save-model\">save model\n                                        </button>\n                                        <button\n                                            disabled={training}\n                                            type={'button'}\n                                            onClick={() => this.load()}\n                                            className=\"btn btn-secondary\"\n                                            id=\"load-btn\">load model\n                                        </button>\n                                    </div>\n                                </div>\n\n                            </form>\n\n                            {model && 'toJSON' in model && (\n                                <form>\n                                    <label>Model Info</label>\n                                    <textarea\n                                        readOnly={true}\n                                        rows={5} className={'form-control'}\n                                        value={model.toJSON()}\n                                    >\n\n            </textarea>\n                                </form>\n                            )}\n\n                        </div>\n\n                        <div className={'col-md-9'}>\n\n                            <div className={'row'}>\n\n                                <div className={'row p-3 m-3'}>\n                                    <div className=\"canvases\" id=\"lossCanvas\"></div>\n                                    <div className=\"canvases\" id=\"accuracyCanvas\"></div>\n                                </div>\n                                {0 < resultData.length && !training && <ResultTable\n                                    data={resultData}\n                                />}\n\n                                {!training && model && (\n                                    <div className={'row'}>\n                                        <div className={'col-sm-6'}>\n                                            <Predict\n                                                modelLoaded={Boolean(model)}\n                                                loadRandomPokemon={this.loadRandomPokemon}\n                                                handleChange={this.handleChange} params={params}\n                                                predict={this.predict}/>\n                                        </div>\n                                        <div className={'col-sm-6'}>\n                                            <PredictionResults\n                                                pokemonType={params.Type || \"none\"}\n                                                predictions={predictedTypes}/>\n                                        </div>\n                                    </div>\n                                )\n                                }\n\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\n\nimport ReactTable from 'react-table'\n\n\nexport function Table({data}) {\n\n    const ex = {\n        id: 'friendName', // Required because our accessor is not a string\n        // Header: 'Friend Name',\n        // Cell: props => <span className='number'>{props.value}</span>, // Custom cell components!\n        // accessor: d => d.friend.name // Custom value accessors!\n    };\n\n    const columns = [\n\n        {\n            id: \"Name\",\n            Header: 'Name',\n            accessor: d => d.Name,\n            Cell: row => {\n\n                return (\n                    <span>\n                        <img\n                            className={'pr-2'}\n                            src={`https://img.pokemondb.net/artwork/${row.original.Name.toLowerCase()}.jpg`}\n                             width=\"36\" height=\"36\"\n                             alt=\"\"/>\n                        {row.original.Name}\n                    </span>\n                )\n            }\n        },\n        {\n            id: \"Type\",\n            Header: 'Type',\n            accessor: d => d.Type,\n        },\n        {\n            id: \"Total\",\n            Header: 'Total',\n            accessor: d => d.Total,\n        },\n        {\n            id: \"HP\",\n            Header: 'HP',\n            accessor: d => d.HP\n\n        },\n        {\n            id: 'Attack',\n            Header: 'Attack',\n            accessor: d => d.Attack\n        },\n        {\n            id: 'Defense',\n            Header: 'Defense',\n            accessor: d => d.Defense,\n        },\n        {\n            id: \"Speed\",\n            Header: 'Speed',\n            accessor: d => d.Speed,\n        },\n        {\n            id: 'Sp_Atk',\n            Header: 'Sp Atk',\n            accessor: d => d.Sp_Atk,\n        },\n        {\n            id: 'Sp_Def',\n            Header: 'Sp Def',\n            accessor: d => d.Sp_Def\n        }\n\n\n    ];\n\n    return <ReactTable\n        data={data}\n        defaultPageSize={10}\n        columns={columns}\n        className=\"-striped -highlight\"\n    />;\n}\n","import React from 'react';\n\nimport * as d3 from \"d3\";\nimport _ from 'lodash';\nimport './Tree.css';\n\n\nwindow.d3 = d3;\n\n\nconst data = {\n    name: \"dense_1\",\n    units: 256,\n    activation: \"relu\",\n    inputShape: 18,\n    children: [\n        {\n            name: 'dense_2',\n            units: 256,\n            activation: 'relu',\n            children: [{\n                name: 'dense_3',\n                units: 18,\n                activation: 'none',\n            }\n            ]\n        }\n    ],\n};\n\n\nvar margin = {top: 20, right: 20, bottom: 20, left: 20},\n    width = 400 - margin.right - margin.left,\n    height = 500 - margin.top - margin.bottom;\n\nclass Tree extends React.Component {\n\n\n    componentDidMount() {\n\n        const heirarchalData = d3.hierarchy(data);\n\n        const Tree = d3.tree()\n            .size([width, height]);\n\n        const tree = Tree(heirarchalData);\n\n        window.tree = tree;\n        const svg = d3.select('svg').append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n\n\n\n        const nodes = svg\n            .selectAll('g.node')\n            .data(tree.descendants())\n            .enter()\n            .append('g')\n            .classed('node', true)\n\n\n        // var tooltip = svg\n        //     .append(\"rect\")\n        //     .attr('width', 100)\n        //     .attr('height', 100)\n        //     .style('background', 'rgba(0, 0, 0, 0.8)')\n        //     .style('color', '#fff')\n        //     .style(\"position\", \"relative\")\n        //     .style(\"z-index\", \"10\")\n        //     .style(\"visibility\", \"hidden\")\n        //     .text(\"a simple tooltip\");\n\n\n        nodes\n            .append('circle')\n            .attr('cx', d => d.x)\n            .attr('cy', d => d.y)\n            .style('fill', '#696969')\n            .attr('z-index', 10)\n            .attr('r', 10)\n            // .on(\"mousemove\", function (event) {\n            //\n            //     console.log('e', event);\n            //     return tooltip.style(\"top\", (event.y - 10) + \"px\").style(\"left\", (event.x + 10) + \"px\");\n            // })\n            // .on(\"mouseout\", function () {\n            //     return tooltip.style(\"visibility\", \"hidden\");\n            // })\n            // .on(\"mouseover\", function () {\n            //     return tooltip.style(\"visibility\", \"visible\");\n            // })\n\n\n        nodes.append('text')\n            .attr('class', 'label')\n            .attr('dx', d => d.x + 50)\n            .attr('dy', d => d.y)\n            .text((d, i) => {\n\n                return `layer: ${i + 1} \\t units: ${d.data.units}`;\n            });\n\n        //The line SVG Path we draw\n        var lineGraph = svg.selectAll('.links')\n\n            .data(tree.links())\n            .enter()\n            .append('line')\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y + 10)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y - 10)\n            .attr(\"stroke\", \"blue\")\n            .attr(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\")\n            .style('stroke', '#5f5f5f')\n\n\n    }\n\n\n    render() {\n\n        return (\n            <svg width={width + margin.left + margin.right} height={height + margin.top + margin.bottom}>\n            </svg>\n        );\n    }\n}\n\nTree.propTypes = {};\nTree.defaultProps = {};\n\nexport default Tree;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tree from \"./Tree\";\n\n\nfunction About(props) {\n    return (\n        <div className={'container'}>\n            <h2>About</h2>\n\n            <div className={'row'}>\n                <div className={'row'}>\n                    <div>\n                        <div>\n                            Sequential model with 3 fully connected layers\n                            <ol>\n                                <li>\n                                    <b>\n                                        First Layer\n\n                                    </b>\n\n                                    <ul>\n                                        <li>\n                                            Input data: 18 units\n                                        </li>\n                                        <li>\n                                            Units: 256\n\n                                        </li>\n                                        <li>\n                                            Activation: Relu\n                                        </li>\n                                    </ul>\n\n                                </li>\n                                <li>\n\n                                    <b>\n                                        Second Layer\n                                    </b>\n                                    <ul>\n                                        <li>\n                                            Units: 256\n\n                                        </li>\n                                        <li>\n                                            Activation: Relu\n                                        </li>\n                                    </ul>\n\n                                </li>\n                                <li>\n\n                                    <b>\n                                        Third layer\n                                    </b>\n                                    <ul>\n                                        <li>\n                                            Units: 18\n                                            <small>\n                                                {' reduced to 18 pokemon types'}\n                                            </small>\n\n                                        </li>\n                                        <li>\n                                            Activation: none\n                                        </li>\n                                    </ul>\n                                </li>\n                            </ol>\n                        </div>\n                    </div>\n\n                    <Tree/>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nAbout.propTypes = {};\nAbout.defaultProps = {};\n\nexport default About;\n","import React from \"react\";\nimport {BrowserRouter as Router, Route, Link, Switch} from \"react-router-dom\";\nimport App from \"./App\";\nimport pokemonImg from \"./pokemon.jpg\";\nimport pokemon from './pokemon'\nimport {Table} from \"./Table\";\nimport About from \"./About\";\n\n\nconst Data = () => {\n\n    return (\n        <div className={'container-fluid'}>\n            <Table data={pokemon}/>\n        </div>\n    )\n};\n\nconst AppRouter = () => (\n    <Router>\n        <div>\n            <nav className={'navbar'}>\n                <Link to={'/classify'}>\n                    <h2 className={'navbar-brand'}>\n                        <img src={pokemonImg} alt={''} width={'50'} height={'auto'} className={'mr-2'}/>\n                        Pokemon Classification\n                    </h2>\n                </Link>\n                <ul className={'navbar-nav'}>\n                    <li>\n                        <Link to={'/classify'}>\n                            Home\n                        </Link>\n                    </li>\n                    <li>\n                        <Link to=\"/about\">About</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/data\">Data</Link>\n                    </li>\n                </ul>\n            </nav>\n            <Switch>\n                <Route path=\"/about\" component={About}/>\n                <Route path=\"/data\" component={Data}/>\n                <Route path={'/classify'} component={App}/>\n                <Route component={App}/>\n            </Switch>\n        </div>\n    </Router>\n);\n\nexport default AppRouter;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'jquery/dist/jquery.min'\nimport 'popper.js/dist/popper.min'\nimport 'bootstrap/dist/js/bootstrap.min'\nimport AppRouter from \"./Router\";\nimport * as tf from \"@tensorflow/tfjs\";\n\nwindow.tf = tf;\n\n\nReactDOM.render(<AppRouter/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}