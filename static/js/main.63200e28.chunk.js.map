{"version":3,"sources":["pokemon.jpg","serviceWorker.js","ResultTable.jsx","Predict.jsx","ModelStatus.jsx","PredictionResults.jsx","vegaEmbedGraph.js","pokemonModel.js","Header.jsx","App.jsx","Table.jsx","Tree.jsx","About.jsx","Router.jsx","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","ResultTable","_ref","data","columns","id","Header","accessor","d","Name","Cell","row","react_default","a","createElement","className","src","concat","original","toLowerCase","width","height","alt","type","pokemon","same","pred","top5","types","includes","arr","map","prediction","i","key","style","color","transition","es","defaultPageSize","defaultProps","props","Predict","predict","handleChange","params","loadRandomPokemon","_ref$modelLoaded","modelLoaded","inputs_","predictTestData","property","htmlFor","name","value","onChange","Type","split","readOnly","onSubmit","e","preventDefault","onClick","disabled","setTimeout","ModelStatus","model","training","PredictionResults","_ref$predictions","predictions","pokemonType","length","UI","Object","classCallCheck","this","createClass","accuracyValues","epoch","newTrainAccuracy","newValidationAccuracy","push","accuracy","set","embed","$schema","values","mark","encoding","x","field","y","lossValues","newTrainLoss","newValidationLoss","loss","tf","require","POKEMON_DATA","Total","HP","Attack","Defense","Speed","Sp_Atk","Sp_Def","POKEMON_TYPES","_","uniq","item","getName","_row","found","find","PokemonData","testSplit","arguments","undefined","_this$getPokemon","getPokemon","_this$getPokemon2","slicedToArray","xTrain","yTrain","xTest","yTest","tidy","dataByClass","targetsByClass","_loop","example","target","slice","idx","findIndex","xTrains","yTrains","xTests","yTests","_PokemonData$convertT","convertToTensors","_PokemonData$convertT2","targets","numExamples","Error","indices","util","shuffle","shuffledData","shuffledTargets","numTestExamples","Math","round","numTrainExamples","xDims","xs","tensor2d","ys","oneHot","tensor1d","toInt","PokemonTypeModel","_PokemonModel","possibleConstructorReturn","getPrototypeOf","call","inherits","xData","yTrue","yPred","logits","rows","chunk","exampleLogits","_data","topk","dataSync","Array","from","span","join","_this2","_this$data3","argMax","predictOut","renderEvaluateTable","foundP","_d","assign","_arr","tensor","PokemonModel","epochs","learningRate","generateData","dispose","_this$data","sequential","add","layers","dense","units","activation","inputShape","shape","loadModel","loadedModel","save","saveResults","createModel","optimizer","train","adam","returnCost","cost","minimize","_this","losses","softmaxCrossEntropy","asType","mean","trainLoss","plotLosses","nextFrame","App","run","bind","assertThisInitialized","load","samplePokemon","sample","state","resultData","predictedTypes","objectSpread","_model","setState","alert","_context","t0","asyncToGenerator","regenerator_default","_callee2","wrap","_context2","prev","next","evaluateModelOnTestData","stop","generateNewData","_context5","_ref2$target","_ref2","defineProperty","randPoke","_this3","_this$state","correctPredictions","filter","top5Pred","_ref3","correctPredictionsPercent","floor","top5PredictionsPercent","src_Header","min","step","max","isNaN","src_ResultTable","src_Predict","src_PredictionResults","Component","Table","d3","children","margin","Tree","heirarchalData","tree","size","svg","append","attr","nodes","selectAll","descendants","enter","classed","text","links","source","React","About","src_Tree_0","Data","AppRouter","BrowserRouter","Link","to","pokemonImg","Switch","Route","path","component","ReactDOM","render","Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63200e28.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokemon.a4f594f6.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactTable from \"react-table\";\n\nfunction ResultTable({data}) {\n\n\n    const columns = [\n\n        {\n            id: \"Name\",\n            Header: 'Name',\n            accessor: d => d.Name,\n            Cell: row => {\n\n                return (\n                    <span>\n                        <img\n                            className={'pr-2'}\n                            src={`https://img.pokemondb.net/artwork/${row.original.Name.toLowerCase()}.jpg`}\n                            width=\"36\"\n                            height=\"36\"\n                            alt={row.original.Name}/>\n                        {row.original.Name}\n                    </span>\n                )\n            }\n        },\n        {\n            id: \"Type\",\n            Header: 'Type',\n            accessor: d => d.type,\n        },\n        // {\n        //     id: \"Total\",\n        //     Header: 'Total',\n        //     accessor: d => d.Total,\n        // },\n        // {\n        //     id: \"HP\",\n        //     Header: 'HP',\n        //     accessor: d => d.HP\n        //\n        // },\n        // {\n        //     id: 'Attack',\n        //     Header: 'Attack',\n        //     accessor: d => d.Attack\n        // },\n        // {\n        //     id: 'Defense',\n        //     Header: 'Defense',\n        //     accessor: d => d.Defense,\n        // },\n        // {\n        //     id: \"Speed\",\n        //     Header: 'Speed',\n        //     accessor: d => d.Speed,\n        // },\n        // {\n        //     id: 'Sp_Atk',\n        //     Header: 'Sp_Atk',\n        //     accessor: d => d.Sp_Atk,\n        // },\n        // {\n        //     id: 'Sp_Def',\n        //     Header: 'Sp_Def',\n        //     accessor: d => d.Sp_Def\n        // },\n        {\n            id: \"Prediction\",\n            Header: \"Top 5 Predictions\",\n            Cell: row => {\n\n                const pokemon = row.original;\n\n                const same = pokemon.pred === pokemon.type;\n                const top5 = pokemon.types.includes(pokemon.type);\n\n                const arr = pokemon.types.map((prediction, i) => {\n\n                    if (prediction === pokemon.type) {\n\n                        return <b className={'p-1'} key={prediction + i}>{prediction}</b>\n                    }\n                    return <span className={'p-1'} key={prediction + i}>{prediction}</span>\n                });\n\n                return (\n                    <span>\n            <span style={{\n                color: same ? '#57d500'\n                    : top5 ? '#ffbf00'\n                        : '#ff2e00',\n                transition: 'all .3s ease'\n            }}>\n              &#x25cf;\n            </span> {arr}\n          </span>\n                );\n            }\n        }\n    ];\n\n\n\n    return (\n\n\n\n            <ReactTable\n                defaultPageSize={10}\n                className={'striped'}\n                columns={columns}\n                data={data}\n            />\n    );\n}\n\nResultTable.propTypes = {};\nResultTable.defaultProps = {};\n\nexport default ResultTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst props = ['Total', 'HP', 'Attack', 'Defense', 'Speed', 'Sp_Atk', 'Sp_Def'];\n\n\nfunction Predict({predict, handleChange, params, loadRandomPokemon, modelLoaded = false, predictTestData}) {\n\n    const inputs_ = props.map(property => {\n\n        return (\n            <div key={property}>\n                <label htmlFor={property}>{property}</label>\n                <input\n                    name={property}\n                    type={'number'}\n                    width={100}\n                    className={'form-control-sm mono'}\n                    id={property}\n                    value={params[property]}\n                    onChange={handleChange}\n                />\n            </div>\n\n        )\n    });\n\n    const {Name, Type: _Type} = params;\n\n    const Type = _Type.split('\\n')[0];\n\n    let readOnly = [];\n    if (Name && Type) {\n\n        readOnly = ['Name', 'Type'].map((property, i) => {\n\n            const value = property === 'Type' ? Type : params[property];\n\n            return (\n                <div key={property}>\n                    <label htmlFor={property}>\n                        {property}\n                    </label>\n                    <input type={'text'}\n                           className={'form-control-sm'}\n                           id={property}\n                           value={value}\n                           readOnly\n                           width={100}\n                    />\n                </div>\n            )\n\n        })\n    }\n\n    return (\n\n        <form onSubmit={e => {\n\n            e.preventDefault();\n            predict();\n\n        }}\n\n        >\n\n\n            {inputs_}\n\n\n            {readOnly}\n\n\n            <div className={'row my-3 mx-1 btn-group'}>\n                <button type={'button'} className={'btn btn-secondary'}\n                        onClick={loadRandomPokemon}\n                        disabled={!modelLoaded}\n                >\n                    random\n                </button>\n                <button\n                    disabled={!modelLoaded}\n\n                    onClick={predict}\n                    className={'btn btn-secondary'}>\n                    {!modelLoaded ? \"load model\" : \"predict\"}\n                </button>\n\n\n            </div>\n            <div className={'btn-group'}>\n\n                <button type={'button'} className={'btn btn-primary'}\n                        onClick={() => {\n                            loadRandomPokemon();\n\n                            setTimeout(predict, 100);\n                        }}\n                        disabled={!modelLoaded}\n                >\n                    random & predict\n                </button>\n\n            </div>\n        </form>\n    );\n}\n\nPredict.propTypes = {\n    predict: PropTypes.func.isRequired,\n    predictTestData: PropTypes.func.isRequired,\n    loadRandomPokemon: PropTypes.func.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    params: PropTypes.object.isRequired,\n    modelLoaded: PropTypes.bool.isRequired,\n};\nPredict.defaultProps = {};\n\nexport default Predict;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nfunction ModelStatus({model: {model}, training}) {\n\n    return (\n        <div>\n            <h4>\n                Model:\n                <span style={{\n                    color: model ? '#57d500' : '#ff2e00',\n                    transition: 'all .3s ease'\n                }}\n                      className={'pl-2'}\n                >\n                    &#x25cf;\n                </span>\n                {training && <small>\n                    training\n                </small>}\n            </h4>\n\n\n        </div>\n    );\n}\n\nModelStatus.propTypes = {};\nModelStatus.defaultProps = {};\n\nexport default ModelStatus;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction PredictionResults({predictions = [], pokemonType}) {\n\n    if (!predictions.length) {\n\n        return null;\n    }\n    return (\n        <div className={'my-2'}\n        >\n            <h4>Predicted Types</h4>\n            <ol className={'list-group'}>\n                {predictions.map((prediction, i) => {\n\n                    const type = pokemonType.split('\\n')[0];\n\n                    const same = type === prediction;\n\n                    return (\n                        <li key={prediction}\n                            className={same ? 'list-group-item active' : 'list-group-item'}\n                        >\n                            {prediction}\n                        </li>\n                    )\n                })}\n            </ol>\n        </div>\n    );\n}\n\nPredictionResults.propTypes = {\n    predictions: PropTypes.array.isRequired,\n    pokemonType: PropTypes.string.isRequired,\n};\nPredictionResults.defaultProps = {};\n\nexport default PredictionResults;\n","import embed from \"vega-embed\";\n\nexport class UI {\n\n    /**\n     * Plot new accuracy values.\n     *\n     * @param lossValues An `Array` of data to append to.\n     * @param epoch Training epoch number.\n     * @param newTrainLoss The new training accuracy, as a single `Number`.\n     * @param newValidationLoss The new validation accuracy, as a single `Number`.\n     */\n    static plotAccuracies(\n        accuracyValues, epoch, newTrainAccuracy, newValidationAccuracy) {\n        accuracyValues.push(\n            {epoch, 'accuracy': newTrainAccuracy, 'set': 'train'});\n        accuracyValues.push(\n            {epoch, 'accuracy': newValidationAccuracy, 'set': 'validation'});\n        embed(\n            '#accuracyCanvas', {\n                '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n                'data': {'values': accuracyValues},\n                'mark': 'line',\n                'encoding': {\n                    'x': {'field': 'epoch', 'type': 'ordinal'},\n                    'y': {'field': 'accuracy', 'type': 'quantitative'},\n                    'color': {'field': 'set', 'type': 'nominal'}\n                },\n                'width': 500\n            },\n            {});\n    }\n\n    static plotLosses(lossValues, epoch, newTrainLoss, newValidationLoss) {\n        lossValues.push({epoch, 'loss': newTrainLoss, 'set': 'train'});\n        lossValues.push(\n            {epoch, 'loss': newValidationLoss, 'set': 'validation'});\n        embed(\n            '#lossCanvas', {\n                '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n                'data': {'values': lossValues},\n                'mark': 'line',\n                'encoding': {\n                    'x': {'field': 'epoch', 'type': 'ordinal'},\n                    'y': {'field': 'loss', 'type': 'quantitative'},\n                    'color': {'field': 'set', 'type': 'nominal'}\n                },\n                'width': 500\n            },\n            {});\n    }\n\n\n}\n","/* eslint-disable arrow-parens */\nimport _ from \"lodash\";\nimport {UI} from \"./vegaEmbedGraph\";\n\nconst tf = require('@tensorflow/tfjs');\nconst pokemon = require('./pokemon');\n\nconst POKEMON_DATA = pokemon.map(mapJsonToArray);\n\nconst POKEMON_TYPES = _.uniq(POKEMON_DATA.map(item => item[8]));\n\nfunction mapJsonToArray(p) {\n\n\n    const {Name, Type, Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def} = p;\n\n    const type = Type.split('\\n')[0];\n\n    return [\n        Name,\n        Total,\n        HP,\n        Attack,\n        Defense,\n        Sp_Def,\n        Sp_Atk,\n        Speed,\n        type,\n    ]\n\n\n}\n\nfunction getName(_row) {\n\n    const found = POKEMON_DATA.find(pokemon => {\n\n        return pokemon[1] == _row[0] && pokemon[2] == _row[1]\n    });\n\n    if (found) {\n        return found[0]\n    }\n    return 'n/a';\n}\n\n\nclass PokemonData {\n\n\n    constructor(testSplit = 0.1) {\n\n        this.pokemon = pokemon;\n        this.POKEMON_DATA = POKEMON_DATA;\n        this.POKEMON_TYPES = POKEMON_TYPES;\n\n        const [xTrain, yTrain, xTest, yTest] = this.getPokemon(testSplit);\n\n        this.xTrain = xTrain;\n        this.yTrain = yTrain;\n        this.xTest = xTest;\n        this.yTest = yTest;\n    }\n\n    getPokemon(testSplit) {\n\n\n        return tf.tidy(() => {\n            const dataByClass = [];\n            const targetsByClass = [];\n            for (let i = 0; i < POKEMON_TYPES.length; ++i) {\n                dataByClass.push([]);\n                targetsByClass.push([]);\n            }\n\n            // const {dataset} = utils.normalizeDataset(POKEMON_DATA.map(i => i.slice(1, -1)), true, [], []);\n\n\n            for (let i = 0; i < POKEMON_DATA.length; i++) {\n                const example = POKEMON_DATA[i];\n                const target = example[example.length - 1];\n                const data = POKEMON_DATA.map(i => i.slice(1, -1));\n                const idx = POKEMON_TYPES.findIndex(type => type === target);\n                dataByClass[idx].push(data[i]);\n                targetsByClass[idx].push(idx);\n            }\n\n            const xTrains = [];\n            const yTrains = [];\n            const xTests = [];\n            const yTests = [];\n\n\n            for (let i = 0; i < POKEMON_TYPES.length; ++i) {\n                const [xTrain, yTrain, xTest, yTest] =\n                    PokemonData.convertToTensors(dataByClass[i], targetsByClass[i], testSplit);\n                xTrains.push(xTrain);\n                yTrains.push(yTrain);\n                xTests.push(xTest);\n                yTests.push(yTest);\n            }\n\n            const concatAxis = 0;\n            return [\n                tf.concat(xTrains, concatAxis), tf.concat(yTrains, concatAxis),\n                tf.concat(xTests, concatAxis), tf.concat(yTests, concatAxis)\n            ];\n        });\n    }\n\n\n    /**\n     * Convert Iris data arrays to `tf.Tensor`s.\n     *\n     * @param data The Iris input feature data, an `Array` of `Array`s, each element\n     *   of which is assumed to be a length-4 `Array` (for petal length, petal\n     *   width, sepal length, sepal width).\n     * @param targets An `Array` of numbers, with values from the set {0, 1, 2}:\n     *   representing the true category of the Iris flower. Assumed to have the same\n     *   array length as `data`.\n     * @param testSplit Fraction of the data at the end to split as test data: a\n     *   number between 0 and 1.\n     * @return A length-4 `Array`, with\n     *   - training data as `tf.Tensor` of shape [numTrainExapmles, 4].\n     *   - training one-hot labels as a `tf.Tensor` of shape [numTrainExamples, 3]\n     *   - test data as `tf.Tensor` of shape [numTestExamples, 4].\n     *   - test one-hot labels as a `tf.Tensor` of shape [numTestExamples, 3]\n     */\n    static convertToTensors(data, targets, testSplit) {\n        const numExamples = data.length;\n        if (numExamples !== targets.length) {\n            throw new Error('data and split have different numbers of examples');\n        }\n\n        // Randomly shuffle `data` and `targets`.\n        const indices = [];\n        for (let i = 0; i < numExamples; ++i) {\n            indices.push(i);\n        }\n        tf.util.shuffle(indices);\n\n        const shuffledData = [];\n        const shuffledTargets = [];\n        for (let i = 0; i < numExamples; ++i) {\n            shuffledData.push(data[indices[i]]);\n            shuffledTargets.push(targets[indices[i]]);\n        }\n\n        // Split the data into a training set and a tet set, based on `testSplit`.\n        const numTestExamples = Math.round(numExamples * testSplit);\n        const numTrainExamples = numExamples - numTestExamples;\n\n        const xDims = shuffledData[0].length;\n\n        // Create a 2D `tf.Tensor` to hold the feature data.\n        const xs = tf.tensor2d(shuffledData, [numExamples, xDims]);\n\n        // Create a 1D `tf.Tensor` to hold the labels, and convert the number label\n        // from the set {0, 1, 2} into one-hot encoding (.e.g., 0 --> [1, 0, 0]).\n        const ys = tf.oneHot(tf.tensor1d(shuffledTargets).toInt(), POKEMON_TYPES.length);\n\n        // Split the data into training and test sets, using `slice`.\n        const xTrain = xs.slice([0, 0], [numTrainExamples, xDims]);\n        const xTest = xs.slice([numTrainExamples, 0], [numTestExamples, xDims]);\n        const yTrain = ys.slice([0, 0], [numTrainExamples, POKEMON_TYPES.length]);\n        const yTest = ys.slice([0, 0], [numTestExamples, POKEMON_TYPES.length]);\n        return [xTrain, yTrain, xTest, yTest];\n    }\n\n\n}\n\nclass PokemonModel {\n\n    params = {\n        epochs: 50,\n        learningRate: 0.0005,\n    };\n    model;\n\n\n    constructor() {\n\n        this.generateData();\n\n    }\n\n    generateData() {\n\n        this.data = new PokemonData();\n    }\n\n    generateNewData() {\n\n        this.data.xTest.dispose();\n        this.data.yTest.dispose();\n        this.data.xTrain.dispose();\n        this.data.yTrain.dispose();\n        this.generateData();\n    }\n\n\n    createModel() {\n\n        const {xTrain, POKEMON_TYPES} = this.data;\n        let model;\n        model = tf.sequential();\n\n        model.add(tf.layers.dense(\n            {units: 256, activation: 'relu', inputShape: [xTrain.shape[1]]}));\n\n        model.add(\n            tf.layers.dense(\n                {units: 256, activation: 'relu'}\n            )\n        );\n\n        model.add(tf.layers.dense({units: POKEMON_TYPES.length}));\n\n        this.model = model;\n\n    }\n\n    async load() {\n\n\n        const loadedModel = await tf.loadModel('indexeddb://my-model-1');\n        this.model = loadedModel;\n\n        return this;\n\n    }\n\n    async save() {\n\n        if (this.model == null) {\n\n            throw new Error('Invalid Request');\n        }\n        const saveResults = await this.model.save(`indexeddb://my-model-1`);\n\n        return saveResults;\n    }\n\n    async train(params) {\n\n        if (!this.model) {\n\n            this.createModel();\n        }\n\n        const {xTrain, yTrain, xTest, yTest} = this.data;\n        const optimizer = tf.train.adam(params.learningRate);\n        const lossValues = [];\n\n        const returnCost = true;\n        for (let i = 0; i < params.epochs; i++) {\n            const cost = optimizer.minimize(() => {\n                const predictions = this.model.predict(xTrain);\n                return tf.losses.softmaxCrossEntropy(\n                    yTrain.asType('float32'),\n                    predictions.asType('float32')\n                ).mean();\n            }, returnCost);\n\n            const trainLoss = tf.losses.softmaxCrossEntropy(\n                yTest.asType('float32'),\n                this.model.predict(xTest).asType('float32')\n            ).mean();\n\n            UI.plotLosses(lossValues, i, cost.dataSync(), trainLoss.dataSync());\n\n            await tf.nextFrame();\n        }\n\n        return this;\n\n\n    };\n\n\n}\n\n\nexport class PokemonTypeModel extends PokemonModel {\n\n\n    constructor() {\n\n        super();\n    }\n\n    renderEvaluateTable(xData, yTrue, yPred, logits) {\n\n        const rows = _.chunk(xData, 7);\n\n        const data = [];\n\n        for (let i = 0; i < rows.length; i++) {\n\n            const row = rows[i];\n\n            const name = getName(row);\n\n            const type = POKEMON_TYPES[yTrue[i]];\n\n            const pred = POKEMON_TYPES[yPred[i]];\n            const exampleLogits = logits.slice(i * POKEMON_TYPES.length, (i + 1) * POKEMON_TYPES.length);\n\n            const top5 = tf.topk(exampleLogits, 5);\n            const _data = top5.indices.dataSync();\n\n            const types = Array.from(_data).map(item => POKEMON_TYPES[item]);\n\n            const strings = types.join(', ');\n\n            const span = strings;\n\n            data.push({\n                name,\n                type,\n                pred,\n                span,\n                types,\n                _data,\n            })\n\n        }\n        return {\n            data,\n        }\n\n    }\n\n    evaluateModelOnTestData() {\n\n        const {xTest, yTest} = this.data;\n\n        return tf.tidy(() => {\n            const xData = xTest.dataSync();\n            const yTrue = yTest.argMax(-1).dataSync();\n            const predictOut = this.model.predict(xTest);\n            const yPred = predictOut.argMax(-1);\n\n            const logits = predictOut.dataSync();\n\n\n            const result = this.renderEvaluateTable(\n                xData, yTrue, yPred.dataSync(), logits);\n\n\n            const resultData = result.data.map(d => {\n\n                const foundP = this.data.pokemon.find(_d => _d.Name === d.name);\n\n                if (foundP) {\n\n                    return Object.assign({}, foundP, d);\n\n                }\n\n                return d;\n            });\n\n            return resultData;\n\n            // calculateAndDrawConfusionMatrix(model, xTest, yTest);\n        });\n\n\n    }\n\n    predict({Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def}) {\n\n        const _arr = [Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def];\n\n        const tensor = tf.tensor2d(_arr, [1, 7], 'float32');\n        const prediction = this.model.predict(tensor);\n        const top5 = tf.topk(prediction, 5);\n        const _data = top5.indices.dataSync();\n        const predictedTypes = Array.from(_data).map(item => POKEMON_TYPES[item]);\n        return predictedTypes;\n    }\n\n\n}\n\n\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Header(props) {\n    return (\n        <div>\n            <h1>Tensorflow.js Classification</h1>\n            <p>\n                Train a model to predict pokemon types from their stats.\n            </p>\n\n            <h3 className={'section-title'}>\n                Description\n            </h3>\n\n            <p>\n                This example showcases how to use Tensorflow.js to perform\n                simple classification.\n\n            </p>\n\n            <p>\n                Through training on test data, the model will learn to predict\n                pokemon types from their stats\n            </p>\n\n            <h3 className={'section-title'}>\n                Instructions\n            </h3>\n\n            <ul>\n                <li>\n                    Train new model by clicking train model (or load local model if saved)\n                </li>\n                <li>\n                    Note that while the model is training it periodically saves a copy of itself to local browser\n                    storage, this mean you can refresh the page and continue training from the last save point. If at\n                    any point you want to start training from scratch, click \"Delete stored Model\".\n                </li>\n                <li>\n                    Once the model has finished training you can click \"Predict\" to see the results of the predictions\n                </li>\n            </ul>\n        </div>\n    );\n}\n\nHeader.propTypes = {};\nHeader.defaultProps = {};\n\nexport default Header;\n","import React, {Component} from 'react';\nimport './App.css';\nimport {sample} from \"lodash\";\nimport ResultTable from \"./ResultTable\";\nimport Predict from \"./Predict\";\nimport ModelStatus from \"./ModelStatus\";\nimport PredictionResults from \"./PredictionResults\";\n\n\nimport {PokemonTypeModel} from \"./pokemonModel\";\nimport Header from \"./Header\";\n\nlet model;\n\nclass App extends Component {\n\n    constructor(props) {\n\n        super();\n        this.run = this.run.bind(this);\n        this.save = this.save.bind(this);\n        this.predictTestData = this.predictTestData.bind(this);\n        this.loadRandomPokemon = this.loadRandomPokemon.bind(this);\n        this.load = this.load.bind(this);\n        this.predict = this.predict.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n\n\n        model = new PokemonTypeModel();\n        const samplePokemon = sample(model.data.pokemon);\n        this.state = {\n            resultData: [],\n            training: false,\n            predictedTypes: [],\n            params: {\n                ...model.params,\n                ...samplePokemon\n            }\n\n        };\n\n    }\n\n    async load() {\n\n        try {\n            const _model = await model.load();\n            this.setState({\n                ...this.state,\n                model: {\n                    ...this.state.model,\n                    ...model,\n                    model: _model.model,\n                },\n            })\n        } catch (e) {\n\n            alert(e);\n        }\n    }\n\n\n    /**\n     * Run inference on manually-input Iris flower data.\n     *\n     * @param this.state.model The instance of `tf.Model` to run the inference with.\n     */\n\n    async run() {\n        model.createModel();\n        this.setState({\n            ...this.state,\n            training: true,\n            resultData: []\n        }, async () => {\n            await model.train(this.state.params);\n            const resultData = model.evaluateModelOnTestData();\n            this.setState({\n                ...this.state,\n                training: false,\n                resultData,\n            });\n        })\n    }\n\n\n    async predictTestData() {\n\n        model.generateNewData();\n        const resultData = model.evaluateModelOnTestData();\n\n        this.setState({\n            ...this.state,\n            resultData\n        })\n    }\n\n\n    async save() {\n\n        try {\n\n            await model.save();\n\n            window.alert('model saved');\n\n            return true;\n        } catch (e) {\n\n            window.alert(e);\n        }\n    }\n\n    handleChange({target: {value, name}}) {\n\n        this.setState({\n            ...this.state,\n            params: {\n                ...this.state.params,\n                [name]: value\n            }\n        });\n    }\n\n    loadRandomPokemon() {\n\n\n        const randPoke = sample(model.data.pokemon);\n\n        this.setState({\n            ...this.state,\n            predictedTypes: [],\n            params: {\n                ...this.state.params,\n                ...randPoke\n            }\n        })\n    }\n\n    predict() {\n\n        if (!model.model) {\n\n            window.alert('Load Model first');\n\n            return false;\n        }\n        const predictedTypes = model.predict(this.state.params);\n\n        this.setState({\n            ...this.state,\n            predictedTypes,\n        })\n\n    }\n\n\n    render() {\n\n        const {params, training, resultData, predictedTypes} = this.state;\n\n        const correctPredictions = resultData.filter(d => d.pred === d.type).length;\n        const top5Pred = resultData.filter(({types, type}) => types.includes(type)).length;\n        const predictions = resultData.length;\n\n        const correctPredictionsPercent = Math.floor((correctPredictions / predictions) * 100);\n        const top5PredictionsPercent = Math.floor((top5Pred / predictions) * 100);\n\n        return (\n            <div className={'container'}>\n                <Header/>\n\n                <div className={'row'}>\n\n                    <div className={'col-xs-6'}>\n                        <div className={'row'}>\n                            <button\n                                disabled={!model.model || training}\n                                type={'button'}\n                                onClick={() => this.save()}\n                                className=\"btn btn-secondary m-2\"\n                                id=\"save-model\">save model\n                            </button>\n                            <button\n                                disabled={training}\n                                type={'button'}\n                                onClick={() => this.load()}\n                                className=\"btn btn-secondary m-2\"\n                                id=\"load-btn\">load model\n                            </button>\n                        </div>\n                        <div className={'row'}>\n                            <form\n                                className={'col-xs-6 my-3 py-3'}\n                                onSubmit={(e) => {\n                                    e.preventDefault();\n                                    this.run();\n                                }}\n                            >\n                                <h3 className={'section-title'}>\n                                    Training Parameters\n\n                                </h3>\n\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"train-epochs\">Train Epochs:</label>\n                                    <input\n\n                                        onChange={e => this.setState({\n                                            ...this.state,\n                                            params: {...params, epochs: e.target.value}\n                                        })}\n                                        min={0}\n                                        step={1}\n                                        className=\"form-control-sm form-number\"\n                                        id=\"train-epochs\"\n                                        type=\"number\" value={params.epochs}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"learning-rate\">Learning Rate:</label>\n                                    <input\n                                        onChange={e => this.setState({\n                                            ...this.state,\n                                            params: {...params, learningRate: e.target.value}\n                                        })}\n\n                                        width={200}\n                                        className=\"form-control-sm form-number\"\n                                        id=\"learning-rate\"\n                                        type=\"number\"\n                                        value={params.learningRate}\n                                        step={0.00001}\n                                        min={0}\n                                        max={1}\n                                    />\n                                </div>\n\n                                <div className={'row py-3'}>\n                                    <button\n                                        type={'submit'}\n                                        disabled={training}\n                                        className=\"btn btn-primary m-2\"\n                                        id=\"train-from-scratch\"\n                                    >\n                                        Train\n                                    </button>\n                                    <button type={'button'} className={'btn btn-primary m-2'}\n                                            onClick={() => {\n\n                                                this.predictTestData();\n                                            }}\n                                            disabled={!model.model}\n                                    >\n                                        Test\n                                    </button>\n                                </div>\n\n\n                            </form>\n\n\n                        </div>\n\n                    </div>\n                    <div className={'col-xs-6'}>\n                        <div className=\"canvases\" id=\"lossCanvas\"></div>\n                        <div className=\"canvases\" id=\"accuracyCanvas\"></div>\n                    </div>\n\n                </div>\n\n                <h3 className={'section-title'}>\n                    Results\n\n                </h3>\n                {!isNaN(correctPredictions) && !isNaN(top5PredictionsPercent) && <div className={'row m-2'}>\n                    <h5 className={'float-right'}>\n                        Correct\n                        <span className={'badge badge-secondary m-1 mono'}>\n                                {correctPredictionsPercent + '%'}\n                            </span>\n                        Top 5\n                        <span className={'badge badge-secondary m-1 mono'}>\n                                 {top5PredictionsPercent + '%'}\n                            </span>\n                    </h5>\n                </div>\n                }\n                {0 < resultData.length && !training && <ResultTable\n                    data={resultData}\n                />}\n\n                {!training && model.model && (\n                    <div>\n                        <h3 className={'section-title'}>Predict Pokemon Type</h3>\n                        <div className={'row'}>\n                            <div className={'col m-1'}>\n                                <Predict\n                                    predictTestData={this.predictTestData}\n                                    modelLoaded={Boolean(model.model)}\n                                    loadRandomPokemon={this.loadRandomPokemon}\n                                    handleChange={this.handleChange} params={params}\n                                    predict={this.predict}/>\n\n                            </div>\n                            <div className={'col m-1'}>\n                                <PredictionResults\n                                    pokemonType={params.Type || \"none\"}\n                                    predictions={predictedTypes}/>\n                            </div>\n                        </div>\n                    </div>\n                )\n                }\n\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\n\nimport ReactTable from 'react-table'\nexport function Table({data}) {\n\n    const ex = {\n        id: 'friendName', // Required because our accessor is not a string\n        // Header: 'Friend Name',\n        // Cell: props => <span className='number'>{props.value}</span>, // Custom cell components!\n        // accessor: d => d.friend.name // Custom value accessors!\n    };\n\n    const columns = [\n\n        {\n            id: \"Name\",\n            Header: 'Name',\n            accessor: d => d.Name,\n            Cell: row => {\n\n                return (\n                    <span>\n                        <img\n                            className={'pr-2'}\n                            src={`https://img.pokemondb.net/artwork/${row.original.Name.toLowerCase()}.jpg`}\n                             width=\"36\" height=\"36\"\n                             alt=\"\"/>\n                        {row.original.Name}\n                    </span>\n                )\n            }\n        },\n        {\n            id: \"Type\",\n            Header: 'Type',\n            accessor: d => d.Type,\n        },\n        {\n            id: \"Total\",\n            Header: 'Total',\n            accessor: d => d.Total,\n        },\n        {\n            id: \"HP\",\n            Header: 'HP',\n            accessor: d => d.HP\n\n        },\n        {\n            id: 'Attack',\n            Header: 'Attack',\n            accessor: d => d.Attack\n        },\n        {\n            id: 'Defense',\n            Header: 'Defense',\n            accessor: d => d.Defense,\n        },\n        {\n            id: \"Speed\",\n            Header: 'Speed',\n            accessor: d => d.Speed,\n        },\n        {\n            id: 'Sp_Atk',\n            Header: 'Sp Atk',\n            accessor: d => d.Sp_Atk,\n        },\n        {\n            id: 'Sp_Def',\n            Header: 'Sp Def',\n            accessor: d => d.Sp_Def\n        }\n\n\n    ];\n\n    return <ReactTable\n        data={data}\n        defaultPageSize={10}\n        columns={columns}\n        className=\"-striped -highlight\"\n    />;\n}\n","import React from 'react';\n\nimport * as d3 from \"d3\";\nimport _ from 'lodash';\nimport './Tree.css';\n\n\nwindow.d3 = d3;\n\n\nconst data = {\n    name: \"dense_1\",\n    units: 256,\n    activation: \"relu\",\n    inputShape: 18,\n    children: [\n        {\n            name: 'dense_2',\n            units: 256,\n            activation: 'relu',\n            children: [{\n                name: 'dense_3',\n                units: 18,\n                activation: 'none',\n            }\n            ]\n        }\n    ],\n};\n\n\nvar margin = {top: 20, right: 20, bottom: 20, left: 20},\n    width = 400 - margin.right - margin.left,\n    height = 500 - margin.top - margin.bottom;\n\nclass Tree extends React.Component {\n\n\n    componentDidMount() {\n\n        const heirarchalData = d3.hierarchy(data);\n\n        const Tree = d3.tree()\n            .size([width, height]);\n\n        const tree = Tree(heirarchalData);\n\n        window.tree = tree;\n        const svg = d3.select('svg').append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n\n\n\n        const nodes = svg\n            .selectAll('g.node')\n            .data(tree.descendants())\n            .enter()\n            .append('g')\n            .classed('node', true)\n\n\n        // var tooltip = svg\n        //     .append(\"rect\")\n        //     .attr('width', 100)\n        //     .attr('height', 100)\n        //     .style('background', 'rgba(0, 0, 0, 0.8)')\n        //     .style('color', '#fff')\n        //     .style(\"position\", \"relative\")\n        //     .style(\"z-index\", \"10\")\n        //     .style(\"visibility\", \"hidden\")\n        //     .text(\"a simple tooltip\");\n\n\n        nodes\n            .append('circle')\n            .attr('cx', d => d.x)\n            .attr('cy', d => d.y)\n            .style('fill', '#696969')\n            .attr('z-index', 10)\n            .attr('r', 10)\n            // .on(\"mousemove\", function (event) {\n            //\n            //     console.log('e', event);\n            //     return tooltip.style(\"top\", (event.y - 10) + \"px\").style(\"left\", (event.x + 10) + \"px\");\n            // })\n            // .on(\"mouseout\", function () {\n            //     return tooltip.style(\"visibility\", \"hidden\");\n            // })\n            // .on(\"mouseover\", function () {\n            //     return tooltip.style(\"visibility\", \"visible\");\n            // })\n\n\n        nodes.append('text')\n            .attr('class', 'label')\n            .attr('dx', d => d.x + 50)\n            .attr('dy', d => d.y)\n            .text((d, i) => {\n\n                return `layer: ${i + 1} \\t units: ${d.data.units}`;\n            });\n\n        //The line SVG Path we draw\n        var lineGraph = svg.selectAll('.links')\n\n            .data(tree.links())\n            .enter()\n            .append('line')\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y + 10)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y - 10)\n            .attr(\"stroke\", \"blue\")\n            .attr(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\")\n            .style('stroke', '#5f5f5f')\n\n\n    }\n\n\n    render() {\n\n        return (\n            <svg width={width + margin.left + margin.right} height={height + margin.top + margin.bottom}>\n            </svg>\n        );\n    }\n}\n\nTree.propTypes = {};\nTree.defaultProps = {};\n\nexport default Tree;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tree from \"./Tree\";\n\n\nfunction About(props) {\n    return (\n        <div className={'container'}>\n            <h2>About</h2>\n\n            <div className={'row'}>\n                <div className={'row'}>\n                    <div>\n                        <div>\n                            Sequential model with 3 fully connected layers\n                            <ol>\n                                <li>\n                                    <b>\n                                        First Layer\n\n                                    </b>\n\n                                    <ul>\n                                        <li>\n                                            Input data: 18 units\n                                        </li>\n                                        <li>\n                                            Units: 256\n\n                                        </li>\n                                        <li>\n                                            Activation: Relu\n                                        </li>\n                                    </ul>\n\n                                </li>\n                                <li>\n\n                                    <b>\n                                        Second Layer\n                                    </b>\n                                    <ul>\n                                        <li>\n                                            Units: 256\n\n                                        </li>\n                                        <li>\n                                            Activation: Relu\n                                        </li>\n                                    </ul>\n\n                                </li>\n                                <li>\n\n                                    <b>\n                                        Third layer\n                                    </b>\n                                    <ul>\n                                        <li>\n                                            Units: 18\n                                            <small>\n                                                {' reduced to 18 pokemon types'}\n                                            </small>\n\n                                        </li>\n                                        <li>\n                                            Activation: none\n                                        </li>\n                                    </ul>\n                                </li>\n                            </ol>\n                        </div>\n                    </div>\n\n                    <Tree/>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nAbout.propTypes = {};\nAbout.defaultProps = {};\n\nexport default About;\n","import React from \"react\";\nimport {BrowserRouter as Router, Route, Link, Switch} from \"react-router-dom\";\nimport App from \"./App\";\nimport pokemonImg from \"./pokemon.jpg\";\nimport pokemon from './pokemon'\nimport {Table} from \"./Table\";\nimport About from \"./About\";\n\n\nconst Data = () => {\n\n    return (\n        <div className={'container-fluid'}>\n            <Table data={pokemon}/>\n        </div>\n    )\n};\n\nconst AppRouter = () => (\n    <Router>\n        <div>\n            <nav className={'navbar'}>\n                <Link to={'/classify'}>\n                    <h2 className={'navbar-brand'}>\n                        <img src={pokemonImg} alt={''} width={'50'} height={'auto'} className={'mr-2'}/>\n                        Pokemon Classification\n                    </h2>\n                </Link>\n                <ul className={'navbar-nav'}>\n                    <li>\n                        <Link to={'/classify'}>\n                            Home\n                        </Link>\n                    </li>\n                    <li>\n                        <Link to=\"/about\">About</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/data\">Data</Link>\n                    </li>\n                </ul>\n            </nav>\n            <Switch>\n                <Route path=\"/about\" component={About}/>\n                <Route path=\"/data\" component={Data}/>\n                <Route path={'/classify'} component={App}/>\n                <Route component={App}/>\n            </Switch>\n        </div>\n    </Router>\n);\n\nexport default AppRouter;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'jquery/dist/jquery.min'\nimport 'popper.js/dist/popper.min'\nimport 'bootstrap/dist/js/bootstrap.min'\nimport AppRouter from \"./Router\";\nimport * as tf from \"@tensorflow/tfjs\";\nwindow.tf = tf;\n\nReactDOM.render(<AppRouter/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}