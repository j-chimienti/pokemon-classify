{"version":3,"sources":["serviceWorker.js","tensorflow.model.js","ResultTable.jsx","Predict.jsx","ModelStatus.jsx","PredictionResults.jsx","App.jsx","Table.jsx","Tree.jsx","About.jsx","Router.jsx","index.js","pokemon.jpg"],"names":["Boolean","window","location","hostname","match","tf","require","_uniq","POKEMON_DATA","map","p","Name","Type","Total","HP","Attack","Defense","Speed","Sp_Atk","Sp_Def","type","split","POKEMON_TYPES","item","plotLosses","lossValues","epoch","newTrainLoss","newValidationLoss","push","loss","set","embed","$schema","data","values","mark","encoding","x","field","y","color","width","getPokemon","testSplit","arguments","length","undefined","tidy","dataByClass","targetsByClass","i","_loop","example","target","slice","idx","findIndex","xTrains","yTrains","xTests","yTests","_convertToTensors","convertToTensors","_convertToTensors2","Object","slicedToArray","xTrain","yTrain","xTest","yTest","concat","targets","numExamples","Error","indices","util","shuffle","shuffledData","shuffledTargets","numTestExamples","Math","round","numTrainExamples","xDims","xs","tensor2d","ys","oneHot","tensor1d","toInt","ResultTable","_ref","columns","id","Header","accessor","d","Cell","row","react_default","a","createElement","className","src","original","toLowerCase","height","alt","pokemon","same","pred","top5","types","includes","arr","prediction","key","style","transition","correctPredictions","filter","top5Pred","_ref2","predictions","floor","es","defaultPageSize","defaultProps","props","Predict","predict","handleChange","params","loadRandomPokemon","_ref$modelLoaded","modelLoaded","inputs_","property","htmlFor","value","onChange","readOnly","onSubmit","e","preventDefault","console","log","onClick","disabled","ModelStatus","model","PredictionResults","_ref$predictions","pokemonType","getName","_row","found","find","samplePokemon","_","sample","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","resultData","training","objectSpread","epochs","learningRate","predictedTypes","run","bind","assertThisInitialized","save","createModelIfNeeded","load","train","trainModel","evaluateModelOnTestData","sequential","add","layers","dense","units","activation","inputShape","shape","createModel","summary","setState","asyncToGenerator","regenerator_default","_callee2","_model","wrap","_context2","prev","next","_this2","sent","stop","xData","yTrue","yPred","logits","rows","chunk","name","exampleLogits","_data","dataSync","Array","from","span","join","_this3","argMax","predictOut","renderEvaluateTable","foundP","_d","assign","alert","error","_context4","t0","_ref2$target","defineProperty","randPoke","_this$state","_this$state$params","_arr","tensor","optimizer","adam","compile","metrics","accuracyValues","fit","validationData","callbacks","onEpochEnd","_onEpochEnd","_callee5","logs","_context5","val_loss","plotAccuracies","acc","val_acc","_x11","_x12","apply","returnCost","cost","minimize","softmaxCrossEntropy","asType","mean","trainLoss","loadedModel","_this4","_this$state2","src_ModelStatus","min","step","max","toJSON","src_ResultTable","src_Predict","src_PredictionResults","newTrainAccuracy","newValidationAccuracy","accuracy","Component","Table","d3","children","margin","Tree","heirarchalData","tree","size","svg","append","attr","nodes","selectAll","descendants","enter","classed","text","links","source","React","About","src_Tree_0","Data","AppRouter","BrowserRouter","Link","to","pokemonImg","Switch","Route","path","component","ReactDOM","render","Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/main.d83ca5a0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable arrow-parens */\nimport embed from \"vega-embed\";\n\nconst tf = require('@tensorflow/tfjs');\nconst _uniq = require('lodash.uniq');\nconst pokemond = require('./pokemon');\n\nexport const POKEMON_DATA = pokemond.map(mapJsonToArray);\n\nexport const POKEMON_TYPES = _uniq(POKEMON_DATA.map(item => item[8]));\n\nfunction mapJsonToArray(p) {\n\n\n    const {Name, Type, Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def} = p;\n\n    const type = Type.split('\\n')[0];\n\n    return [\n        Name,\n        Total,\n        HP,\n        Attack,\n        Defense,\n        Sp_Def,\n        Sp_Atk,\n        Speed,\n        type,\n    ]\n\n\n}\n\n\nexport function createModel(xTrain) {\n\n\n    let model;\n    model = tf.sequential();\n\n    model.add(tf.layers.dense(\n        {units: 256, activation: 'relu', inputShape: [xTrain.shape[1]]}));\n\n    model.add(\n        tf.layers.dense(\n            {units: 256, activation: 'relu'}\n        )\n    );\n\n    model.add(tf.layers.dense({units: POKEMON_TYPES.length}));\n\n    return model;\n\n\n}\n\n\n\nexport function plotLosses(lossValues, epoch, newTrainLoss, newValidationLoss) {\n    lossValues.push({epoch, 'loss': newTrainLoss, 'set': 'train'});\n    lossValues.push(\n        {epoch, 'loss': newValidationLoss, 'set': 'validation'});\n    embed(\n        '#lossCanvas', {\n            '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n            'data': {'values': lossValues},\n            'mark': 'line',\n            'encoding': {\n                'x': {'field': 'epoch', 'type': 'ordinal'},\n                'y': {'field': 'loss', 'type': 'quantitative'},\n                'color': {'field': 'set', 'type': 'nominal'}\n            },\n            'width': 500\n        },\n        {});\n}\n\n\nexport function getPokemon(testSplit = 0.2) {\n\n\n    return tf.tidy(() => {\n        const dataByClass = [];\n        const targetsByClass = [];\n        for (let i = 0; i < POKEMON_TYPES.length; ++i) {\n            dataByClass.push([]);\n            targetsByClass.push([]);\n        }\n\n        // const {dataset} = utils.normalizeDataset(POKEMON_DATA.map(i => i.slice(1, -1)), true, [], []);\n\n\n        for (let i = 0; i < POKEMON_DATA.length; i++) {\n            const example = POKEMON_DATA[i];\n            const target = example[example.length - 1];\n            const data = POKEMON_DATA.map(i => i.slice(1, -1));\n            const idx = POKEMON_TYPES.findIndex(type => type === target);\n            dataByClass[idx].push(data[i]);\n            targetsByClass[idx].push(idx);\n        }\n\n        const xTrains = [];\n        const yTrains = [];\n        const xTests = [];\n        const yTests = [];\n\n\n        for (let i = 0; i < POKEMON_TYPES.length; ++i) {\n            const [xTrain, yTrain, xTest, yTest] =\n                convertToTensors(dataByClass[i], targetsByClass[i], testSplit);\n            xTrains.push(xTrain);\n            yTrains.push(yTrain);\n            xTests.push(xTest);\n            yTests.push(yTest);\n        }\n\n        const concatAxis = 0;\n        return [\n            tf.concat(xTrains, concatAxis), tf.concat(yTrains, concatAxis),\n            tf.concat(xTests, concatAxis), tf.concat(yTests, concatAxis)\n        ];\n    });\n}\n\n/**\n * Convert Iris data arrays to `tf.Tensor`s.\n *\n * @param data The Iris input feature data, an `Array` of `Array`s, each element\n *   of which is assumed to be a length-4 `Array` (for petal length, petal\n *   width, sepal length, sepal width).\n * @param targets An `Array` of numbers, with values from the set {0, 1, 2}:\n *   representing the true category of the Iris flower. Assumed to have the same\n *   array length as `data`.\n * @param testSplit Fraction of the data at the end to split as test data: a\n *   number between 0 and 1.\n * @return A length-4 `Array`, with\n *   - training data as `tf.Tensor` of shape [numTrainExapmles, 4].\n *   - training one-hot labels as a `tf.Tensor` of shape [numTrainExamples, 3]\n *   - test data as `tf.Tensor` of shape [numTestExamples, 4].\n *   - test one-hot labels as a `tf.Tensor` of shape [numTestExamples, 3]\n */\nexport function convertToTensors(data, targets, testSplit) {\n    const numExamples = data.length;\n    if (numExamples !== targets.length) {\n        throw new Error('data and split have different numbers of examples');\n    }\n\n    // Randomly shuffle `data` and `targets`.\n    const indices = [];\n    for (let i = 0; i < numExamples; ++i) {\n        indices.push(i);\n    }\n    tf.util.shuffle(indices);\n\n    const shuffledData = [];\n    const shuffledTargets = [];\n    for (let i = 0; i < numExamples; ++i) {\n        shuffledData.push(data[indices[i]]);\n        shuffledTargets.push(targets[indices[i]]);\n    }\n\n    // Split the data into a training set and a tet set, based on `testSplit`.\n    const numTestExamples = Math.round(numExamples * testSplit);\n    const numTrainExamples = numExamples - numTestExamples;\n\n    const xDims = shuffledData[0].length;\n\n    // Create a 2D `tf.Tensor` to hold the feature data.\n    const xs = tf.tensor2d(shuffledData, [numExamples, xDims]);\n\n    // Create a 1D `tf.Tensor` to hold the labels, and convert the number label\n    // from the set {0, 1, 2} into one-hot encoding (.e.g., 0 --> [1, 0, 0]).\n    const ys = tf.oneHot(tf.tensor1d(shuffledTargets).toInt(), POKEMON_TYPES.length);\n\n    // Split the data into training and test sets, using `slice`.\n    const xTrain = xs.slice([0, 0], [numTrainExamples, xDims]);\n    const xTest = xs.slice([numTrainExamples, 0], [numTestExamples, xDims]);\n    const yTrain = ys.slice([0, 0], [numTrainExamples, POKEMON_TYPES.length]);\n    const yTest = ys.slice([0, 0], [numTestExamples, POKEMON_TYPES.length]);\n    return [xTrain, yTrain, xTest, yTest];\n}\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactTable from \"react-table\";\n\nfunction ResultTable({data}) {\n\n\n    const columns = [\n\n        {\n            id: \"Name\",\n            Header: 'Name',\n            accessor: d => d.Name,\n            Cell: row => {\n\n                return (\n                    <span>\n                        <img\n                            className={'pr-2'}\n                            src={`https://img.pokemondb.net/artwork/${row.original.Name.toLowerCase()}.jpg`}\n                            width=\"36\"\n                            height=\"36\"\n                            alt={row.original.Name}/>\n                        {row.original.Name}\n                    </span>\n                )\n            }\n        },\n        {\n            id: \"Type\",\n            Header: 'Type',\n            accessor: d => d.type,\n        },\n        // {\n        //     id: \"Total\",\n        //     Header: 'Total',\n        //     accessor: d => d.Total,\n        // },\n        // {\n        //     id: \"HP\",\n        //     Header: 'HP',\n        //     accessor: d => d.HP\n        //\n        // },\n        // {\n        //     id: 'Attack',\n        //     Header: 'Attack',\n        //     accessor: d => d.Attack\n        // },\n        // {\n        //     id: 'Defense',\n        //     Header: 'Defense',\n        //     accessor: d => d.Defense,\n        // },\n        // {\n        //     id: \"Speed\",\n        //     Header: 'Speed',\n        //     accessor: d => d.Speed,\n        // },\n        // {\n        //     id: 'Sp_Atk',\n        //     Header: 'Sp_Atk',\n        //     accessor: d => d.Sp_Atk,\n        // },\n        // {\n        //     id: 'Sp_Def',\n        //     Header: 'Sp_Def',\n        //     accessor: d => d.Sp_Def\n        // },\n        {\n            id: \"Prediction\",\n            Header: \"Top 5 Predictions\",\n            Cell: row => {\n\n                const pokemon = row.original;\n\n                const same = pokemon.pred === pokemon.type;\n                const top5 = pokemon.types.includes(pokemon.type);\n\n                const arr = pokemon.types.map((prediction, i) => {\n\n                    if (prediction === pokemon.type) {\n\n                        return <b className={'p-1'} key={prediction + i}>{prediction}</b>\n                    }\n                    return <span className={'p-1'} key={prediction + i}>{prediction}</span>\n                });\n\n                return (\n                    <span>\n            <span style={{\n                color: same ? '#57d500'\n                    : top5 ? '#ffbf00'\n                        : '#ff2e00',\n                transition: 'all .3s ease'\n            }}>\n              &#x25cf;\n            </span> {arr}\n          </span>\n                );\n            }\n        }\n    ];\n\n\n    const correctPredictions = data.filter(d => d.pred === d.type).length;\n    const top5Pred = data.filter(({types, type}) => types.includes(type)).length;\n    const predictions = data.length;\n    return (\n        <div>\n\n\n            <table className={'table table-condensed'}>\n                <thead>\n                <tr>\n                    <th className={'text-right'}>\n                        Correct\n                    </th>\n                    <th className={'text-right'}>\n                        top 5\n                    </th>\n                </tr>\n                </thead>\n                <tr>\n                    <td className={'mono text-right'}>\n                        {Math.floor((correctPredictions / predictions) * 100) + '%'}\n                    </td>\n                    <td className={'mono text-right'}>\n                        {Math.floor((top5Pred / predictions) * 100) + '%'}\n                    </td>\n                </tr>\n            </table>\n\n\n            <ReactTable\n                defaultPageSize={10}\n                className={'striped'}\n                columns={columns}\n                data={data}\n            />\n        </div>\n    );\n}\n\nResultTable.propTypes = {};\nResultTable.defaultProps = {};\n\nexport default ResultTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst props = ['Total', 'HP', 'Attack', 'Defense', 'Speed', 'Sp_Atk', 'Sp_Def'];\n\n\nfunction Predict({predict, handleChange, params, loadRandomPokemon, modelLoaded = false}) {\n\n    const inputs_ = props.map(property => {\n\n        return (\n            <div key={property}>\n                <label htmlFor={property}>{property}</label>\n                <input type={'number'} className={'form-control mono'} id={property}\n                       value={params[property]}\n                       onChange={handleChange}\n                />\n            </div>\n\n        )\n    });\n\n    const {Name, Type: _Type} = params;\n\n    const Type = _Type.split('\\n')[0];\n\n    let readOnly = [];\n    if (Name && Type) {\n\n        readOnly = ['Name', 'Type'].map((property, i) => {\n\n            const value = property === 'Type' ? Type : params[property];\n\n            return (\n                <div key={property}>\n                    <label htmlFor={property}>\n                        {property}\n                    </label>\n                    <input type={'text'}\n                           className={'form-control'}\n                           id={property}\n                           value={value}\n                           readOnly\n                    />\n                </div>\n            )\n\n        })\n    }\n\n    return (\n        <div>\n            <form onSubmit={e => {\n\n                e.preventDefault();\n                console.log('redi')\n                predict();\n            }}\n                  className={'form-inline'}\n\n            >\n                <h3>Predict Pokemon Type</h3>\n\n                {inputs_} <br/>\n                {readOnly}\n                <div className={'form-group'}>\n\n                    <button type={'button'} className={'btn btn-secondary'}\n                            onClick={loadRandomPokemon}\n                            disabled={!modelLoaded}\n                    >\n                        load random pokemon\n                    </button>\n                    <button\n                        disabled={!modelLoaded}\n                        type={'submit'} className={'btn btn-primary'}>\n                        {!modelLoaded ? \"load model\" : \"predict\"}\n                    </button>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nPredict.propTypes = {\n    predict: PropTypes.func.isRequired,\n    loadRandomPokemon: PropTypes.func.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    params: PropTypes.object.isRequired,\n    modelLoaded: PropTypes.bool.isRequired,\n};\nPredict.defaultProps = {};\n\nexport default Predict;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ModelStatus({model}) {\n    return (\n        <div>\n            <h4>\n                Model:\n                <span style={{\n                    color: model ? '#57d500' : '#ff2e00',\n                    transition: 'all .3s ease'\n                }}>\n                    &#x25cf;\n                </span>\n            </h4>\n\n\n        </div>\n    );\n}\n\nModelStatus.propTypes = {};\nModelStatus.defaultProps = {};\n\nexport default ModelStatus;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction PredictionResults({predictions = [], pokemonType}) {\n\n    if (!predictions.length) {\n\n        return null;\n    }\n    return (\n        <div\n        >\n            <h4>Predicted Types</h4>\n            <ol className={'list-group'}>\n                {predictions.map((prediction, i) => {\n\n                    return (\n                        <li key={prediction}\n                            className={pokemonType == prediction ? 'list-group-item active' : 'list-group-item'}\n                        >\n                            {prediction}\n                        </li>\n                    )\n                })}\n            </ol>\n        </div>\n    );\n}\n\nPredictionResults.propTypes = {\n    predictions: PropTypes.array.isRequired,\n    pokemonType: PropTypes.string.isRequired,\n};\nPredictionResults.defaultProps = {};\n\nexport default PredictionResults;\n","import React, {Component} from 'react';\nimport './App.css';\nimport * as tf from '@tensorflow/tfjs';\n\nimport {createModel, getPokemon, plotLosses, POKEMON_DATA, POKEMON_TYPES} from \"./tensorflow.model\";\nimport embed from \"vega-embed\";\nimport pokemon from './pokemon'\nimport _ from \"lodash\";\nimport ResultTable from \"./ResultTable\";\nimport Predict from \"./Predict\";\nimport ModelStatus from \"./ModelStatus\";\nimport PredictionResults from \"./PredictionResults\";\nimport {Link} from \"react-router-dom\";\nimport pokemonImg from \"./pokemon.jpg\";\nimport AppRouter from \"./Router\";\n\nwindow.tf = tf;\n\n\nexport function getName(_row) {\n\n    const found = POKEMON_DATA.find(pokemon => {\n\n        return pokemon[1] == _row[0] && pokemon[2] == _row[1]\n    });\n\n    if (found) {\n        return found[0]\n    }\n    return 'n/a';\n}\n\n\nconst samplePokemon = _.sample(pokemon);\n\n\nclass App extends Component {\n\n\n    state = {\n        model: null,\n        resultData: [],\n        training: false,\n        params: {\n            epochs: 50,\n            learningRate: 0.0005,\n            ...samplePokemon\n\n        },\n        data: pokemon,\n        predictedTypes: [],\n\n    };\n\n    constructor(props) {\n\n        super();\n        this.run = this.run.bind(this);\n        this.save = this.save.bind(this);\n        this.loadRandomPokemon = this.loadRandomPokemon.bind(this);\n        this.createModelIfNeeded = this.createModelIfNeeded.bind(this);\n        this.load = this.load.bind(this);\n        this.train = this.train.bind(this);\n        this.predict = this.predict.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.trainModel = this.trainModel.bind(this);\n        this.evaluateModelOnTestData = this.evaluateModelOnTestData.bind(this);\n    }\n\n    componentDidMount() {\n\n    }\n\n    /**\n     * Plot new accuracy values.\n     *\n     * @param lossValues An `Array` of data to append to.\n     * @param epoch Training epoch number.\n     * @param newTrainLoss The new training accuracy, as a single `Number`.\n     * @param newValidationLoss The new validation accuracy, as a single `Number`.\n     */\n    static plotAccuracies(\n        accuracyValues, epoch, newTrainAccuracy, newValidationAccuracy) {\n        accuracyValues.push(\n            {epoch, 'accuracy': newTrainAccuracy, 'set': 'train'});\n        accuracyValues.push(\n            {epoch, 'accuracy': newValidationAccuracy, 'set': 'validation'});\n        embed(\n            '#accuracyCanvas', {\n                '$schema': 'https://vega.github.io/schema/vega-lite/v2.json',\n                'data': {'values': accuracyValues},\n                'mark': 'line',\n                'encoding': {\n                    'x': {'field': 'epoch', 'type': 'ordinal'},\n                    'y': {'field': 'accuracy', 'type': 'quantitative'},\n                    'color': {'field': 'set', 'type': 'nominal'}\n                },\n                'width': 500\n            },\n            {});\n    }\n\n\n    /**\n     * Train a `tf.Model` to recognize Iris flower type.\n     *\n     * @param xTrain Training feature data, a `tf.Tensor` of shape\n     *   [numTrainExamples, 4]. The second dimension include the features\n     *   petal length, petalwidth, sepal length and sepal width.\n     * @param yTrain One-hot training labels, a `tf.Tensor` of shape\n     *   [numTrainExamples, 3].\n     * @param xTest Test feature data, a `tf.Tensor` of shape [numTestExamples, 4].\n     * @param yTest One-hot test labels, a `tf.Tensor` of shape\n     *   [numTestExamples, 3].\n     * @returns The trained `tf.Model` instance.\n     */\n    async trainModel(model, xTrain, yTrain, xTest, yTest) {\n\n\n        return await this.train(model, xTrain, yTrain, xTest, yTest);\n    }\n\n    createModelIfNeeded(xTrain) {\n\n        let {model} = this.state;\n        if (!model) {\n\n            model = createModel(xTrain);\n\n        }\n\n        model.summary();\n\n        return model;\n\n\n    }\n\n\n    /**\n     * Run inference on manually-input Iris flower data.\n     *\n     * @param this.state.model The instance of `tf.Model` to run the inference with.\n     */\n\n\n\n\n    async run() {\n\n\n        const [xTrain, yTrain, xTest, yTest] = getPokemon(0.1);\n\n        const model = this.createModelIfNeeded(xTrain);\n\n        this.setState({\n            ...this.state,\n            model,\n            training: true,\n            resultData: []\n        }, async () => {\n\n\n            const _model = await this.trainModel(model, xTrain, yTrain, xTest, yTest);\n\n            window.model = _model;\n\n            window.xTest = xTest;\n            window.yTest = yTest;\n\n            const resultData = this.evaluateModelOnTestData(_model, xTest, yTest);\n\n            this.setState({\n                ...this.state,\n                model: _model,\n                training: false,\n                resultData,\n            });\n        })\n    }\n\n\n    renderEvaluateTable(xData, yTrue, yPred, logits) {\n\n        const rows = _.chunk(xData, 7);\n\n        const data = [];\n\n        for (let i = 0; i < rows.length; i++) {\n\n            const row = rows[i];\n\n            const name = getName(row);\n\n            const type = POKEMON_TYPES[yTrue[i]];\n\n            const pred = POKEMON_TYPES[yPred[i]];\n            const exampleLogits = logits.slice(i * POKEMON_TYPES.length, (i + 1) * POKEMON_TYPES.length);\n\n            const top5 = tf.topk(exampleLogits, 5);\n            const _data = top5.indices.dataSync();\n\n            const types = Array.from(_data).map(item => POKEMON_TYPES[item]);\n\n            const strings = types.join(', ');\n\n            const span = strings;\n\n            data.push({\n                name,\n                type,\n                pred,\n                span,\n                types,\n                _data,\n            })\n\n        }\n        return {\n            data,\n        }\n\n    }\n\n\n    evaluateModelOnTestData(model, xTest, yTest) {\n\n        return tf.tidy(() => {\n            const xData = xTest.dataSync();\n            const yTrue = yTest.argMax(-1).dataSync();\n            const predictOut = model.predict(xTest);\n            const yPred = predictOut.argMax(-1);\n\n            const logits = predictOut.dataSync();\n\n\n            const result = this.renderEvaluateTable(\n                xData, yTrue, yPred.dataSync(), logits);\n\n\n            const resultData = result.data.map(d => {\n\n                const foundP = this.state.data.find(_d => _d.Name === d.name);\n\n                if (foundP) {\n\n                    return Object.assign({}, foundP, d);\n\n                }\n\n                return d;\n            });\n\n            return resultData;\n\n            // calculateAndDrawConfusionMatrix(model, xTest, yTest);\n        });\n\n\n        // await predictOnManualInput(model);\n    }\n\n\n    async save() {\n\n\n        try {\n\n            // localstorage\n\n            if (this.state.model == null) {\n\n                throw new Error('Invalid Request');\n            }\n            const saveResults = await this.state.model.save(`indexeddb://my-model-1`);\n\n            window.alert('saved');\n        } catch (e) {\n\n            console.error(e);\n\n            window.alert(\"Error Saving Model\")\n        }\n\n\n    }\n\n    handleChange({target: {value, name}}) {\n\n        this.setState({\n            ...this.state,\n            params: {\n                ...this.state.params,\n                [name]: value\n            }\n        });\n    }\n\n    loadRandomPokemon() {\n\n\n        const randPoke = _.sample(pokemon);\n\n        this.setState({\n            ...this.state,\n            predictedTypes: [],\n            params: {\n                ...this.state.params,\n                ...randPoke\n            }\n        })\n    }\n\n    predict() {\n\n        const {model, params: {Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def}} = this.state;\n\n\n        if (!model) {\n\n            window.alert('Load Model first');\n\n            return false;\n        }\n        const _arr = [Total, HP, Attack, Defense, Speed, Sp_Atk, Sp_Def];\n\n        const tensor = tf.tensor2d(_arr, [1, 7], 'float32');\n        const prediction = model.predict(tensor);\n\n        const top5 = tf.topk(prediction, 5);\n        const _data = top5.indices.dataSync();\n        const types = Array.from(_data).map(item => POKEMON_TYPES[item]);\n\n        this.setState({\n            ...this.state,\n            predictedTypes: types,\n        });\n    }\n\n\n    /*\n    bad results\n     */\n    async _train(model, xTrain, yTrain, xTest, yTest) {\n\n        const {params} = this.state;\n\n        const optimizer = tf.train.adam(params.learningRate);\n        model.compile({\n            optimizer: optimizer,\n            loss: 'categoricalCrossentropy',\n            metrics: ['accuracy'],\n        });\n\n        const lossValues = [];\n        const accuracyValues = [];\n        // Call `model.fit` to train the model.\n        return await model.fit(xTrain, yTrain, {\n            epochs: params.epochs,\n            validationData: [xTest, yTest],\n            callbacks: {\n                onEpochEnd: async (epoch, logs) => {\n                    // Plot the loss and accuracy values at the end of every training epoch.\n                    plotLosses(lossValues, epoch, logs.loss, logs.val_loss);\n                    App.plotAccuracies(accuracyValues, epoch, logs.acc, logs.val_acc);\n                },\n            }\n        });\n\n\n    }\n\n\n    async train(model, xTrain, yTrain, xTest, yTest) {\n\n        const {params} = this.state;\n\n        const optimizer = tf.train.adam(params.learningRate);\n        const lossValues = [];\n\n        const returnCost = true;\n\n\n        for (let i = 0; i < params.epochs; i++) {\n            const cost = optimizer.minimize(() => {\n                const predictions = model.predict(xTrain);\n                return tf.losses.softmaxCrossEntropy(\n                    yTrain.asType('float32'),\n                    predictions.asType('float32')\n                ).mean();\n            }, returnCost);\n\n            const trainLoss = tf.losses.softmaxCrossEntropy(\n                yTest.asType('float32'),\n                model.predict(xTest).asType('float32')\n            ).mean();\n\n            plotLosses(lossValues, i, cost.dataSync(), trainLoss.dataSync());\n\n            await tf.nextFrame();\n        }\n\n        return model;\n\n\n    };\n\n\n    async load() {\n\n        try {\n\n\n            const loadedModel = await tf.loadModel('indexeddb://my-model-1');\n\n            this.setState({model: loadedModel});\n\n        } catch (e) {\n\n            window.alert('Error loading model')\n        }\n    }\n\n\n    render() {\n\n        const {params, training, resultData, model, predictedTypes} = this.state;\n\n        return (\n            <div>\n\n                <div className={'container-fluid'}>\n\n\n                    <div className={'row'}>\n\n                        <div className={'col-md-3'}>\n\n                            <div className={'row'}>\n                                <ModelStatus model={model}/>\n                            </div>\n\n                            <form\n                                className={'my-3 py-3'}\n                                onSubmit={(e) => {\n                                    e.preventDefault();\n                                    this.run();\n                                }}\n                            >\n                                <h5>\n                                    Model Parameters\n\n                                </h5>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"train-epochs\">Train Epochs:</label>\n                                    <input\n\n                                        onChange={e => this.setState({\n                                            ...this.state,\n                                            params: {...params, epochs: e.target.value}\n                                        })}\n                                        min={0}\n                                        step={1}\n                                        className=\"form-control\"\n                                        id=\"train-epochs\"\n                                        type=\"number\" value={params.epochs}\n                                    />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"learning-rate\">Learning Rate:</label>\n                                    <input\n                                        onChange={e => this.setState({\n                                            ...this.state,\n                                            params: {...params, learningRate: e.target.value}\n                                        })}\n\n                                        className=\"form-control\"\n                                        id=\"learning-rate\"\n                                        type=\"number\"\n                                        value={params.learningRate}\n                                        step={0.00001}\n                                        min={0}\n                                        max={1}\n                                    />\n                                </div>\n\n                                <div className={'form-group'}>\n                                    <button\n                                        type={'submit'}\n                                        disabled={training}\n                                        className=\"btn btn-primary\"\n                                        id=\"train-from-scratch\"\n                                    >\n                                        Train model\n                                    </button>\n                                </div>\n\n                                <div className={'form-group'}>\n                                    <div className={'btn-group-sm'}>\n                                        <button\n                                            disabled={!model || training}\n                                            type={'button'}\n                                            onClick={() => this.save()}\n                                            className=\"btn btn-secondary\"\n                                            id=\"save-model\">save model\n                                        </button>\n                                        <button\n                                            disabled={training}\n                                            type={'button'}\n                                            onClick={() => this.load()}\n                                            className=\"btn btn-secondary\"\n                                            id=\"load-btn\">load model\n                                        </button>\n                                    </div>\n                                </div>\n\n                            </form>\n\n                            {model && 'toJSON' in model && (\n                                <form>\n                                    <label>Model Info</label>\n                                    <textarea\n                                        readOnly={true}\n                                        rows={5} className={'form-control'}\n                                        value={model.toJSON()}\n                                    >\n\n            </textarea>\n                                </form>\n                            )}\n\n                        </div>\n\n                        <div className={'col-md-9'}>\n\n                            <div className={'row'}>\n\n                                <div className={'row p-3 m-3'}>\n                                    <div className=\"canvases\" id=\"lossCanvas\"></div>\n                                    <div className=\"canvases\" id=\"accuracyCanvas\"></div>\n                                </div>\n                                {0 < resultData.length && !training && <ResultTable\n                                    data={resultData}\n                                />}\n\n                                {!training && model && (\n                                    <div className={'row'}>\n                                        <div className={'col-sm-6'}>\n                                            <Predict\n                                                modelLoaded={Boolean(model)}\n                                                loadRandomPokemon={this.loadRandomPokemon}\n                                                handleChange={this.handleChange} params={params}\n                                                predict={this.predict}/>\n                                        </div>\n                                        <div className={'col-sm-6'}>\n                                            <PredictionResults\n                                                pokemonType={params.Type || \"none\"}\n                                                predictions={predictedTypes}/>\n                                        </div>\n                                    </div>\n                                )\n                                }\n\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\n\nimport ReactTable from 'react-table'\n\n\nexport function Table({data}) {\n\n    const ex = {\n        id: 'friendName', // Required because our accessor is not a string\n        // Header: 'Friend Name',\n        // Cell: props => <span className='number'>{props.value}</span>, // Custom cell components!\n        // accessor: d => d.friend.name // Custom value accessors!\n    };\n\n    const columns = [\n\n        {\n            id: \"Name\",\n            Header: 'Name',\n            accessor: d => d.Name,\n            Cell: row => {\n\n                return (\n                    <span>\n                        <img\n                            className={'pr-2'}\n                            src={`https://img.pokemondb.net/artwork/${row.original.Name.toLowerCase()}.jpg`}\n                             width=\"36\" height=\"36\"\n                             alt=\"\"/>\n                        {row.original.Name}\n                    </span>\n                )\n            }\n        },\n        {\n            id: \"Type\",\n            Header: 'Type',\n            accessor: d => d.Type,\n        },\n        {\n            id: \"Total\",\n            Header: 'Total',\n            accessor: d => d.Total,\n        },\n        {\n            id: \"HP\",\n            Header: 'HP',\n            accessor: d => d.HP\n\n        },\n        {\n            id: 'Attack',\n            Header: 'Attack',\n            accessor: d => d.Attack\n        },\n        {\n            id: 'Defense',\n            Header: 'Defense',\n            accessor: d => d.Defense,\n        },\n        {\n            id: \"Speed\",\n            Header: 'Speed',\n            accessor: d => d.Speed,\n        },\n        {\n            id: 'Sp_Atk',\n            Header: 'Sp Atk',\n            accessor: d => d.Sp_Atk,\n        },\n        {\n            id: 'Sp_Def',\n            Header: 'Sp Def',\n            accessor: d => d.Sp_Def\n        }\n\n\n    ];\n\n    return <ReactTable\n        data={data}\n        defaultPageSize={10}\n        columns={columns}\n        className=\"-striped -highlight\"\n    />;\n}\n","import React from 'react';\n\nimport * as d3 from \"d3\";\nimport _ from 'lodash';\nimport './Tree.css';\n\n\nwindow.d3 = d3;\n\n\nconst data = {\n    name: \"dense_1\",\n    units: 256,\n    activation: \"relu\",\n    inputShape: 18,\n    children: [\n        {\n            name: 'dense_2',\n            units: 256,\n            activation: 'relu',\n            children: [{\n                name: 'dense_3',\n                units: 18,\n                activation: 'none',\n            }\n            ]\n        }\n    ],\n};\n\n\nvar margin = {top: 20, right: 20, bottom: 20, left: 20},\n    width = 400 - margin.right - margin.left,\n    height = 500 - margin.top - margin.bottom;\n\nclass Tree extends React.Component {\n\n\n    componentDidMount() {\n\n        const heirarchalData = d3.hierarchy(data);\n\n        const Tree = d3.tree()\n            .size([width, height]);\n\n        const tree = Tree(heirarchalData);\n\n        window.tree = tree;\n        const svg = d3.select('svg').append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n\n\n\n        const nodes = svg\n            .selectAll('g.node')\n            .data(tree.descendants())\n            .enter()\n            .append('g')\n            .classed('node', true)\n\n\n        // var tooltip = svg\n        //     .append(\"rect\")\n        //     .attr('width', 100)\n        //     .attr('height', 100)\n        //     .style('background', 'rgba(0, 0, 0, 0.8)')\n        //     .style('color', '#fff')\n        //     .style(\"position\", \"relative\")\n        //     .style(\"z-index\", \"10\")\n        //     .style(\"visibility\", \"hidden\")\n        //     .text(\"a simple tooltip\");\n\n\n        nodes\n            .append('circle')\n            .attr('cx', d => d.x)\n            .attr('cy', d => d.y)\n            .style('fill', '#696969')\n            .attr('z-index', 10)\n            .attr('r', 10)\n            // .on(\"mousemove\", function (event) {\n            //\n            //     console.log('e', event);\n            //     return tooltip.style(\"top\", (event.y - 10) + \"px\").style(\"left\", (event.x + 10) + \"px\");\n            // })\n            // .on(\"mouseout\", function () {\n            //     return tooltip.style(\"visibility\", \"hidden\");\n            // })\n            // .on(\"mouseover\", function () {\n            //     return tooltip.style(\"visibility\", \"visible\");\n            // })\n\n\n        nodes.append('text')\n            .attr('class', 'label')\n            .attr('dx', d => d.x + 50)\n            .attr('dy', d => d.y)\n            .text((d, i) => {\n\n                return `layer: ${i + 1} \\t units: ${d.data.units}`;\n            });\n\n        //The line SVG Path we draw\n        var lineGraph = svg.selectAll('.links')\n\n            .data(tree.links())\n            .enter()\n            .append('line')\n            .attr(\"x1\", d => d.source.x)\n            .attr(\"y1\", d => d.source.y + 10)\n            .attr(\"x2\", d => d.target.x)\n            .attr(\"y2\", d => d.target.y - 10)\n            .attr(\"stroke\", \"blue\")\n            .attr(\"stroke-width\", 2)\n            .attr(\"fill\", \"none\")\n            .style('stroke', '#5f5f5f')\n\n\n    }\n\n\n    render() {\n\n        return (\n            <svg width={width + margin.left + margin.right} height={height + margin.top + margin.bottom}>\n            </svg>\n        );\n    }\n}\n\nTree.propTypes = {};\nTree.defaultProps = {};\n\nexport default Tree;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tree from \"./Tree\";\n\n\nfunction About(props) {\n    return (\n        <div className={'container'}>\n            <h2>About</h2>\n\n            <div className={'row'}>\n                <div className={'row'}>\n                    <div>\n                        <div>\n                            Sequential model with 3 fully connected layers\n                            <ol>\n                                <li>\n                                    <b>\n                                        First Layer\n\n                                    </b>\n\n                                    <ul>\n                                        <li>\n                                            Input data: 18 units\n                                        </li>\n                                        <li>\n                                            Units: 256\n\n                                        </li>\n                                        <li>\n                                            Activation: Relu\n                                        </li>\n                                    </ul>\n\n                                </li>\n                                <li>\n\n                                    <b>\n                                        Second Layer\n                                    </b>\n                                    <ul>\n                                        <li>\n                                            Units: 256\n\n                                        </li>\n                                        <li>\n                                            Activation: Relu\n                                        </li>\n                                    </ul>\n\n                                </li>\n                                <li>\n\n                                    <b>\n                                        Third layer\n                                    </b>\n                                    <ul>\n                                        <li>\n                                            Units: 18\n                                            <small>\n                                                {' reduced to 18 pokemon types'}\n                                            </small>\n\n                                        </li>\n                                        <li>\n                                            Activation: none\n                                        </li>\n                                    </ul>\n                                </li>\n                            </ol>\n                        </div>\n                    </div>\n\n                    <Tree/>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nAbout.propTypes = {};\nAbout.defaultProps = {};\n\nexport default About;\n","import React from \"react\";\nimport {BrowserRouter as Router, Route, Link, Switch} from \"react-router-dom\";\nimport App from \"./App\";\nimport pokemonImg from \"./pokemon.jpg\";\nimport pokemon from './pokemon'\nimport {Table} from \"./Table\";\nimport About from \"./About\";\n\n\nconst Data = () => {\n\n    return (\n        <div className={'container-fluid'}>\n            <Table data={pokemon}/>\n        </div>\n    )\n};\n\nconst AppRouter = () => (\n    <Router>\n        <div>\n            <nav className={'navbar'}>\n                <Link to={'/classify'}>\n                    <h2 className={'navbar-brand'}>\n                        <img src={pokemonImg} alt={''} width={'50'} height={'auto'} className={'mr-2'}/>\n                        Pokemon Classification\n                    </h2>\n                </Link>\n                <ul className={'navbar-nav'}>\n                    <li>\n                        <Link to={'/classify'}>\n                            Home\n                        </Link>\n                    </li>\n                    <li>\n                        <Link to=\"/about\">About</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/data\">Data</Link>\n                    </li>\n                </ul>\n            </nav>\n            <Switch>\n                <Route path=\"/about\" component={About}/>\n                <Route path=\"/data\" component={Data}/>\n                <Route path={'/classify'} component={App}/>\n                <Route component={App}/>\n            </Switch>\n        </div>\n    </Router>\n);\n\nexport default AppRouter;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'jquery/dist/jquery.min'\nimport 'popper.js/dist/popper.min'\nimport 'bootstrap/dist/js/bootstrap.min'\nimport AppRouter from \"./Router\";\n\nReactDOM.render(<AppRouter/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","module.exports = __webpack_public_path__ + \"static/media/pokemon.a4f594f6.jpg\";"],"sourceRoot":""}